/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class HardwareBuffer {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected HardwareBuffer(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(HardwareBuffer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_HardwareBuffer(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SWIGTYPE_p_void lock(long offset, long length, HardwareBuffer.LockOptions options, HardwareBuffer.UploadOptions uploadOpt) {
    long cPtr = OgreJNI.HardwareBuffer_lock__SWIG_0(swigCPtr, this, offset, length, options.swigValue(), uploadOpt.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public SWIGTYPE_p_void lock(long offset, long length, HardwareBuffer.LockOptions options) {
    long cPtr = OgreJNI.HardwareBuffer_lock__SWIG_1(swigCPtr, this, offset, length, options.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public SWIGTYPE_p_void lock(HardwareBuffer.LockOptions options, HardwareBuffer.UploadOptions uploadOpt) {
    long cPtr = OgreJNI.HardwareBuffer_lock__SWIG_2(swigCPtr, this, options.swigValue(), uploadOpt.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public SWIGTYPE_p_void lock(HardwareBuffer.LockOptions options) {
    long cPtr = OgreJNI.HardwareBuffer_lock__SWIG_3(swigCPtr, this, options.swigValue());
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public void unlock() {
    OgreJNI.HardwareBuffer_unlock(swigCPtr, this);
  }

  public void readData(long offset, long length, SWIGTYPE_p_void pDest) {
    OgreJNI.HardwareBuffer_readData(swigCPtr, this, offset, length, SWIGTYPE_p_void.getCPtr(pDest));
  }

  public void writeData(long offset, long length, SWIGTYPE_p_void pSource, boolean discardWholeBuffer) {
    OgreJNI.HardwareBuffer_writeData__SWIG_0(swigCPtr, this, offset, length, SWIGTYPE_p_void.getCPtr(pSource), discardWholeBuffer);
  }

  public void writeData(long offset, long length, SWIGTYPE_p_void pSource) {
    OgreJNI.HardwareBuffer_writeData__SWIG_1(swigCPtr, this, offset, length, SWIGTYPE_p_void.getCPtr(pSource));
  }

  public void copyData(HardwareBuffer srcBuffer, long srcOffset, long dstOffset, long length, boolean discardWholeBuffer) {
    OgreJNI.HardwareBuffer_copyData__SWIG_0(swigCPtr, this, HardwareBuffer.getCPtr(srcBuffer), srcBuffer, srcOffset, dstOffset, length, discardWholeBuffer);
  }

  public void copyData(HardwareBuffer srcBuffer, long srcOffset, long dstOffset, long length) {
    OgreJNI.HardwareBuffer_copyData__SWIG_1(swigCPtr, this, HardwareBuffer.getCPtr(srcBuffer), srcBuffer, srcOffset, dstOffset, length);
  }

  public void copyData(HardwareBuffer srcBuffer) {
    OgreJNI.HardwareBuffer_copyData__SWIG_2(swigCPtr, this, HardwareBuffer.getCPtr(srcBuffer), srcBuffer);
  }

  public void _updateFromShadow() {
    OgreJNI.HardwareBuffer__updateFromShadow(swigCPtr, this);
  }

  public long getSizeInBytes() {
    return OgreJNI.HardwareBuffer_getSizeInBytes(swigCPtr, this);
  }

  public HardwareBuffer.Usage getUsage() {
    return HardwareBuffer.Usage.swigToEnum(OgreJNI.HardwareBuffer_getUsage(swigCPtr, this));
  }

  public boolean isSystemMemory() {
    return OgreJNI.HardwareBuffer_isSystemMemory(swigCPtr, this);
  }

  public boolean hasShadowBuffer() {
    return OgreJNI.HardwareBuffer_hasShadowBuffer(swigCPtr, this);
  }

  public boolean isLocked() {
    return OgreJNI.HardwareBuffer_isLocked(swigCPtr, this);
  }

  public void suppressHardwareUpdate(boolean suppress) {
    OgreJNI.HardwareBuffer_suppressHardwareUpdate(swigCPtr, this, suppress);
  }

  public final static class Usage {
    public final static HardwareBuffer.Usage HBU_STATIC = new HardwareBuffer.Usage("HBU_STATIC", OgreJNI.HardwareBuffer_HBU_STATIC_get());
    public final static HardwareBuffer.Usage HBU_DYNAMIC = new HardwareBuffer.Usage("HBU_DYNAMIC", OgreJNI.HardwareBuffer_HBU_DYNAMIC_get());
    public final static HardwareBuffer.Usage HBU_WRITE_ONLY = new HardwareBuffer.Usage("HBU_WRITE_ONLY", OgreJNI.HardwareBuffer_HBU_WRITE_ONLY_get());
    public final static HardwareBuffer.Usage HBU_DISCARDABLE = new HardwareBuffer.Usage("HBU_DISCARDABLE", OgreJNI.HardwareBuffer_HBU_DISCARDABLE_get());
    public final static HardwareBuffer.Usage HBU_STATIC_WRITE_ONLY = new HardwareBuffer.Usage("HBU_STATIC_WRITE_ONLY", OgreJNI.HardwareBuffer_HBU_STATIC_WRITE_ONLY_get());
    public final static HardwareBuffer.Usage HBU_DYNAMIC_WRITE_ONLY = new HardwareBuffer.Usage("HBU_DYNAMIC_WRITE_ONLY", OgreJNI.HardwareBuffer_HBU_DYNAMIC_WRITE_ONLY_get());
    public final static HardwareBuffer.Usage HBU_DYNAMIC_WRITE_ONLY_DISCARDABLE = new HardwareBuffer.Usage("HBU_DYNAMIC_WRITE_ONLY_DISCARDABLE", OgreJNI.HardwareBuffer_HBU_DYNAMIC_WRITE_ONLY_DISCARDABLE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static Usage swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + Usage.class + " with value " + swigValue);
    }

    private Usage(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private Usage(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private Usage(String swigName, Usage swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static Usage[] swigValues = { HBU_STATIC, HBU_DYNAMIC, HBU_WRITE_ONLY, HBU_DISCARDABLE, HBU_STATIC_WRITE_ONLY, HBU_DYNAMIC_WRITE_ONLY, HBU_DYNAMIC_WRITE_ONLY_DISCARDABLE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class LockOptions {
    public final static HardwareBuffer.LockOptions HBL_NORMAL = new HardwareBuffer.LockOptions("HBL_NORMAL");
    public final static HardwareBuffer.LockOptions HBL_DISCARD = new HardwareBuffer.LockOptions("HBL_DISCARD");
    public final static HardwareBuffer.LockOptions HBL_READ_ONLY = new HardwareBuffer.LockOptions("HBL_READ_ONLY");
    public final static HardwareBuffer.LockOptions HBL_NO_OVERWRITE = new HardwareBuffer.LockOptions("HBL_NO_OVERWRITE");
    public final static HardwareBuffer.LockOptions HBL_WRITE_ONLY = new HardwareBuffer.LockOptions("HBL_WRITE_ONLY");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static LockOptions swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + LockOptions.class + " with value " + swigValue);
    }

    private LockOptions(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private LockOptions(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private LockOptions(String swigName, LockOptions swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static LockOptions[] swigValues = { HBL_NORMAL, HBL_DISCARD, HBL_READ_ONLY, HBL_NO_OVERWRITE, HBL_WRITE_ONLY };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class UploadOptions {
    public final static HardwareBuffer.UploadOptions HBU_DEFAULT = new HardwareBuffer.UploadOptions("HBU_DEFAULT", OgreJNI.HardwareBuffer_HBU_DEFAULT_get());
    public final static HardwareBuffer.UploadOptions HBU_ON_DEMAND = new HardwareBuffer.UploadOptions("HBU_ON_DEMAND", OgreJNI.HardwareBuffer_HBU_ON_DEMAND_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static UploadOptions swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + UploadOptions.class + " with value " + swigValue);
    }

    private UploadOptions(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private UploadOptions(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private UploadOptions(String swigName, UploadOptions swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static UploadOptions[] swigValues = { HBU_DEFAULT, HBU_ON_DEMAND };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
