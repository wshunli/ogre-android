/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class CompositorChain extends RenderTargetListener {
  private transient long swigCPtr;

  protected CompositorChain(long cPtr, boolean cMemoryOwn) {
    super(OgreJNI.CompositorChain_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(CompositorChain obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_CompositorChain(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public CompositorChain(Viewport vp) {
    this(OgreJNI.new_CompositorChain(Viewport.getCPtr(vp), vp), true);
  }

  public CompositorInstance addCompositor(CompositorPtr filter, long addPosition, String scheme) {
    long cPtr = OgreJNI.CompositorChain_addCompositor__SWIG_0(swigCPtr, this, CompositorPtr.getCPtr(filter), filter, addPosition, scheme);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public CompositorInstance addCompositor(CompositorPtr filter, long addPosition) {
    long cPtr = OgreJNI.CompositorChain_addCompositor__SWIG_1(swigCPtr, this, CompositorPtr.getCPtr(filter), filter, addPosition);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public CompositorInstance addCompositor(CompositorPtr filter) {
    long cPtr = OgreJNI.CompositorChain_addCompositor__SWIG_2(swigCPtr, this, CompositorPtr.getCPtr(filter), filter);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public void removeCompositor(long position) {
    OgreJNI.CompositorChain_removeCompositor__SWIG_0(swigCPtr, this, position);
  }

  public void removeCompositor() {
    OgreJNI.CompositorChain_removeCompositor__SWIG_1(swigCPtr, this);
  }

  public long getNumCompositors() {
    return OgreJNI.CompositorChain_getNumCompositors(swigCPtr, this);
  }

  public void removeAllCompositors() {
    OgreJNI.CompositorChain_removeAllCompositors(swigCPtr, this);
  }

  public CompositorInstance getCompositor(long index) {
    long cPtr = OgreJNI.CompositorChain_getCompositor__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public CompositorInstance getCompositor(String name) {
    long cPtr = OgreJNI.CompositorChain_getCompositor__SWIG_1(swigCPtr, this, name);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public CompositorInstance _getOriginalSceneCompositor() {
    long cPtr = OgreJNI.CompositorChain__getOriginalSceneCompositor(swigCPtr, this);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__CompositorInstance_p_t__type_t getCompositors() {
    return new SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__CompositorInstance_p_t__type_t(OgreJNI.CompositorChain_getCompositors(swigCPtr, this), true);
  }

  public void setCompositorEnabled(long position, boolean state) {
    OgreJNI.CompositorChain_setCompositorEnabled(swigCPtr, this, position, state);
  }

  public void preRenderTargetUpdate(RenderTargetEvent evt) {
    OgreJNI.CompositorChain_preRenderTargetUpdate(swigCPtr, this, RenderTargetEvent.getCPtr(evt), evt);
  }

  public void postRenderTargetUpdate(RenderTargetEvent evt) {
    OgreJNI.CompositorChain_postRenderTargetUpdate(swigCPtr, this, RenderTargetEvent.getCPtr(evt), evt);
  }

  public void preViewportUpdate(RenderTargetViewportEvent evt) {
    OgreJNI.CompositorChain_preViewportUpdate(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt);
  }

  public void postViewportUpdate(RenderTargetViewportEvent evt) {
    OgreJNI.CompositorChain_postViewportUpdate(swigCPtr, this, RenderTargetViewportEvent.getCPtr(evt), evt);
  }

  public void viewportCameraChanged(Viewport viewport) {
    OgreJNI.CompositorChain_viewportCameraChanged(swigCPtr, this, Viewport.getCPtr(viewport), viewport);
  }

  public void viewportDimensionsChanged(Viewport viewport) {
    OgreJNI.CompositorChain_viewportDimensionsChanged(swigCPtr, this, Viewport.getCPtr(viewport), viewport);
  }

  public void viewportDestroyed(Viewport viewport) {
    OgreJNI.CompositorChain_viewportDestroyed(swigCPtr, this, Viewport.getCPtr(viewport), viewport);
  }

  public void _markDirty() {
    OgreJNI.CompositorChain__markDirty(swigCPtr, this);
  }

  public Viewport getViewport() {
    long cPtr = OgreJNI.CompositorChain_getViewport(swigCPtr, this);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public void _notifyViewport(Viewport vp) {
    OgreJNI.CompositorChain__notifyViewport(swigCPtr, this, Viewport.getCPtr(vp), vp);
  }

  public void _removeInstance(CompositorInstance i) {
    OgreJNI.CompositorChain__removeInstance(swigCPtr, this, CompositorInstance.getCPtr(i), i);
  }

  public void _queuedOperation(CompositorInstance.RenderSystemOperation op) {
    OgreJNI.CompositorChain__queuedOperation(swigCPtr, this, CompositorInstance.RenderSystemOperation.getCPtr(op), op);
  }

  public void _compile() {
    OgreJNI.CompositorChain__compile(swigCPtr, this);
  }

  public CompositorInstance getPreviousInstance(CompositorInstance curr, boolean activeOnly) {
    long cPtr = OgreJNI.CompositorChain_getPreviousInstance__SWIG_0(swigCPtr, this, CompositorInstance.getCPtr(curr), curr, activeOnly);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public CompositorInstance getPreviousInstance(CompositorInstance curr) {
    long cPtr = OgreJNI.CompositorChain_getPreviousInstance__SWIG_1(swigCPtr, this, CompositorInstance.getCPtr(curr), curr);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public CompositorInstance getNextInstance(CompositorInstance curr, boolean activeOnly) {
    long cPtr = OgreJNI.CompositorChain_getNextInstance__SWIG_0(swigCPtr, this, CompositorInstance.getCPtr(curr), curr, activeOnly);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public CompositorInstance getNextInstance(CompositorInstance curr) {
    long cPtr = OgreJNI.CompositorChain_getNextInstance__SWIG_1(swigCPtr, this, CompositorInstance.getCPtr(curr), curr);
    return (cPtr == 0) ? null : new CompositorInstance(cPtr, false);
  }

  public final static long LAST = OgreJNI.CompositorChain_LAST_get();
  public final static long BEST = OgreJNI.CompositorChain_BEST_get();
}
