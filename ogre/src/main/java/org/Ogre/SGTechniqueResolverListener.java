/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class SGTechniqueResolverListener extends MaterialManager_Listener {
  private transient long swigCPtr;

  protected SGTechniqueResolverListener(long cPtr, boolean cMemoryOwn) {
    super(OgreBitesJNI.SGTechniqueResolverListener_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SGTechniqueResolverListener obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreBitesJNI.delete_SGTechniqueResolverListener(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public SGTechniqueResolverListener(SWIGTYPE_p_Ogre__RTShader__ShaderGenerator pShaderGenerator) {
    this(OgreBitesJNI.new_SGTechniqueResolverListener(SWIGTYPE_p_Ogre__RTShader__ShaderGenerator.getCPtr(pShaderGenerator)), true);
  }

  public Technique handleSchemeNotFound(int schemeIndex, String schemeName, Material originalMaterial, int lodIndex, Renderable rend) {
    long cPtr = OgreBitesJNI.SGTechniqueResolverListener_handleSchemeNotFound(swigCPtr, this, schemeIndex, schemeName, Material.getCPtr(originalMaterial), originalMaterial, lodIndex, Renderable.getCPtr(rend), rend);
    return (cPtr == 0) ? null : new Technique(cPtr, false);
  }

  public boolean afterIlluminationPassesCreated(Technique tech) {
    return OgreBitesJNI.SGTechniqueResolverListener_afterIlluminationPassesCreated(swigCPtr, this, Technique.getCPtr(tech), tech);
  }

  public boolean beforeIlluminationPassesCleared(Technique tech) {
    return OgreBitesJNI.SGTechniqueResolverListener_beforeIlluminationPassesCleared(swigCPtr, this, Technique.getCPtr(tech), tech);
  }

}
