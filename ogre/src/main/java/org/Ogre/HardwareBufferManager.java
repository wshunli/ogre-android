/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class HardwareBufferManager extends HardwareBufferManagerBase {
  private transient long swigCPtr;

  protected HardwareBufferManager(long cPtr, boolean cMemoryOwn) {
    super(OgreJNI.HardwareBufferManager_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(HardwareBufferManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_HardwareBufferManager(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public HardwareVertexBufferPtr createVertexBuffer(long vertexSize, long numVerts, HardwareBuffer.Usage usage, boolean useShadowBuffer) {
    return new HardwareVertexBufferPtr(OgreJNI.HardwareBufferManager_createVertexBuffer__SWIG_0(swigCPtr, this, vertexSize, numVerts, usage.swigValue(), useShadowBuffer), true);
  }

  public HardwareVertexBufferPtr createVertexBuffer(long vertexSize, long numVerts, HardwareBuffer.Usage usage) {
    return new HardwareVertexBufferPtr(OgreJNI.HardwareBufferManager_createVertexBuffer__SWIG_1(swigCPtr, this, vertexSize, numVerts, usage.swigValue()), true);
  }

  public HardwareIndexBufferPtr createIndexBuffer(HardwareIndexBuffer.IndexType itype, long numIndexes, HardwareBuffer.Usage usage, boolean useShadowBuffer) {
    return new HardwareIndexBufferPtr(OgreJNI.HardwareBufferManager_createIndexBuffer__SWIG_0(swigCPtr, this, itype.swigValue(), numIndexes, usage.swigValue(), useShadowBuffer), true);
  }

  public HardwareIndexBufferPtr createIndexBuffer(HardwareIndexBuffer.IndexType itype, long numIndexes, HardwareBuffer.Usage usage) {
    return new HardwareIndexBufferPtr(OgreJNI.HardwareBufferManager_createIndexBuffer__SWIG_1(swigCPtr, this, itype.swigValue(), numIndexes, usage.swigValue()), true);
  }

  public SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RenderToVertexBuffer_t createRenderToVertexBuffer() {
    return new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RenderToVertexBuffer_t(OgreJNI.HardwareBufferManager_createRenderToVertexBuffer(swigCPtr, this), true);
  }

  public HardwareUniformBufferPtr createUniformBuffer(long sizeBytes, HardwareBuffer.Usage usage, boolean useShadowBuffer, String name) {
    return new HardwareUniformBufferPtr(OgreJNI.HardwareBufferManager_createUniformBuffer__SWIG_0(swigCPtr, this, sizeBytes, usage.swigValue(), useShadowBuffer, name), true);
  }

  public HardwareUniformBufferPtr createUniformBuffer(long sizeBytes, HardwareBuffer.Usage usage, boolean useShadowBuffer) {
    return new HardwareUniformBufferPtr(OgreJNI.HardwareBufferManager_createUniformBuffer__SWIG_1(swigCPtr, this, sizeBytes, usage.swigValue(), useShadowBuffer), true);
  }

  public HardwareCounterBufferPtr createCounterBuffer(long sizeBytes, HardwareBuffer.Usage usage, boolean useShadowBuffer, String name) {
    return new HardwareCounterBufferPtr(OgreJNI.HardwareBufferManager_createCounterBuffer__SWIG_0(swigCPtr, this, sizeBytes, usage.swigValue(), useShadowBuffer, name), true);
  }

  public HardwareCounterBufferPtr createCounterBuffer(long sizeBytes, HardwareBuffer.Usage usage, boolean useShadowBuffer) {
    return new HardwareCounterBufferPtr(OgreJNI.HardwareBufferManager_createCounterBuffer__SWIG_1(swigCPtr, this, sizeBytes, usage.swigValue(), useShadowBuffer), true);
  }

  public VertexDeclaration createVertexDeclaration() {
    long cPtr = OgreJNI.HardwareBufferManager_createVertexDeclaration(swigCPtr, this);
    return (cPtr == 0) ? null : new VertexDeclaration(cPtr, false);
  }

  public void destroyVertexDeclaration(VertexDeclaration decl) {
    OgreJNI.HardwareBufferManager_destroyVertexDeclaration(swigCPtr, this, VertexDeclaration.getCPtr(decl), decl);
  }

  public VertexBufferBinding createVertexBufferBinding() {
    long cPtr = OgreJNI.HardwareBufferManager_createVertexBufferBinding(swigCPtr, this);
    return (cPtr == 0) ? null : new VertexBufferBinding(cPtr, false);
  }

  public void destroyVertexBufferBinding(VertexBufferBinding binding) {
    OgreJNI.HardwareBufferManager_destroyVertexBufferBinding(swigCPtr, this, VertexBufferBinding.getCPtr(binding), binding);
  }

  public void registerVertexBufferSourceAndCopy(HardwareVertexBufferPtr sourceBuffer, HardwareVertexBufferPtr copy) {
    OgreJNI.HardwareBufferManager_registerVertexBufferSourceAndCopy(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(sourceBuffer), sourceBuffer, HardwareVertexBufferPtr.getCPtr(copy), copy);
  }

  public HardwareVertexBufferPtr allocateVertexBufferCopy(HardwareVertexBufferPtr sourceBuffer, HardwareBufferManagerBase.BufferLicenseType licenseType, HardwareBufferLicensee licensee, boolean copyData) {
    return new HardwareVertexBufferPtr(OgreJNI.HardwareBufferManager_allocateVertexBufferCopy__SWIG_0(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(sourceBuffer), sourceBuffer, licenseType.swigValue(), HardwareBufferLicensee.getCPtr(licensee), licensee, copyData), true);
  }

  public HardwareVertexBufferPtr allocateVertexBufferCopy(HardwareVertexBufferPtr sourceBuffer, HardwareBufferManagerBase.BufferLicenseType licenseType, HardwareBufferLicensee licensee) {
    return new HardwareVertexBufferPtr(OgreJNI.HardwareBufferManager_allocateVertexBufferCopy__SWIG_1(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(sourceBuffer), sourceBuffer, licenseType.swigValue(), HardwareBufferLicensee.getCPtr(licensee), licensee), true);
  }

  public void releaseVertexBufferCopy(HardwareVertexBufferPtr bufferCopy) {
    OgreJNI.HardwareBufferManager_releaseVertexBufferCopy(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(bufferCopy), bufferCopy);
  }

  public void touchVertexBufferCopy(HardwareVertexBufferPtr bufferCopy) {
    OgreJNI.HardwareBufferManager_touchVertexBufferCopy(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(bufferCopy), bufferCopy);
  }

  public void _freeUnusedBufferCopies() {
    OgreJNI.HardwareBufferManager__freeUnusedBufferCopies(swigCPtr, this);
  }

  public void _releaseBufferCopies(boolean forceFreeUnused) {
    OgreJNI.HardwareBufferManager__releaseBufferCopies__SWIG_0(swigCPtr, this, forceFreeUnused);
  }

  public void _releaseBufferCopies() {
    OgreJNI.HardwareBufferManager__releaseBufferCopies__SWIG_1(swigCPtr, this);
  }

  public void _forceReleaseBufferCopies(HardwareVertexBufferPtr sourceBuffer) {
    OgreJNI.HardwareBufferManager__forceReleaseBufferCopies__SWIG_0(swigCPtr, this, HardwareVertexBufferPtr.getCPtr(sourceBuffer), sourceBuffer);
  }

  public void _forceReleaseBufferCopies(HardwareVertexBuffer sourceBuffer) {
    OgreJNI.HardwareBufferManager__forceReleaseBufferCopies__SWIG_1(swigCPtr, this, HardwareVertexBuffer.getCPtr(sourceBuffer), sourceBuffer);
  }

  public void _notifyVertexBufferDestroyed(HardwareVertexBuffer buf) {
    OgreJNI.HardwareBufferManager__notifyVertexBufferDestroyed(swigCPtr, this, HardwareVertexBuffer.getCPtr(buf), buf);
  }

  public void _notifyIndexBufferDestroyed(HardwareIndexBuffer buf) {
    OgreJNI.HardwareBufferManager__notifyIndexBufferDestroyed(swigCPtr, this, HardwareIndexBuffer.getCPtr(buf), buf);
  }

  public void _notifyUniformBufferDestroyed(HardwareUniformBuffer buf) {
    OgreJNI.HardwareBufferManager__notifyUniformBufferDestroyed(swigCPtr, this, HardwareUniformBuffer.getCPtr(buf), buf);
  }

  public void _notifyConterBufferDestroyed(HardwareCounterBuffer buf) {
    OgreJNI.HardwareBufferManager__notifyConterBufferDestroyed(swigCPtr, this, HardwareCounterBuffer.getCPtr(buf), buf);
  }

  public static HardwareBufferManager getSingleton() {
    return new HardwareBufferManager(OgreJNI.HardwareBufferManager_getSingleton(), false);
  }

}
