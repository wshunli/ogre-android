/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class HardwareIndexBuffer extends HardwareBuffer {
  private transient long swigCPtr;

  protected HardwareIndexBuffer(long cPtr, boolean cMemoryOwn) {
    super(OgreJNI.HardwareIndexBuffer_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(HardwareIndexBuffer obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_HardwareIndexBuffer(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public HardwareBufferManagerBase getManager() {
    long cPtr = OgreJNI.HardwareIndexBuffer_getManager(swigCPtr, this);
    return (cPtr == 0) ? null : new HardwareBufferManagerBase(cPtr, false);
  }

  public long getNumIndexes() {
    return OgreJNI.HardwareIndexBuffer_getNumIndexes(swigCPtr, this);
  }

  public long getIndexSize() {
    return OgreJNI.HardwareIndexBuffer_getIndexSize(swigCPtr, this);
  }

  public final static class IndexType {
    public final static HardwareIndexBuffer.IndexType IT_16BIT = new HardwareIndexBuffer.IndexType("IT_16BIT");
    public final static HardwareIndexBuffer.IndexType IT_32BIT = new HardwareIndexBuffer.IndexType("IT_32BIT");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IndexType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IndexType.class + " with value " + swigValue);
    }

    private IndexType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IndexType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IndexType(String swigName, IndexType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IndexType[] swigValues = { IT_16BIT, IT_32BIT };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
