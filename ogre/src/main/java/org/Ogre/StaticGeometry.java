/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class StaticGeometry {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected StaticGeometry(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(StaticGeometry obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_StaticGeometry(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  static public class OptimisedSubMeshGeometry {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected OptimisedSubMeshGeometry(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(OptimisedSubMeshGeometry obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_StaticGeometry_OptimisedSubMeshGeometry(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public OptimisedSubMeshGeometry() {
      this(OgreJNI.new_StaticGeometry_OptimisedSubMeshGeometry(), true);
    }
  
    public void setVertexData(VertexData value) {
      OgreJNI.StaticGeometry_OptimisedSubMeshGeometry_vertexData_set(swigCPtr, this, VertexData.getCPtr(value), value);
    }
  
    public VertexData getVertexData() {
      long cPtr = OgreJNI.StaticGeometry_OptimisedSubMeshGeometry_vertexData_get(swigCPtr, this);
      return (cPtr == 0) ? null : new VertexData(cPtr, false);
    }
  
    public void setIndexData(IndexData value) {
      OgreJNI.StaticGeometry_OptimisedSubMeshGeometry_indexData_set(swigCPtr, this, IndexData.getCPtr(value), value);
    }
  
    public IndexData getIndexData() {
      long cPtr = OgreJNI.StaticGeometry_OptimisedSubMeshGeometry_indexData_get(swigCPtr, this);
      return (cPtr == 0) ? null : new IndexData(cPtr, false);
    }
  
  }

  static public class SubMeshLodGeometryLink {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected SubMeshLodGeometryLink(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SubMeshLodGeometryLink obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_StaticGeometry_SubMeshLodGeometryLink(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setVertexData(VertexData value) {
      OgreJNI.StaticGeometry_SubMeshLodGeometryLink_vertexData_set(swigCPtr, this, VertexData.getCPtr(value), value);
    }
  
    public VertexData getVertexData() {
      long cPtr = OgreJNI.StaticGeometry_SubMeshLodGeometryLink_vertexData_get(swigCPtr, this);
      return (cPtr == 0) ? null : new VertexData(cPtr, false);
    }
  
    public void setIndexData(IndexData value) {
      OgreJNI.StaticGeometry_SubMeshLodGeometryLink_indexData_set(swigCPtr, this, IndexData.getCPtr(value), value);
    }
  
    public IndexData getIndexData() {
      long cPtr = OgreJNI.StaticGeometry_SubMeshLodGeometryLink_indexData_get(swigCPtr, this);
      return (cPtr == 0) ? null : new IndexData(cPtr, false);
    }
  
    public SubMeshLodGeometryLink() {
      this(OgreJNI.new_StaticGeometry_SubMeshLodGeometryLink(), true);
    }
  
  }

  static public class QueuedSubMesh {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected QueuedSubMesh(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(QueuedSubMesh obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_StaticGeometry_QueuedSubMesh(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setSubmesh(SubMesh value) {
      OgreJNI.StaticGeometry_QueuedSubMesh_submesh_set(swigCPtr, this, SubMesh.getCPtr(value), value);
    }
  
    public SubMesh getSubmesh() {
      long cPtr = OgreJNI.StaticGeometry_QueuedSubMesh_submesh_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SubMesh(cPtr, false);
    }
  
    public void setGeometryLodList(SWIGTYPE_p_Ogre__vectorT_Ogre__StaticGeometry__SubMeshLodGeometryLink_t__type value) {
      OgreJNI.StaticGeometry_QueuedSubMesh_geometryLodList_set(swigCPtr, this, SWIGTYPE_p_Ogre__vectorT_Ogre__StaticGeometry__SubMeshLodGeometryLink_t__type.getCPtr(value));
    }
  
    public SWIGTYPE_p_Ogre__vectorT_Ogre__StaticGeometry__SubMeshLodGeometryLink_t__type getGeometryLodList() {
      long cPtr = OgreJNI.StaticGeometry_QueuedSubMesh_geometryLodList_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__vectorT_Ogre__StaticGeometry__SubMeshLodGeometryLink_t__type(cPtr, false);
    }
  
    public void setMaterialName(String value) {
      OgreJNI.StaticGeometry_QueuedSubMesh_materialName_set(swigCPtr, this, value);
    }
  
    public String getMaterialName() {
      return OgreJNI.StaticGeometry_QueuedSubMesh_materialName_get(swigCPtr, this);
    }
  
    public void setPosition(Vector3 value) {
      OgreJNI.StaticGeometry_QueuedSubMesh_position_set(swigCPtr, this, Vector3.getCPtr(value), value);
    }
  
    public Vector3 getPosition() {
      long cPtr = OgreJNI.StaticGeometry_QueuedSubMesh_position_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Vector3(cPtr, false);
    }
  
    public void setOrientation(Quaternion value) {
      OgreJNI.StaticGeometry_QueuedSubMesh_orientation_set(swigCPtr, this, Quaternion.getCPtr(value), value);
    }
  
    public Quaternion getOrientation() {
      long cPtr = OgreJNI.StaticGeometry_QueuedSubMesh_orientation_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Quaternion(cPtr, false);
    }
  
    public void setScale(Vector3 value) {
      OgreJNI.StaticGeometry_QueuedSubMesh_scale_set(swigCPtr, this, Vector3.getCPtr(value), value);
    }
  
    public Vector3 getScale() {
      long cPtr = OgreJNI.StaticGeometry_QueuedSubMesh_scale_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Vector3(cPtr, false);
    }
  
    public void setWorldBounds(AxisAlignedBox value) {
      OgreJNI.StaticGeometry_QueuedSubMesh_worldBounds_set(swigCPtr, this, AxisAlignedBox.getCPtr(value), value);
    }
  
    public AxisAlignedBox getWorldBounds() {
      long cPtr = OgreJNI.StaticGeometry_QueuedSubMesh_worldBounds_get(swigCPtr, this);
      return (cPtr == 0) ? null : new AxisAlignedBox(cPtr, false);
    }
  
    public QueuedSubMesh() {
      this(OgreJNI.new_StaticGeometry_QueuedSubMesh(), true);
    }
  
  }

  static public class QueuedGeometry {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected QueuedGeometry(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(QueuedGeometry obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_StaticGeometry_QueuedGeometry(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setGeometry(StaticGeometry.SubMeshLodGeometryLink value) {
      OgreJNI.StaticGeometry_QueuedGeometry_geometry_set(swigCPtr, this, StaticGeometry.SubMeshLodGeometryLink.getCPtr(value), value);
    }
  
    public StaticGeometry.SubMeshLodGeometryLink getGeometry() {
      long cPtr = OgreJNI.StaticGeometry_QueuedGeometry_geometry_get(swigCPtr, this);
      return (cPtr == 0) ? null : new StaticGeometry.SubMeshLodGeometryLink(cPtr, false);
    }
  
    public void setPosition(Vector3 value) {
      OgreJNI.StaticGeometry_QueuedGeometry_position_set(swigCPtr, this, Vector3.getCPtr(value), value);
    }
  
    public Vector3 getPosition() {
      long cPtr = OgreJNI.StaticGeometry_QueuedGeometry_position_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Vector3(cPtr, false);
    }
  
    public void setOrientation(Quaternion value) {
      OgreJNI.StaticGeometry_QueuedGeometry_orientation_set(swigCPtr, this, Quaternion.getCPtr(value), value);
    }
  
    public Quaternion getOrientation() {
      long cPtr = OgreJNI.StaticGeometry_QueuedGeometry_orientation_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Quaternion(cPtr, false);
    }
  
    public void setScale(Vector3 value) {
      OgreJNI.StaticGeometry_QueuedGeometry_scale_set(swigCPtr, this, Vector3.getCPtr(value), value);
    }
  
    public Vector3 getScale() {
      long cPtr = OgreJNI.StaticGeometry_QueuedGeometry_scale_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Vector3(cPtr, false);
    }
  
    public QueuedGeometry() {
      this(OgreJNI.new_StaticGeometry_QueuedGeometry(), true);
    }
  
  }

  static public class GeometryBucket extends Renderable {
    private transient long swigCPtr;
  
    protected GeometryBucket(long cPtr, boolean cMemoryOwn) {
      super(OgreJNI.StaticGeometry_GeometryBucket_SWIGUpcast(cPtr), cMemoryOwn);
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(GeometryBucket obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_StaticGeometry_GeometryBucket(swigCPtr);
        }
        swigCPtr = 0;
      }
      super.delete();
    }
  
    public GeometryBucket(StaticGeometry.MaterialBucket parent, String formatString, VertexData vData, IndexData iData) {
      this(OgreJNI.new_StaticGeometry_GeometryBucket(StaticGeometry.MaterialBucket.getCPtr(parent), parent, formatString, VertexData.getCPtr(vData), vData, IndexData.getCPtr(iData), iData), true);
    }
  
    public StaticGeometry.MaterialBucket getParent() {
      long cPtr = OgreJNI.StaticGeometry_GeometryBucket_getParent(swigCPtr, this);
      return (cPtr == 0) ? null : new StaticGeometry.MaterialBucket(cPtr, false);
    }
  
    public VertexData getVertexData() {
      long cPtr = OgreJNI.StaticGeometry_GeometryBucket_getVertexData(swigCPtr, this);
      return (cPtr == 0) ? null : new VertexData(cPtr, false);
    }
  
    public IndexData getIndexData() {
      long cPtr = OgreJNI.StaticGeometry_GeometryBucket_getIndexData(swigCPtr, this);
      return (cPtr == 0) ? null : new IndexData(cPtr, false);
    }
  
    public MaterialPtr getMaterial() {
      return new MaterialPtr(OgreJNI.StaticGeometry_GeometryBucket_getMaterial(swigCPtr, this), false);
    }
  
    public Technique getTechnique() {
      long cPtr = OgreJNI.StaticGeometry_GeometryBucket_getTechnique(swigCPtr, this);
      return (cPtr == 0) ? null : new Technique(cPtr, false);
    }
  
    public void getRenderOperation(RenderOperation op) {
      OgreJNI.StaticGeometry_GeometryBucket_getRenderOperation(swigCPtr, this, RenderOperation.getCPtr(op), op);
    }
  
    public void getWorldTransforms(Matrix4 xform) {
      OgreJNI.StaticGeometry_GeometryBucket_getWorldTransforms(swigCPtr, this, Matrix4.getCPtr(xform), xform);
    }
  
    public float getSquaredViewDepth(Camera cam) {
      return OgreJNI.StaticGeometry_GeometryBucket_getSquaredViewDepth(swigCPtr, this, Camera.getCPtr(cam), cam);
    }
  
    public SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t getLights() {
      return new SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t(OgreJNI.StaticGeometry_GeometryBucket_getLights(swigCPtr, this), false);
    }
  
    public boolean getCastsShadows() {
      return OgreJNI.StaticGeometry_GeometryBucket_getCastsShadows(swigCPtr, this);
    }
  
    public boolean assign(StaticGeometry.QueuedGeometry qsm) {
      return OgreJNI.StaticGeometry_GeometryBucket_assign(swigCPtr, this, StaticGeometry.QueuedGeometry.getCPtr(qsm), qsm);
    }
  
    public void build(boolean stencilShadows) {
      OgreJNI.StaticGeometry_GeometryBucket_build(swigCPtr, this, stencilShadows);
    }
  
    public void dump(SWIGTYPE_p_std__ofstream of) {
      OgreJNI.StaticGeometry_GeometryBucket_dump(swigCPtr, this, SWIGTYPE_p_std__ofstream.getCPtr(of));
    }
  
  }

  static public class MaterialBucket {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected MaterialBucket(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(MaterialBucket obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_StaticGeometry_MaterialBucket(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public MaterialBucket(StaticGeometry.LODBucket parent, String materialName) {
      this(OgreJNI.new_StaticGeometry_MaterialBucket(StaticGeometry.LODBucket.getCPtr(parent), parent, materialName), true);
    }
  
    public StaticGeometry.LODBucket getParent() {
      long cPtr = OgreJNI.StaticGeometry_MaterialBucket_getParent(swigCPtr, this);
      return (cPtr == 0) ? null : new StaticGeometry.LODBucket(cPtr, false);
    }
  
    public String getMaterialName() {
      return OgreJNI.StaticGeometry_MaterialBucket_getMaterialName(swigCPtr, this);
    }
  
    public void assign(StaticGeometry.QueuedGeometry qsm) {
      OgreJNI.StaticGeometry_MaterialBucket_assign(swigCPtr, this, StaticGeometry.QueuedGeometry.getCPtr(qsm), qsm);
    }
  
    public void build(boolean stencilShadows) {
      OgreJNI.StaticGeometry_MaterialBucket_build(swigCPtr, this, stencilShadows);
    }
  
    public void addRenderables(RenderQueue queue, short group, float lodValue) {
      OgreJNI.StaticGeometry_MaterialBucket_addRenderables(swigCPtr, this, RenderQueue.getCPtr(queue), queue, group, lodValue);
    }
  
    public MaterialPtr getMaterial() {
      return new MaterialPtr(OgreJNI.StaticGeometry_MaterialBucket_getMaterial(swigCPtr, this), false);
    }
  
    public SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__StaticGeometry__GeometryBucket_p_t__type_t getGeometryIterator() {
      return new SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__StaticGeometry__GeometryBucket_p_t__type_t(OgreJNI.StaticGeometry_MaterialBucket_getGeometryIterator(swigCPtr, this), true);
    }
  
    public Technique getCurrentTechnique() {
      long cPtr = OgreJNI.StaticGeometry_MaterialBucket_getCurrentTechnique(swigCPtr, this);
      return (cPtr == 0) ? null : new Technique(cPtr, false);
    }
  
    public void dump(SWIGTYPE_p_std__ofstream of) {
      OgreJNI.StaticGeometry_MaterialBucket_dump(swigCPtr, this, SWIGTYPE_p_std__ofstream.getCPtr(of));
    }
  
    public void visitRenderables(Renderable.Visitor visitor, boolean debugRenderables) {
      OgreJNI.StaticGeometry_MaterialBucket_visitRenderables(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor, debugRenderables);
    }
  
  }

  static public class LODBucket {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected LODBucket(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(LODBucket obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_StaticGeometry_LODBucket(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public LODBucket(StaticGeometry.Region parent, int lod, float lodValue) {
      this(OgreJNI.new_StaticGeometry_LODBucket(StaticGeometry.Region.getCPtr(parent), parent, lod, lodValue), true);
    }
  
    public StaticGeometry.Region getParent() {
      long cPtr = OgreJNI.StaticGeometry_LODBucket_getParent(swigCPtr, this);
      return (cPtr == 0) ? null : new StaticGeometry.Region(cPtr, false);
    }
  
    public int getLod() {
      return OgreJNI.StaticGeometry_LODBucket_getLod(swigCPtr, this);
    }
  
    public float getLodValue() {
      return OgreJNI.StaticGeometry_LODBucket_getLodValue(swigCPtr, this);
    }
  
    public void assign(StaticGeometry.QueuedSubMesh qsm, int atLod) {
      OgreJNI.StaticGeometry_LODBucket_assign(swigCPtr, this, StaticGeometry.QueuedSubMesh.getCPtr(qsm), qsm, atLod);
    }
  
    public void build(boolean stencilShadows) {
      OgreJNI.StaticGeometry_LODBucket_build(swigCPtr, this, stencilShadows);
    }
  
    public void addRenderables(RenderQueue queue, short group, float lodValue) {
      OgreJNI.StaticGeometry_LODBucket_addRenderables(swigCPtr, this, RenderQueue.getCPtr(queue), queue, group, lodValue);
    }
  
    public SWIGTYPE_p_Ogre__MapIteratorT_Ogre__mapT_std__string_Ogre__StaticGeometry__MaterialBucket_p_std__lessT_std__string_t_t__type_t getMaterialIterator() {
      return new SWIGTYPE_p_Ogre__MapIteratorT_Ogre__mapT_std__string_Ogre__StaticGeometry__MaterialBucket_p_std__lessT_std__string_t_t__type_t(OgreJNI.StaticGeometry_LODBucket_getMaterialIterator(swigCPtr, this), true);
    }
  
    public void dump(SWIGTYPE_p_std__ofstream of) {
      OgreJNI.StaticGeometry_LODBucket_dump(swigCPtr, this, SWIGTYPE_p_std__ofstream.getCPtr(of));
    }
  
    public void visitRenderables(Renderable.Visitor visitor, boolean debugRenderables) {
      OgreJNI.StaticGeometry_LODBucket_visitRenderables(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor, debugRenderables);
    }
  
    public SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
      long cPtr = OgreJNI.StaticGeometry_LODBucket_getEdgeList(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
    }
  
    public SWIGTYPE_p_Ogre__vectorT_Ogre__ShadowRenderable_p_t__type getShadowRenderableList() {
      return new SWIGTYPE_p_Ogre__vectorT_Ogre__ShadowRenderable_p_t__type(OgreJNI.StaticGeometry_LODBucket_getShadowRenderableList(swigCPtr, this), false);
    }
  
    public boolean isVertexProgramInUse() {
      return OgreJNI.StaticGeometry_LODBucket_isVertexProgramInUse(swigCPtr, this);
    }
  
    public void updateShadowRenderables(ShadowTechnique shadowTechnique, Vector4 lightPos, HardwareIndexBufferPtr indexBuffer, boolean extrudeVertices, float extrusionDistance, long flags) {
      OgreJNI.StaticGeometry_LODBucket_updateShadowRenderables__SWIG_0(swigCPtr, this, shadowTechnique.swigValue(), Vector4.getCPtr(lightPos), lightPos, HardwareIndexBufferPtr.getCPtr(indexBuffer), indexBuffer, extrudeVertices, extrusionDistance, flags);
    }
  
    public void updateShadowRenderables(ShadowTechnique shadowTechnique, Vector4 lightPos, HardwareIndexBufferPtr indexBuffer, boolean extrudeVertices, float extrusionDistance) {
      OgreJNI.StaticGeometry_LODBucket_updateShadowRenderables__SWIG_1(swigCPtr, this, shadowTechnique.swigValue(), Vector4.getCPtr(lightPos), lightPos, HardwareIndexBufferPtr.getCPtr(indexBuffer), indexBuffer, extrudeVertices, extrusionDistance);
    }
  
  }

  static public class Region extends MovableObject {
    private transient long swigCPtr;
  
    protected Region(long cPtr, boolean cMemoryOwn) {
      super(OgreJNI.StaticGeometry_Region_SWIGUpcast(cPtr), cMemoryOwn);
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Region obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_StaticGeometry_Region(swigCPtr);
        }
        swigCPtr = 0;
      }
      super.delete();
    }
  
    public Region(StaticGeometry parent, String name, SceneManager mgr, long regionID, Vector3 centre) {
      this(OgreJNI.new_StaticGeometry_Region(StaticGeometry.getCPtr(parent), parent, name, SceneManager.getCPtr(mgr), mgr, regionID, Vector3.getCPtr(centre), centre), true);
    }
  
    public StaticGeometry getParent() {
      long cPtr = OgreJNI.StaticGeometry_Region_getParent(swigCPtr, this);
      return (cPtr == 0) ? null : new StaticGeometry(cPtr, false);
    }
  
    public void assign(StaticGeometry.QueuedSubMesh qmesh) {
      OgreJNI.StaticGeometry_Region_assign(swigCPtr, this, StaticGeometry.QueuedSubMesh.getCPtr(qmesh), qmesh);
    }
  
    public void build(boolean stencilShadows) {
      OgreJNI.StaticGeometry_Region_build(swigCPtr, this, stencilShadows);
    }
  
    public long getID() {
      return OgreJNI.StaticGeometry_Region_getID(swigCPtr, this);
    }
  
    public Vector3 getCentre() {
      return new Vector3(OgreJNI.StaticGeometry_Region_getCentre(swigCPtr, this), false);
    }
  
    public String getMovableType() {
      return OgreJNI.StaticGeometry_Region_getMovableType(swigCPtr, this);
    }
  
    public void _notifyCurrentCamera(Camera cam) {
      OgreJNI.StaticGeometry_Region__notifyCurrentCamera(swigCPtr, this, Camera.getCPtr(cam), cam);
    }
  
    public AxisAlignedBox getBoundingBox() {
      return new AxisAlignedBox(OgreJNI.StaticGeometry_Region_getBoundingBox(swigCPtr, this), false);
    }
  
    public float getBoundingRadius() {
      return OgreJNI.StaticGeometry_Region_getBoundingRadius(swigCPtr, this);
    }
  
    public void _updateRenderQueue(RenderQueue queue) {
      OgreJNI.StaticGeometry_Region__updateRenderQueue(swigCPtr, this, RenderQueue.getCPtr(queue), queue);
    }
  
    public void visitRenderables(Renderable.Visitor visitor, boolean debugRenderables) {
      OgreJNI.StaticGeometry_Region_visitRenderables__SWIG_0(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor, debugRenderables);
    }
  
    public void visitRenderables(Renderable.Visitor visitor) {
      OgreJNI.StaticGeometry_Region_visitRenderables__SWIG_1(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor);
    }
  
    public boolean isVisible() {
      return OgreJNI.StaticGeometry_Region_isVisible(swigCPtr, this);
    }
  
    public long getTypeFlags() {
      return OgreJNI.StaticGeometry_Region_getTypeFlags(swigCPtr, this);
    }
  
    public SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__StaticGeometry__LODBucket_p_t__type_t getLODIterator() {
      return new SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__StaticGeometry__LODBucket_p_t__type_t(OgreJNI.StaticGeometry_Region_getLODIterator(swigCPtr, this), true);
    }
  
    public SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__ShadowRenderable_p_t__type_t getShadowVolumeRenderableIterator(ShadowTechnique shadowTechnique, Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, boolean extrudeVertices, float extrusionDistance, long flags) {
      return new SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__ShadowRenderable_p_t__type_t(OgreJNI.StaticGeometry_Region_getShadowVolumeRenderableIterator__SWIG_0(swigCPtr, this, shadowTechnique.swigValue(), Light.getCPtr(light), light, HardwareIndexBufferPtr.getCPtr(indexBuffer), indexBuffer, SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrudeVertices, extrusionDistance, flags), true);
    }
  
    public SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__ShadowRenderable_p_t__type_t getShadowVolumeRenderableIterator(ShadowTechnique shadowTechnique, Light light, HardwareIndexBufferPtr indexBuffer, SWIGTYPE_p_size_t indexBufferUsedSize, boolean extrudeVertices, float extrusionDistance) {
      return new SWIGTYPE_p_Ogre__VectorIteratorT_Ogre__vectorT_Ogre__ShadowRenderable_p_t__type_t(OgreJNI.StaticGeometry_Region_getShadowVolumeRenderableIterator__SWIG_1(swigCPtr, this, shadowTechnique.swigValue(), Light.getCPtr(light), light, HardwareIndexBufferPtr.getCPtr(indexBuffer), indexBuffer, SWIGTYPE_p_size_t.getCPtr(indexBufferUsedSize), extrudeVertices, extrusionDistance), true);
    }
  
    public SWIGTYPE_p_Ogre__EdgeData getEdgeList() {
      long cPtr = OgreJNI.StaticGeometry_Region_getEdgeList(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__EdgeData(cPtr, false);
    }
  
    public boolean hasEdgeList() {
      return OgreJNI.StaticGeometry_Region_hasEdgeList(swigCPtr, this);
    }
  
    public void _releaseManualHardwareResources() {
      OgreJNI.StaticGeometry_Region__releaseManualHardwareResources(swigCPtr, this);
    }
  
    public void _restoreManualHardwareResources() {
      OgreJNI.StaticGeometry_Region__restoreManualHardwareResources(swigCPtr, this);
    }
  
    public void dump(SWIGTYPE_p_std__ofstream of) {
      OgreJNI.StaticGeometry_Region_dump(swigCPtr, this, SWIGTYPE_p_std__ofstream.getCPtr(of));
    }
  
  }

  public StaticGeometry(SceneManager owner, String name) {
    this(OgreJNI.new_StaticGeometry(SceneManager.getCPtr(owner), owner, name), true);
  }

  public String getName() {
    return OgreJNI.StaticGeometry_getName(swigCPtr, this);
  }

  public void addEntity(Entity ent, Vector3 position, Quaternion orientation, Vector3 scale) {
    OgreJNI.StaticGeometry_addEntity__SWIG_0(swigCPtr, this, Entity.getCPtr(ent), ent, Vector3.getCPtr(position), position, Quaternion.getCPtr(orientation), orientation, Vector3.getCPtr(scale), scale);
  }

  public void addEntity(Entity ent, Vector3 position, Quaternion orientation) {
    OgreJNI.StaticGeometry_addEntity__SWIG_1(swigCPtr, this, Entity.getCPtr(ent), ent, Vector3.getCPtr(position), position, Quaternion.getCPtr(orientation), orientation);
  }

  public void addEntity(Entity ent, Vector3 position) {
    OgreJNI.StaticGeometry_addEntity__SWIG_2(swigCPtr, this, Entity.getCPtr(ent), ent, Vector3.getCPtr(position), position);
  }

  public void addSceneNode(SceneNode node) {
    OgreJNI.StaticGeometry_addSceneNode(swigCPtr, this, SceneNode.getCPtr(node), node);
  }

  public void build() {
    OgreJNI.StaticGeometry_build(swigCPtr, this);
  }

  public void destroy() {
    OgreJNI.StaticGeometry_destroy(swigCPtr, this);
  }

  public void reset() {
    OgreJNI.StaticGeometry_reset(swigCPtr, this);
  }

  public void setRenderingDistance(float dist) {
    OgreJNI.StaticGeometry_setRenderingDistance(swigCPtr, this, dist);
  }

  public float getRenderingDistance() {
    return OgreJNI.StaticGeometry_getRenderingDistance(swigCPtr, this);
  }

  public float getSquaredRenderingDistance() {
    return OgreJNI.StaticGeometry_getSquaredRenderingDistance(swigCPtr, this);
  }

  public void setVisible(boolean visible) {
    OgreJNI.StaticGeometry_setVisible(swigCPtr, this, visible);
  }

  public boolean isVisible() {
    return OgreJNI.StaticGeometry_isVisible(swigCPtr, this);
  }

  public void setCastShadows(boolean castShadows) {
    OgreJNI.StaticGeometry_setCastShadows(swigCPtr, this, castShadows);
  }

  public boolean getCastShadows() {
    return OgreJNI.StaticGeometry_getCastShadows(swigCPtr, this);
  }

  public void setRegionDimensions(Vector3 size) {
    OgreJNI.StaticGeometry_setRegionDimensions(swigCPtr, this, Vector3.getCPtr(size), size);
  }

  public Vector3 getRegionDimensions() {
    return new Vector3(OgreJNI.StaticGeometry_getRegionDimensions(swigCPtr, this), false);
  }

  public void setOrigin(Vector3 origin) {
    OgreJNI.StaticGeometry_setOrigin(swigCPtr, this, Vector3.getCPtr(origin), origin);
  }

  public Vector3 getOrigin() {
    return new Vector3(OgreJNI.StaticGeometry_getOrigin(swigCPtr, this), false);
  }

  public void setVisibilityFlags(long flags) {
    OgreJNI.StaticGeometry_setVisibilityFlags(swigCPtr, this, flags);
  }

  public long getVisibilityFlags() {
    return OgreJNI.StaticGeometry_getVisibilityFlags(swigCPtr, this);
  }

  public void setRenderQueueGroup(short queueID) {
    OgreJNI.StaticGeometry_setRenderQueueGroup(swigCPtr, this, queueID);
  }

  public short getRenderQueueGroup() {
    return OgreJNI.StaticGeometry_getRenderQueueGroup(swigCPtr, this);
  }

  public void visitRenderables(Renderable.Visitor visitor, boolean debugRenderables) {
    OgreJNI.StaticGeometry_visitRenderables__SWIG_0(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor, debugRenderables);
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgreJNI.StaticGeometry_visitRenderables__SWIG_1(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor);
  }

  public SWIGTYPE_p_Ogre__MapIteratorT_Ogre__mapT_unsigned_int_Ogre__StaticGeometry__Region_p_std__lessT_unsigned_int_t_t__type_t getRegionIterator() {
    return new SWIGTYPE_p_Ogre__MapIteratorT_Ogre__mapT_unsigned_int_Ogre__StaticGeometry__Region_p_std__lessT_unsigned_int_t_t__type_t(OgreJNI.StaticGeometry_getRegionIterator(swigCPtr, this), true);
  }

  public void dump(String filename) {
    OgreJNI.StaticGeometry_dump(swigCPtr, this, filename);
  }

}
