/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class VertexAnimationTrack extends AnimationTrack {
  private transient long swigCPtr;

  protected VertexAnimationTrack(long cPtr, boolean cMemoryOwn) {
    super(OgreJNI.VertexAnimationTrack_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VertexAnimationTrack obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_VertexAnimationTrack(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public VertexAnimationTrack(Animation parent, int handle, VertexAnimationType animType) {
    this(OgreJNI.new_VertexAnimationTrack__SWIG_0(Animation.getCPtr(parent), parent, handle, animType.swigValue()), true);
  }

  public VertexAnimationTrack(Animation parent, int handle, VertexAnimationType animType, VertexData targetData, VertexAnimationTrack.TargetMode target) {
    this(OgreJNI.new_VertexAnimationTrack__SWIG_1(Animation.getCPtr(parent), parent, handle, animType.swigValue(), VertexData.getCPtr(targetData), targetData, target.swigValue()), true);
  }

  public VertexAnimationTrack(Animation parent, int handle, VertexAnimationType animType, VertexData targetData) {
    this(OgreJNI.new_VertexAnimationTrack__SWIG_2(Animation.getCPtr(parent), parent, handle, animType.swigValue(), VertexData.getCPtr(targetData), targetData), true);
  }

  public VertexAnimationType getAnimationType() {
    return VertexAnimationType.swigToEnum(OgreJNI.VertexAnimationTrack_getAnimationType(swigCPtr, this));
  }

  public boolean getVertexAnimationIncludesNormals() {
    return OgreJNI.VertexAnimationTrack_getVertexAnimationIncludesNormals(swigCPtr, this);
  }

  public VertexMorphKeyFrame createVertexMorphKeyFrame(float timePos) {
    long cPtr = OgreJNI.VertexAnimationTrack_createVertexMorphKeyFrame(swigCPtr, this, timePos);
    return (cPtr == 0) ? null : new VertexMorphKeyFrame(cPtr, false);
  }

  public VertexPoseKeyFrame createVertexPoseKeyFrame(float timePos) {
    long cPtr = OgreJNI.VertexAnimationTrack_createVertexPoseKeyFrame(swigCPtr, this, timePos);
    return (cPtr == 0) ? null : new VertexPoseKeyFrame(cPtr, false);
  }

  public void getInterpolatedKeyFrame(TimeIndex timeIndex, KeyFrame kf) {
    OgreJNI.VertexAnimationTrack_getInterpolatedKeyFrame(swigCPtr, this, TimeIndex.getCPtr(timeIndex), timeIndex, KeyFrame.getCPtr(kf), kf);
  }

  public void apply(TimeIndex timeIndex, float weight, float scale) {
    OgreJNI.VertexAnimationTrack_apply__SWIG_0(swigCPtr, this, TimeIndex.getCPtr(timeIndex), timeIndex, weight, scale);
  }

  public void apply(TimeIndex timeIndex, float weight) {
    OgreJNI.VertexAnimationTrack_apply__SWIG_1(swigCPtr, this, TimeIndex.getCPtr(timeIndex), timeIndex, weight);
  }

  public void apply(TimeIndex timeIndex) {
    OgreJNI.VertexAnimationTrack_apply__SWIG_2(swigCPtr, this, TimeIndex.getCPtr(timeIndex), timeIndex);
  }

  public void applyToVertexData(VertexData data, TimeIndex timeIndex, float weight, PoseList poseList) {
    OgreJNI.VertexAnimationTrack_applyToVertexData__SWIG_0(swigCPtr, this, VertexData.getCPtr(data), data, TimeIndex.getCPtr(timeIndex), timeIndex, weight, PoseList.getCPtr(poseList), poseList);
  }

  public void applyToVertexData(VertexData data, TimeIndex timeIndex, float weight) {
    OgreJNI.VertexAnimationTrack_applyToVertexData__SWIG_1(swigCPtr, this, VertexData.getCPtr(data), data, TimeIndex.getCPtr(timeIndex), timeIndex, weight);
  }

  public void applyToVertexData(VertexData data, TimeIndex timeIndex) {
    OgreJNI.VertexAnimationTrack_applyToVertexData__SWIG_2(swigCPtr, this, VertexData.getCPtr(data), data, TimeIndex.getCPtr(timeIndex), timeIndex);
  }

  public VertexMorphKeyFrame getVertexMorphKeyFrame(int index) {
    long cPtr = OgreJNI.VertexAnimationTrack_getVertexMorphKeyFrame(swigCPtr, this, index);
    return (cPtr == 0) ? null : new VertexMorphKeyFrame(cPtr, false);
  }

  public VertexPoseKeyFrame getVertexPoseKeyFrame(int index) {
    long cPtr = OgreJNI.VertexAnimationTrack_getVertexPoseKeyFrame(swigCPtr, this, index);
    return (cPtr == 0) ? null : new VertexPoseKeyFrame(cPtr, false);
  }

  public void setAssociatedVertexData(VertexData data) {
    OgreJNI.VertexAnimationTrack_setAssociatedVertexData(swigCPtr, this, VertexData.getCPtr(data), data);
  }

  public VertexData getAssociatedVertexData() {
    long cPtr = OgreJNI.VertexAnimationTrack_getAssociatedVertexData(swigCPtr, this);
    return (cPtr == 0) ? null : new VertexData(cPtr, false);
  }

  public void setTargetMode(VertexAnimationTrack.TargetMode m) {
    OgreJNI.VertexAnimationTrack_setTargetMode(swigCPtr, this, m.swigValue());
  }

  public VertexAnimationTrack.TargetMode getTargetMode() {
    return VertexAnimationTrack.TargetMode.swigToEnum(OgreJNI.VertexAnimationTrack_getTargetMode(swigCPtr, this));
  }

  public boolean hasNonZeroKeyFrames() {
    return OgreJNI.VertexAnimationTrack_hasNonZeroKeyFrames(swigCPtr, this);
  }

  public void optimise() {
    OgreJNI.VertexAnimationTrack_optimise(swigCPtr, this);
  }

  public VertexAnimationTrack _clone(Animation newParent) {
    long cPtr = OgreJNI.VertexAnimationTrack__clone(swigCPtr, this, Animation.getCPtr(newParent), newParent);
    return (cPtr == 0) ? null : new VertexAnimationTrack(cPtr, false);
  }

  public void _applyBaseKeyFrame(KeyFrame base) {
    OgreJNI.VertexAnimationTrack__applyBaseKeyFrame(swigCPtr, this, KeyFrame.getCPtr(base), base);
  }

  public final static class TargetMode {
    public final static VertexAnimationTrack.TargetMode TM_SOFTWARE = new VertexAnimationTrack.TargetMode("TM_SOFTWARE");
    public final static VertexAnimationTrack.TargetMode TM_HARDWARE = new VertexAnimationTrack.TargetMode("TM_HARDWARE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static TargetMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + TargetMode.class + " with value " + swigValue);
    }

    private TargetMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private TargetMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private TargetMode(String swigName, TargetMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static TargetMode[] swigValues = { TM_SOFTWARE, TM_HARDWARE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
