/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}


/* Includes the header in the wrapper code */
#include "Ogre.h"
#include "OgreRTShaderSystem.h"


#include <string>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OgreRTShaderJAVA_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_VSOCP_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::VSOutputCompactPolicy result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::VSOutputCompactPolicy)Ogre::RTShader::VSOCP_LOW;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_VSOCP_1MEDIUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::VSOutputCompactPolicy result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::VSOutputCompactPolicy)Ogre::RTShader::VSOCP_MEDIUM;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_VSOCP_1HIGH_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::VSOutputCompactPolicy result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::VSOutputCompactPolicy)Ogre::RTShader::VSOCP_HIGH;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1SGScriptTranslator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::SGScriptTranslator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::SGScriptTranslator *)new Ogre::RTShader::SGScriptTranslator();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SGScriptTranslator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SGScriptTranslator_1translate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  Ogre::RTShader::SGScriptTranslator *arg1 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::AbstractNodePtr *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::SGScriptTranslator **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::AbstractNodePtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::AbstractNodePtr const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->translate(arg2,(Ogre::AbstractNodePtr const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_SGScriptTranslator_1getGeneratedSubRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::RTShader::SGScriptTranslator *arg1 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::SGScriptTranslator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->getGeneratedSubRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1SGScriptTranslator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::SGScriptTranslator *arg1 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::SGScriptTranslator **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1SubRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::SubRenderState **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderState_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::SubRenderState **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::SubRenderState const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderState_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::SubRenderState **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderState_1createCpuSubPrograms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::RTShader::ProgramSet *arg2 = (Ogre::RTShader::ProgramSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::SubRenderState **)&jarg1; 
  arg2 = *(Ogre::RTShader::ProgramSet **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->createCpuSubPrograms(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderState_1updateGpuProgramsParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::SubRenderState **)&jarg1; 
  arg2 = *(Ogre::Renderable **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::AutoParamDataSource **)&jarg4; 
  arg5 = *(Ogre::LightList **)&jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderState_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::SubRenderState **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderState_1getAccessor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::SubRenderState *arg1 = (Ogre::RTShader::SubRenderState *) 0 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::RTShader::SubRenderStateAccessor > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::SubRenderState **)&jarg1; 
  {
    try {
      result = (arg1)->getAccessor();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderStateAccessorPtr **)&jresult = new Ogre::RTShader::SubRenderStateAccessorPtr((const Ogre::RTShader::SubRenderStateAccessorPtr &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateAccessor_1addSubRenderStateInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::SubRenderStateAccessor *arg1 = (Ogre::RTShader::SubRenderStateAccessor *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::SubRenderStateAccessor **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2; 
  {
    try {
      ((Ogre::RTShader::SubRenderStateAccessor const *)arg1)->addSubRenderStateInstance(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateAccessor_1removeSubRenderStateInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::SubRenderStateAccessor *arg1 = (Ogre::RTShader::SubRenderStateAccessor *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::SubRenderStateAccessor **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2; 
  {
    try {
      ((Ogre::RTShader::SubRenderStateAccessor const *)arg1)->removeSubRenderStateInstance(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateAccessor_1getSubRenderStateInstanceSet_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::SubRenderStateAccessor *arg1 = (Ogre::RTShader::SubRenderStateAccessor *) 0 ;
  Ogre::RTShader::SubRenderStateSet *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::SubRenderStateAccessor **)&jarg1; 
  {
    try {
      result = (Ogre::RTShader::SubRenderStateSet *) &(arg1)->getSubRenderStateInstanceSet();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderStateSet **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1SubRenderStateAccessor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::SubRenderStateAccessor *arg1 = (Ogre::RTShader::SubRenderStateAccessor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::SubRenderStateAccessor **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1SubRenderStateFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateFactory_1createInstance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateFactory_1createInstance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateFactory_1createInstance_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::TextureUnitState *arg4 = (Ogre::TextureUnitState *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::TextureUnitState **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateFactory_1createOrRetrieveInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg2 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  arg2 = *(Ogre::RTShader::SGScriptTranslator **)&jarg2; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createOrRetrieveInstance(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateFactory_1destroyInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2; 
  {
    try {
      (arg1)->destroyInstance(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateFactory_1destroyAllInstances(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  {
    try {
      (arg1)->destroyAllInstances();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateFactory_1writeInstance_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SubRenderStateFactory_1writeInstance_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::SubRenderStateFactory *arg1 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::TextureUnitState *arg4 = (Ogre::TextureUnitState *) 0 ;
  Ogre::TextureUnitState *arg5 = (Ogre::TextureUnitState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::TextureUnitState **)&jarg4; 
  arg5 = *(Ogre::TextureUnitState **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,(Ogre::TextureUnitState const *)arg4,(Ogre::TextureUnitState const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1ProgramWriter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::ProgramWriter *arg1 = (Ogre::RTShader::ProgramWriter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::ProgramWriter **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ProgramWriter_1writeSourceCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Ogre::RTShader::ProgramWriter *arg1 = (Ogre::RTShader::ProgramWriter *) 0 ;
  std::ostream *arg2 = 0 ;
  Ogre::RTShader::Program *arg3 = (Ogre::RTShader::Program *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ProgramWriter **)&jarg1; 
  arg2 = *(std::ostream **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::ostream & reference is null");
    return ;
  } 
  arg3 = *(Ogre::RTShader::Program **)&jarg3; 
  {
    try {
      (arg1)->writeSourceCode(*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_ProgramWriter_1getTargetLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::RTShader::ProgramWriter *arg1 = (Ogre::RTShader::ProgramWriter *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ProgramWriter **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ProgramWriter const *)arg1)->getTargetLanguage();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1initialize(JNIEnv *jenv, jclass jcls) {
  jboolean jresult = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (bool)Ogre::RTShader::ShaderGenerator::initialize();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1destroy(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      Ogre::RTShader::ShaderGenerator::destroy();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getSingleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::ShaderGenerator *) &Ogre::RTShader::ShaderGenerator::getSingleton();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::ShaderGenerator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1addSceneManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = *(Ogre::SceneManager **)&jarg2; 
  {
    try {
      (arg1)->addSceneManager(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1removeSceneManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = *(Ogre::SceneManager **)&jarg2; 
  {
    try {
      (arg1)->removeSceneManager(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getActiveSceneManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::SceneManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::SceneManager *)(arg1)->getActiveSceneManager();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::SceneManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1_1setActiveSceneManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::SceneManager *arg2 = (Ogre::SceneManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = *(Ogre::SceneManager **)&jarg2; 
  {
    try {
      (arg1)->_setActiveSceneManager(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1setTargetLanguage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->setTargetLanguage((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1setTargetLanguage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setTargetLanguage((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1IsHlsl4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->IsHlsl4();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getTargetLanguage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getTargetLanguage();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getTargetLanguageVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (float)((Ogre::RTShader::ShaderGenerator const *)arg1)->getTargetLanguageVersion();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1setVertexShaderProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setVertexShaderProfiles((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getVertexShaderProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getVertexShaderProfiles();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getVertexShaderProfilesList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::StringVector *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getVertexShaderProfilesList();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1setFragmentShaderProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setFragmentShaderProfiles((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getFragmentShaderProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getFragmentShaderProfiles();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getFragmentShaderProfilesList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::StringVector *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getFragmentShaderProfilesList();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1setShaderCachePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setShaderCachePath((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getShaderCachePath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getShaderCachePath();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1flushShaderCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      (arg1)->flushShaderCache();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getRenderState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::RTShader::RenderState *)(arg1)->getRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::RenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1createOrRetrieveRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  SwigValueWrapper< std::pair< Ogre::RTShader::RenderState *,bool > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->createOrRetrieveRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::ShaderGenerator::RenderStateCreateOrRetrieveResult **)&jresult = new Ogre::RTShader::ShaderGenerator::RenderStateCreateOrRetrieveResult((const Ogre::RTShader::ShaderGenerator::RenderStateCreateOrRetrieveResult &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1hasRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->hasRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getRenderState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  unsigned short arg5 ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (unsigned short)jarg5; 
  {
    try {
      result = (Ogre::RTShader::RenderState *)(arg1)->getRenderState((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::RenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1addSubRenderStateFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::SubRenderStateFactory *arg2 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg2; 
  {
    try {
      (arg1)->addSubRenderStateFactory(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getNumSubRenderStateFactories(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = ((Ogre::RTShader::ShaderGenerator const *)arg1)->getNumSubRenderStateFactories();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getSubRenderStateFactory_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t arg2 ;
  Ogre::RTShader::SubRenderStateFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (Ogre::RTShader::SubRenderStateFactory *)(arg1)->getSubRenderStateFactory(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderStateFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getSubRenderStateFactory_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::SubRenderStateFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::RTShader::SubRenderStateFactory *)(arg1)->getSubRenderStateFactory((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderStateFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1removeSubRenderStateFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::SubRenderStateFactory *arg2 = (Ogre::RTShader::SubRenderStateFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderStateFactory **)&jarg2; 
  {
    try {
      (arg1)->removeSubRenderStateFactory(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1createSubRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createSubRenderState((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1destroySubRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2; 
  {
    try {
      (arg1)->destroySubRenderState(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1hasShaderBasedTechnique_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->hasShaderBasedTechnique((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1hasShaderBasedTechnique_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::String *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  Ogre::String arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->hasShaderBasedTechnique((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,(Ogre::String const &)*arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1createShaderBasedTechnique_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Material *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = *(Ogre::Material **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Material const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (bool)(arg1)->createShaderBasedTechnique((Ogre::Material const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1createShaderBasedTechnique_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::Material *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = *(Ogre::Material **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Material const & reference is null");
    return 0;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (bool)(arg1)->createShaderBasedTechnique((Ogre::Material const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1createShaderBasedTechnique_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jboolean jarg6) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::String *arg5 = 0 ;
  bool arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  Ogre::String arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  arg6 = jarg6 ? true : false; 
  {
    try {
      result = (bool)(arg1)->createShaderBasedTechnique((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,(Ogre::String const &)*arg5,arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1createShaderBasedTechnique_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::String *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  Ogre::String arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = (bool)(arg1)->createShaderBasedTechnique((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,(Ogre::String const &)*arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1removeShaderBasedTechnique(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::String *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  Ogre::String arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = (bool)(arg1)->removeShaderBasedTechnique((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,(Ogre::String const &)*arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1removeAllShaderBasedTechniques_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (bool)(arg1)->removeAllShaderBasedTechniques((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1cloneShaderBasedTechniques(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::String *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  if(!jarg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg5_pstr = (const char *)jenv->GetStringUTFChars(jarg5, 0); 
  if (!arg5_pstr) return 0;
  Ogre::String arg5_str(arg5_pstr);
  arg5 = &arg5_str;
  jenv->ReleaseStringUTFChars(jarg5, arg5_pstr); 
  {
    try {
      result = (bool)(arg1)->cloneShaderBasedTechniques((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,(Ogre::String const &)*arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1removeAllShaderBasedTechniques_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      (arg1)->removeAllShaderBasedTechniques();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1createScheme(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->createScheme((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1invalidateScheme(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->invalidateScheme((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1validateScheme(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)(arg1)->validateScheme((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1invalidateMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      (arg1)->invalidateMaterial((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1validateMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (bool)(arg1)->validateMaterial((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1invalidateMaterialIlluminationPasses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      (arg1)->invalidateMaterialIlluminationPasses((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1validateMaterialIlluminationPasses(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (bool)(arg1)->validateMaterialIlluminationPasses((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getMaterialSerializerListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::SGMaterialSerializerListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::RTShader::SGMaterialSerializerListener *)(arg1)->getMaterialSerializerListener();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SGMaterialSerializerListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getVertexShaderCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = ((Ogre::RTShader::ShaderGenerator const *)arg1)->getVertexShaderCount();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getFragmentShaderCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = ((Ogre::RTShader::ShaderGenerator const *)arg1)->getFragmentShaderCount();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1setVertexShaderOutputsCompactPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::VSOutputCompactPolicy arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = (Ogre::RTShader::VSOutputCompactPolicy)jarg2; 
  {
    try {
      (arg1)->setVertexShaderOutputsCompactPolicy(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getVertexShaderOutputsCompactPolicy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  Ogre::RTShader::VSOutputCompactPolicy result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (Ogre::RTShader::VSOutputCompactPolicy)((Ogre::RTShader::ShaderGenerator const *)arg1)->getVertexShaderOutputsCompactPolicy();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1setCreateShaderOverProgrammablePass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setCreateShaderOverProgrammablePass(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getCreateShaderOverProgrammablePass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::RTShader::ShaderGenerator const *)arg1)->getCreateShaderOverProgrammablePass();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getRTShaderSchemeCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = ((Ogre::RTShader::ShaderGenerator const *)arg1)->getRTShaderSchemeCount();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1getRTShaderScheme(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jstring jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  size_t arg2 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::ShaderGenerator const *)arg1)->getRTShaderScheme(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1DEFAULT_1SCHEME_1NAME_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::ShaderGenerator::DEFAULT_SCHEME_NAME = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_ShaderGenerator_1DEFAULT_1SCHEME_1NAME_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::ShaderGenerator::DEFAULT_SCHEME_NAME;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1RenderState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::RenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::RenderState *)new Ogre::RTShader::RenderState();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::RenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1RenderState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_RenderState_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  {
    try {
      (arg1)->reset();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_RenderState_1addTemplateSubRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2; 
  {
    try {
      (arg1)->addTemplateSubRenderState(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_RenderState_1removeTemplateSubRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = (Ogre::RTShader::SubRenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2; 
  {
    try {
      (arg1)->removeTemplateSubRenderState(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_RenderState_1getTemplateSubRenderStateList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::RTShader::SubRenderStateList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  {
    try {
      result = (Ogre::RTShader::SubRenderStateList *) &((Ogre::RTShader::RenderState const *)arg1)->getTemplateSubRenderStateList();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderStateList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_RenderState_1setLightCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  {
    try {
      (arg1)->setLightCount((int const (*))arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_RenderState_1getLightCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  int *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  {
    try {
      ((Ogre::RTShader::RenderState const *)arg1)->getLightCount(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
  
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_RenderState_1setLightCountAutoUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setLightCountAutoUpdate(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_RenderState_1getLightCountAutoUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::RenderState *arg1 = (Ogre::RTShader::RenderState *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::RenderState **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::RTShader::RenderState const *)arg1)->getLightCountAutoUpdate();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1TargetRenderState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::TargetRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::TargetRenderState *)new Ogre::RTShader::TargetRenderState();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::TargetRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1TargetRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::TargetRenderState **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_TargetRenderState_1link(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  Ogre::RTShader::RenderState *arg2 = 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::TargetRenderState **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::RenderState const & reference is null");
    return ;
  } 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      (arg1)->link((Ogre::RTShader::RenderState const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_TargetRenderState_1updateGpuProgramsParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  Ogre::RTShader::TargetRenderState *arg1 = (Ogre::RTShader::TargetRenderState *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::TargetRenderState **)&jarg1; 
  arg2 = *(Ogre::Renderable **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::AutoParamDataSource **)&jarg4; 
  arg5 = *(Ogre::LightList **)&jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransform_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPTransform *arg1 = (Ogre::RTShader::FFPTransform *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPTransform **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::FFPTransform const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransform_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::FFPTransform *arg1 = (Ogre::RTShader::FFPTransform *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::FFPTransform **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransform_1createCpuSubPrograms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  Ogre::RTShader::FFPTransform *arg1 = (Ogre::RTShader::FFPTransform *) 0 ;
  Ogre::RTShader::ProgramSet *arg2 = (Ogre::RTShader::ProgramSet *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPTransform **)&jarg1; 
  arg2 = *(Ogre::RTShader::ProgramSet **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->createCpuSubPrograms(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransform_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::FFPTransform *arg1 = (Ogre::RTShader::FFPTransform *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::FFPTransform **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransform_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::FFPTransform::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransform_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::FFPTransform::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPTransform(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPTransform *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPTransform *)new Ogre::RTShader::FFPTransform();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPTransform **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPTransform(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPTransform *arg1 = (Ogre::RTShader::FFPTransform *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPTransform **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransformFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPTransformFactory *arg1 = (Ogre::RTShader::FFPTransformFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPTransformFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransformFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::FFPTransformFactory *arg1 = (Ogre::RTShader::FFPTransformFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPTransformFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPTransformFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPTransformFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPTransformFactory *)new Ogre::RTShader::FFPTransformFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPTransformFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPTransformFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPTransformFactory *arg1 = (Ogre::RTShader::FFPTransformFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPTransformFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SF_1VS_1INPUT_1DIFFUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour::StageFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPColour::StageFlags)Ogre::RTShader::FFPColour::SF_VS_INPUT_DIFFUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SF_1VS_1INPUT_1SPECULAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour::StageFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPColour::StageFlags)Ogre::RTShader::FFPColour::SF_VS_INPUT_SPECULAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SF_1VS_1OUTPUT_1DIFFUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour::StageFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPColour::StageFlags)Ogre::RTShader::FFPColour::SF_VS_OUTPUT_DIFFUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SF_1VS_1OUTPUT_1SPECULAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour::StageFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPColour::StageFlags)Ogre::RTShader::FFPColour::SF_VS_OUTPUT_SPECULAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SF_1PS_1INPUT_1DIFFUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour::StageFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPColour::StageFlags)Ogre::RTShader::FFPColour::SF_PS_INPUT_DIFFUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SF_1PS_1INPUT_1SPECULAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour::StageFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPColour::StageFlags)Ogre::RTShader::FFPColour::SF_PS_INPUT_SPECULAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SF_1PS_1OUTPUT_1DIFFUSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour::StageFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPColour::StageFlags)Ogre::RTShader::FFPColour::SF_PS_OUTPUT_DIFFUSE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SF_1PS_1OUTPUT_1SPECULAR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour::StageFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPColour::StageFlags)Ogre::RTShader::FFPColour::SF_PS_OUTPUT_SPECULAR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPColour(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPColour *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPColour *)new Ogre::RTShader::FFPColour();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPColour **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPColour *arg1 = (Ogre::RTShader::FFPColour *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPColour **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::FFPColour const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::FFPColour *arg1 = (Ogre::RTShader::FFPColour *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::FFPColour **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::FFPColour *arg1 = (Ogre::RTShader::FFPColour *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::FFPColour **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1setResolveStageFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::FFPColour *arg1 = (Ogre::RTShader::FFPColour *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPColour **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->setResolveStageFlags(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1getResolveStageFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPColour *arg1 = (Ogre::RTShader::FFPColour *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPColour **)&jarg1; 
  {
    try {
      result = (unsigned int)((Ogre::RTShader::FFPColour const *)arg1)->getResolveStageFlags();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1addResolveStageMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::FFPColour *arg1 = (Ogre::RTShader::FFPColour *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPColour **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->addResolveStageMask(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1removeResolveStageMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::FFPColour *arg1 = (Ogre::RTShader::FFPColour *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPColour **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->removeResolveStageMask(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::FFPColour::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::FFPColour::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPColour(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPColour *arg1 = (Ogre::RTShader::FFPColour *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPColour **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColourFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPColourFactory *arg1 = (Ogre::RTShader::FFPColourFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPColourFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColourFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::FFPColourFactory *arg1 = (Ogre::RTShader::FFPColourFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPColourFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPColourFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPColourFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPColourFactory *)new Ogre::RTShader::FFPColourFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPColourFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPColourFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPColourFactory *arg1 = (Ogre::RTShader::FFPColourFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPColourFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPLighting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPLighting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPLighting *)new Ogre::RTShader::FFPLighting();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPLighting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLighting_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPLighting *arg1 = (Ogre::RTShader::FFPLighting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPLighting **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::FFPLighting const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLighting_1updateGpuProgramsParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  Ogre::RTShader::FFPLighting *arg1 = (Ogre::RTShader::FFPLighting *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::FFPLighting **)&jarg1; 
  arg2 = *(Ogre::Renderable **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::AutoParamDataSource **)&jarg4; 
  arg5 = *(Ogre::LightList **)&jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLighting_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::FFPLighting *arg1 = (Ogre::RTShader::FFPLighting *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::FFPLighting **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLighting_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::FFPLighting *arg1 = (Ogre::RTShader::FFPLighting *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::FFPLighting **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLighting_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::FFPLighting::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLighting_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::FFPLighting::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPLighting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPLighting *arg1 = (Ogre::RTShader::FFPLighting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPLighting **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLightingFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPLightingFactory *arg1 = (Ogre::RTShader::FFPLightingFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPLightingFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLightingFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::FFPLightingFactory *arg1 = (Ogre::RTShader::FFPLightingFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPLightingFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPLightingFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPLightingFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPLightingFactory *)new Ogre::RTShader::FFPLightingFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPLightingFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPLightingFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPLightingFactory *arg1 = (Ogre::RTShader::FFPLightingFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPLightingFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPTexturing(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPTexturing *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPTexturing *)new Ogre::RTShader::FFPTexturing();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPTexturing **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPTexturing *arg1 = (Ogre::RTShader::FFPTexturing *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPTexturing **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::FFPTexturing const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1updateGpuProgramsParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  Ogre::RTShader::FFPTexturing *arg1 = (Ogre::RTShader::FFPTexturing *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::FFPTexturing **)&jarg1; 
  arg2 = *(Ogre::Renderable **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::AutoParamDataSource **)&jarg4; 
  arg5 = *(Ogre::LightList **)&jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::FFPTexturing *arg1 = (Ogre::RTShader::FFPTexturing *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::FFPTexturing **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::FFPTexturing *arg1 = (Ogre::RTShader::FFPTexturing *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::FFPTexturing **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1AddTextureSampleWrapperInvocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jint jarg3, jlong jarg4, jint jarg5) {
  SwigValueWrapper< Ogre::SharedPtr< Ogre::RTShader::UniformParameter > > arg1 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::RTShader::UniformParameter > > arg2 ;
  Ogre::GpuConstantType arg3 ;
  Ogre::RTShader::Function *arg4 = (Ogre::RTShader::Function *) 0 ;
  int arg5 ;
  Ogre::RTShader::UniformParameterPtr *argp1 ;
  Ogre::RTShader::UniformParameterPtr *argp2 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Ogre::RTShader::UniformParameterPtr **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::RTShader::UniformParameterPtr");
    return ;
  }
  arg1 = *argp1; 
  argp2 = *(Ogre::RTShader::UniformParameterPtr **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::RTShader::UniformParameterPtr");
    return ;
  }
  arg2 = *argp2; 
  arg3 = (Ogre::GpuConstantType)jarg3; 
  arg4 = *(Ogre::RTShader::Function **)&jarg4; 
  arg5 = (int)jarg5; 
  {
    try {
      Ogre::RTShader::FFPTexturing::AddTextureSampleWrapperInvocation(arg1,arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1GetSamplerWrapperParam(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::RTShader::UniformParameter > > arg1 ;
  Ogre::RTShader::Function *arg2 = (Ogre::RTShader::Function *) 0 ;
  Ogre::RTShader::UniformParameterPtr *argp1 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::RTShader::Parameter > > result;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(Ogre::RTShader::UniformParameterPtr **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::RTShader::UniformParameterPtr");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(Ogre::RTShader::Function **)&jarg2; 
  {
    try {
      result = Ogre::RTShader::FFPTexturing::GetSamplerWrapperParam(arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::ParameterPtr **)&jresult = new Ogre::RTShader::ParameterPtr((const Ogre::RTShader::ParameterPtr &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::FFPTexturing::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::FFPTexturing::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPTexturing(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPTexturing *arg1 = (Ogre::RTShader::FFPTexturing *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPTexturing **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturingFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPTexturingFactory *arg1 = (Ogre::RTShader::FFPTexturingFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPTexturingFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturingFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::FFPTexturingFactory *arg1 = (Ogre::RTShader::FFPTexturingFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPTexturingFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPTexturingFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPTexturingFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPTexturingFactory *)new Ogre::RTShader::FFPTexturingFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPTexturingFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPTexturingFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPTexturingFactory *arg1 = (Ogre::RTShader::FFPTexturingFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPTexturingFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1CM_1PER_1VERTEX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPFog::CalcMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPFog::CalcMode)Ogre::RTShader::FFPFog::CM_PER_VERTEX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1CM_1PER_1PIXEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPFog::CalcMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::FFPFog::CalcMode)Ogre::RTShader::FFPFog::CM_PER_PIXEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPFog(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPFog *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPFog *)new Ogre::RTShader::FFPFog();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPFog **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPFog *arg1 = (Ogre::RTShader::FFPFog *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPFog **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::FFPFog const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1updateGpuProgramsParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  Ogre::RTShader::FFPFog *arg1 = (Ogre::RTShader::FFPFog *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::FFPFog **)&jarg1; 
  arg2 = *(Ogre::Renderable **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::AutoParamDataSource **)&jarg4; 
  arg5 = *(Ogre::LightList **)&jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::FFPFog *arg1 = (Ogre::RTShader::FFPFog *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::FFPFog **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::FFPFog *arg1 = (Ogre::RTShader::FFPFog *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::FFPFog **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1setFogProperties(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  Ogre::RTShader::FFPFog *arg1 = (Ogre::RTShader::FFPFog *) 0 ;
  Ogre::FogMode arg2 ;
  Ogre::ColourValue *arg3 = 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::FFPFog **)&jarg1; 
  arg2 = (Ogre::FogMode)jarg2; 
  arg3 = *(Ogre::ColourValue **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::ColourValue const & reference is null");
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  {
    try {
      (arg1)->setFogProperties(arg2,(Ogre::ColourValue const &)*arg3,arg4,arg5,arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1setCalcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::FFPFog *arg1 = (Ogre::RTShader::FFPFog *) 0 ;
  Ogre::RTShader::FFPFog::CalcMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPFog **)&jarg1; 
  arg2 = (Ogre::RTShader::FFPFog::CalcMode)jarg2; 
  {
    try {
      (arg1)->setCalcMode(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1getCalcMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::FFPFog *arg1 = (Ogre::RTShader::FFPFog *) 0 ;
  Ogre::RTShader::FFPFog::CalcMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::FFPFog **)&jarg1; 
  {
    try {
      result = (Ogre::RTShader::FFPFog::CalcMode)((Ogre::RTShader::FFPFog const *)arg1)->getCalcMode();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::FFPFog::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::FFPFog::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPFog(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPFog *arg1 = (Ogre::RTShader::FFPFog *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPFog **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFogFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPFogFactory *arg1 = (Ogre::RTShader::FFPFogFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPFogFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFogFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::FFPFogFactory *arg1 = (Ogre::RTShader::FFPFogFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::FFPFogFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1FFPFogFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::FFPFogFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::FFPFogFactory *)new Ogre::RTShader::FFPFogFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::FFPFogFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1FFPFogFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::FFPFogFactory *arg1 = (Ogre::RTShader::FFPFogFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::FFPFogFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1LIB_1PERPIXELLIGHTING_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGXLib_PerPixelLighting");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1TRANSFORMNORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_TransformNormal");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1TRANSFORMPOSITION_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_TransformPosition");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1LIGHT_1DIRECTIONAL_1DIFFUSE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_Light_Directional_Diffuse");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1LIGHT_1DIRECTIONAL_1DIFFUSESPECULAR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_Light_Directional_DiffuseSpecular");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1LIGHT_1POINT_1DIFFUSE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_Light_Point_Diffuse");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1LIGHT_1POINT_1DIFFUSESPECULAR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_Light_Point_DiffuseSpecular");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1LIGHT_1SPOT_1DIFFUSE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_Light_Spot_Diffuse");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1LIGHT_1SPOT_1DIFFUSESPECULAR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_Light_Spot_DiffuseSpecular");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1PerPixelLighting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::PerPixelLighting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::PerPixelLighting *)new Ogre::RTShader::PerPixelLighting();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::PerPixelLighting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLighting_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::PerPixelLighting *arg1 = (Ogre::RTShader::PerPixelLighting *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::PerPixelLighting **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::PerPixelLighting const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLighting_1updateGpuProgramsParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  Ogre::RTShader::PerPixelLighting *arg1 = (Ogre::RTShader::PerPixelLighting *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::PerPixelLighting **)&jarg1; 
  arg2 = *(Ogre::Renderable **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::AutoParamDataSource **)&jarg4; 
  arg5 = *(Ogre::LightList **)&jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLighting_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::PerPixelLighting *arg1 = (Ogre::RTShader::PerPixelLighting *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::PerPixelLighting **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLighting_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::PerPixelLighting *arg1 = (Ogre::RTShader::PerPixelLighting *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::PerPixelLighting **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLighting_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::PerPixelLighting::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLighting_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::PerPixelLighting::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1PerPixelLighting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::PerPixelLighting *arg1 = (Ogre::RTShader::PerPixelLighting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::PerPixelLighting **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLightingFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::PerPixelLightingFactory *arg1 = (Ogre::RTShader::PerPixelLightingFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::PerPixelLightingFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLightingFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::PerPixelLightingFactory *arg1 = (Ogre::RTShader::PerPixelLightingFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::PerPixelLightingFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1PerPixelLightingFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::PerPixelLightingFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::PerPixelLightingFactory *)new Ogre::RTShader::PerPixelLightingFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::PerPixelLightingFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1PerPixelLightingFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::PerPixelLightingFactory *arg1 = (Ogre::RTShader::PerPixelLightingFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::PerPixelLightingFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1LIB_1NORMALMAPLIGHTING_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGXLib_NormalMapLighting");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1CONSTRUCT_1TBNMATRIX_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_ConstructTBNMatrix");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1FETCHNORMAL_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_FetchNormal");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1NormalMapLighting(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::NormalMapLighting *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::NormalMapLighting *)new Ogre::RTShader::NormalMapLighting();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::NormalMapLighting **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1updateGpuProgramsParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = *(Ogre::Renderable **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::AutoParamDataSource **)&jarg4; 
  arg5 = *(Ogre::LightList **)&jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1setTexCoordIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->setTexCoordIndex(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1getTexCoordIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  {
    try {
      result = (unsigned int)((Ogre::RTShader::NormalMapLighting const *)arg1)->getTexCoordIndex();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::NormalMapLighting::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::NormalMapLighting::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1setNormalMapSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::RTShader::NormalMapLighting::NormalMapSpace arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = (Ogre::RTShader::NormalMapLighting::NormalMapSpace)jarg2; 
  {
    try {
      (arg1)->setNormalMapSpace(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1getNormalMapSpace(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::RTShader::NormalMapLighting::NormalMapSpace result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  {
    try {
      result = (Ogre::RTShader::NormalMapLighting::NormalMapSpace)((Ogre::RTShader::NormalMapLighting const *)arg1)->getNormalMapSpace();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1setNormalMapTextureName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setNormalMapTextureName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1getNormalMapTextureName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::RTShader::NormalMapLighting const *)arg1)->getNormalMapTextureName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1setNormalMapFiltering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::FilterOptions arg2 ;
  Ogre::FilterOptions arg3 ;
  Ogre::FilterOptions arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = (Ogre::FilterOptions)jarg2; 
  arg3 = (Ogre::FilterOptions)jarg3; 
  arg4 = (Ogre::FilterOptions)jarg4; 
  {
    try {
      (arg1)->setNormalMapFiltering(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1getNormalMapFiltering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::FilterOptions *arg2 = 0 ;
  Ogre::FilterOptions *arg3 = 0 ;
  Ogre::FilterOptions *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = *(Ogre::FilterOptions **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FilterOptions & reference is null");
    return ;
  } 
  arg3 = *(Ogre::FilterOptions **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FilterOptions & reference is null");
    return ;
  } 
  arg4 = *(Ogre::FilterOptions **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FilterOptions & reference is null");
    return ;
  } 
  {
    try {
      ((Ogre::RTShader::NormalMapLighting const *)arg1)->getNormalMapFiltering(*arg2,*arg3,*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1setNormalMapAnisotropy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->setNormalMapAnisotropy(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1getNormalMapAnisotropy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  {
    try {
      result = (unsigned int)((Ogre::RTShader::NormalMapLighting const *)arg1)->getNormalMapAnisotropy();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1setNormalMapMipBias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setNormalMapMipBias(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1getNormalMapMipBias(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::RTShader::NormalMapLighting const *)arg1)->getNormalMapMipBias();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1NormalMapLighting(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::NormalMapLighting *arg1 = (Ogre::RTShader::NormalMapLighting *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::NormalMapLighting **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLightingFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::NormalMapLightingFactory *arg1 = (Ogre::RTShader::NormalMapLightingFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::NormalMapLightingFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLightingFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::NormalMapLightingFactory *arg1 = (Ogre::RTShader::NormalMapLightingFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::NormalMapLightingFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1NormalMapLightingFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::NormalMapLightingFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::NormalMapLightingFactory *)new Ogre::RTShader::NormalMapLightingFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::NormalMapLightingFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1NormalMapLightingFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::NormalMapLightingFactory *arg1 = (Ogre::RTShader::NormalMapLightingFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::NormalMapLightingFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1LIB_1INTEGRATEDPSSM_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGXLib_IntegratedPSSM");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1COMPUTE_1SHADOW_1COLOUR3_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_ComputeShadowFactor_PSSM3");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1APPLYSHADOWFACTOR_1DIFFUSE_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_ApplyShadowFactor_Diffuse");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1FUNC_1MODULATE_1SCALAR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGX_ModulateScalar");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1IntegratedPSSM3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::IntegratedPSSM3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::IntegratedPSSM3 *)new Ogre::RTShader::IntegratedPSSM3();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::IntegratedPSSM3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::IntegratedPSSM3 *arg1 = (Ogre::RTShader::IntegratedPSSM3 *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::IntegratedPSSM3 **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::IntegratedPSSM3 const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3_1updateGpuProgramsParams(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jlong jarg5) {
  Ogre::RTShader::IntegratedPSSM3 *arg1 = (Ogre::RTShader::IntegratedPSSM3 *) 0 ;
  Ogre::Renderable *arg2 = (Ogre::Renderable *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::AutoParamDataSource *arg4 = (Ogre::AutoParamDataSource *) 0 ;
  Ogre::LightList *arg5 = (Ogre::LightList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::RTShader::IntegratedPSSM3 **)&jarg1; 
  arg2 = *(Ogre::Renderable **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::AutoParamDataSource **)&jarg4; 
  arg5 = *(Ogre::LightList **)&jarg5; 
  {
    try {
      (arg1)->updateGpuProgramsParams(arg2,arg3,(Ogre::AutoParamDataSource const *)arg4,(Ogre::LightList const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::IntegratedPSSM3 *arg1 = (Ogre::RTShader::IntegratedPSSM3 *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::IntegratedPSSM3 **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::IntegratedPSSM3 *arg1 = (Ogre::RTShader::IntegratedPSSM3 *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::IntegratedPSSM3 **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3_1setSplitPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::IntegratedPSSM3 *arg1 = (Ogre::RTShader::IntegratedPSSM3 *) 0 ;
  Ogre::RTShader::IntegratedPSSM3::SplitPointList *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::IntegratedPSSM3 **)&jarg1; 
  arg2 = *(Ogre::RTShader::IntegratedPSSM3::SplitPointList **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::IntegratedPSSM3::SplitPointList const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setSplitPoints((Ogre::RTShader::IntegratedPSSM3::SplitPointList const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::IntegratedPSSM3::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::IntegratedPSSM3::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1IntegratedPSSM3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::IntegratedPSSM3 *arg1 = (Ogre::RTShader::IntegratedPSSM3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::IntegratedPSSM3 **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3Factory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::IntegratedPSSM3Factory *arg1 = (Ogre::RTShader::IntegratedPSSM3Factory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::IntegratedPSSM3Factory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1IntegratedPSSM3Factory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::IntegratedPSSM3Factory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::IntegratedPSSM3Factory *)new Ogre::RTShader::IntegratedPSSM3Factory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::IntegratedPSSM3Factory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1IntegratedPSSM3Factory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::IntegratedPSSM3Factory *arg1 = (Ogre::RTShader::IntegratedPSSM3Factory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::IntegratedPSSM3Factory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_SGX_1LIB_1LAYEREDBLENDING_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("SGXLib_LayeredBlending");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1LB_1Invalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::LayeredBlending::BlendMode result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::LayeredBlending::BlendMode)Ogre::RTShader::LayeredBlending::LB_Invalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1SM_1Invalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::RTShader::LayeredBlending::SourceModifier result;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RTShader::LayeredBlending::SourceModifier)Ogre::RTShader::LayeredBlending::SM_Invalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1LayeredBlending_1TextureBlend(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::LayeredBlending::TextureBlend *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::LayeredBlending::TextureBlend *)new Ogre::RTShader::LayeredBlending::TextureBlend();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1TextureBlend_1blendMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  Ogre::RTShader::LayeredBlending::BlendMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  arg2 = (Ogre::RTShader::LayeredBlending::BlendMode)jarg2; 
  if (arg1) (arg1)->blendMode = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1TextureBlend_1blendMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  Ogre::RTShader::LayeredBlending::BlendMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  result = (Ogre::RTShader::LayeredBlending::BlendMode) ((arg1)->blendMode);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1TextureBlend_1sourceModifier_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  Ogre::RTShader::LayeredBlending::SourceModifier arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  arg2 = (Ogre::RTShader::LayeredBlending::SourceModifier)jarg2; 
  if (arg1) (arg1)->sourceModifier = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1TextureBlend_1sourceModifier_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  Ogre::RTShader::LayeredBlending::SourceModifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  result = (Ogre::RTShader::LayeredBlending::SourceModifier) ((arg1)->sourceModifier);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1TextureBlend_1customNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->customNum = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1TextureBlend_1customNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  result = (int) ((arg1)->customNum);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1TextureBlend_1modControlParam_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  Ogre::RTShader::ParameterPtr *arg2 = (Ogre::RTShader::ParameterPtr *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  arg2 = *(Ogre::RTShader::ParameterPtr **)&jarg2; 
  if (arg1) (arg1)->modControlParam = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1TextureBlend_1modControlParam_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  Ogre::RTShader::ParameterPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  result = (Ogre::RTShader::ParameterPtr *)& ((arg1)->modControlParam);
  *(Ogre::RTShader::ParameterPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1LayeredBlending_1TextureBlend(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::LayeredBlending::TextureBlend *arg1 = (Ogre::RTShader::LayeredBlending::TextureBlend *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::LayeredBlending::TextureBlend **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1LayeredBlending(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::LayeredBlending *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::LayeredBlending *)new Ogre::RTShader::LayeredBlending();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::LayeredBlending **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1setBlendMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  unsigned short arg2 ;
  Ogre::RTShader::LayeredBlending::BlendMode arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = (Ogre::RTShader::LayeredBlending::BlendMode)jarg3; 
  {
    try {
      (arg1)->setBlendMode(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1getBlendMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  unsigned short arg2 ;
  Ogre::RTShader::LayeredBlending::BlendMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  {
    try {
      result = (Ogre::RTShader::LayeredBlending::BlendMode)((Ogre::RTShader::LayeredBlending const *)arg1)->getBlendMode(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1setSourceModifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  unsigned short arg2 ;
  Ogre::RTShader::LayeredBlending::SourceModifier arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = (Ogre::RTShader::LayeredBlending::SourceModifier)jarg3; 
  arg4 = (int)jarg4; 
  {
    try {
      (arg1)->setSourceModifier(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1getSourceModifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  unsigned short arg2 ;
  Ogre::RTShader::LayeredBlending::SourceModifier *arg3 = 0 ;
  int *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::LayeredBlending **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = *(Ogre::RTShader::LayeredBlending::SourceModifier **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::LayeredBlending::SourceModifier & reference is null");
    return 0;
  } 
  arg4 = *(int **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)((Ogre::RTShader::LayeredBlending const *)arg1)->getSourceModifier(arg2,*arg3,*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::LayeredBlending **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::LayeredBlending::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::LayeredBlending::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1LayeredBlending(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::LayeredBlending *arg1 = (Ogre::RTShader::LayeredBlending *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::LayeredBlending **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlendingFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::LayeredBlendingFactory *arg1 = (Ogre::RTShader::LayeredBlendingFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::TextureUnitState *arg4 = (Ogre::TextureUnitState *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::LayeredBlendingFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::TextureUnitState **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlendingFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::LayeredBlendingFactory *arg1 = (Ogre::RTShader::LayeredBlendingFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::TextureUnitState *arg4 = (Ogre::TextureUnitState *) 0 ;
  Ogre::TextureUnitState *arg5 = (Ogre::TextureUnitState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::LayeredBlendingFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::TextureUnitState **)&jarg4; 
  arg5 = *(Ogre::TextureUnitState **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,(Ogre::TextureUnitState const *)arg4,(Ogre::TextureUnitState const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1LayeredBlendingFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::LayeredBlendingFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::LayeredBlendingFactory *)new Ogre::RTShader::LayeredBlendingFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::LayeredBlendingFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1LayeredBlendingFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::LayeredBlendingFactory *arg1 = (Ogre::RTShader::LayeredBlendingFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::LayeredBlendingFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HS_1MAX_1WEIGHT_1COUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1HardwareSkinning_1SkinningData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::HardwareSkinning::SkinningData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::HardwareSkinning::SkinningData *)new Ogre::RTShader::HardwareSkinning::SkinningData();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1isValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1isValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  result = (bool) ((arg1)->isValid);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1maxBoneCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  Ogre::ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  if (arg1) (arg1)->maxBoneCount = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1maxBoneCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  result = (Ogre::ushort) ((arg1)->maxBoneCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1maxWeightCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  Ogre::ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  if (arg1) (arg1)->maxWeightCount = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1maxWeightCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  result = (Ogre::ushort) ((arg1)->maxWeightCount);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1skinningType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  Ogre::RTShader::SkinningType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  arg2 = (Ogre::RTShader::SkinningType)jarg2; 
  if (arg1) (arg1)->skinningType = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1skinningType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  Ogre::RTShader::SkinningType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  result = (Ogre::RTShader::SkinningType) ((arg1)->skinningType);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1correctAntipodalityHandling_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->correctAntipodalityHandling = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1correctAntipodalityHandling_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  result = (bool) ((arg1)->correctAntipodalityHandling);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1scalingShearingSupport_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->scalingShearingSupport = arg2;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SkinningData_1scalingShearingSupport_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  result = (bool) ((arg1)->scalingShearingSupport);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1HardwareSkinning_1SkinningData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::HardwareSkinning::SkinningData *arg1 = (Ogre::RTShader::HardwareSkinning::SkinningData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::HardwareSkinning::SkinningData **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1HardwareSkinning(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::HardwareSkinning *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::HardwareSkinning *)new Ogre::RTShader::HardwareSkinning();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::HardwareSkinning **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1getExecutionOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  {
    try {
      result = (int)((Ogre::RTShader::HardwareSkinning const *)arg1)->getExecutionOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1copyFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::RTShader::SubRenderState *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  arg2 = *(Ogre::RTShader::SubRenderState **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RTShader::SubRenderState const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->copyFrom((Ogre::RTShader::SubRenderState const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1setHardwareSkinningParam_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jboolean jarg5, jboolean jarg6) {
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort arg3 ;
  Ogre::RTShader::SkinningType arg4 ;
  bool arg5 ;
  bool arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  arg3 = (Ogre::ushort)jarg3; 
  arg4 = (Ogre::RTShader::SkinningType)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  {
    try {
      (arg1)->setHardwareSkinningParam(arg2,arg3,arg4,arg5,arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1setHardwareSkinningParam_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jboolean jarg5) {
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort arg3 ;
  Ogre::RTShader::SkinningType arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  arg3 = (Ogre::ushort)jarg3; 
  arg4 = (Ogre::RTShader::SkinningType)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->setHardwareSkinningParam(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1setHardwareSkinningParam_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort arg3 ;
  Ogre::RTShader::SkinningType arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  arg3 = (Ogre::ushort)jarg3; 
  arg4 = (Ogre::RTShader::SkinningType)jarg4; 
  {
    try {
      (arg1)->setHardwareSkinningParam(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1setHardwareSkinningParam_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  arg3 = (Ogre::ushort)jarg3; 
  {
    try {
      (arg1)->setHardwareSkinningParam(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1getBoneCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  {
    try {
      result = (Ogre::ushort)(arg1)->getBoneCount();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1getWeightCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  {
    try {
      result = (Ogre::ushort)(arg1)->getWeightCount();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1getSkinningType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::RTShader::SkinningType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  {
    try {
      result = (Ogre::RTShader::SkinningType)(arg1)->getSkinningType();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1hasCorrectAntipodalityHandling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasCorrectAntipodalityHandling();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1hasScalingShearingSupport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->hasScalingShearingSupport();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1preAddToRenderState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::RTShader::RenderState *arg2 = (Ogre::RTShader::RenderState *) 0 ;
  Ogre::Pass *arg3 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  arg2 = *(Ogre::RTShader::RenderState **)&jarg2; 
  arg3 = *(Ogre::Pass **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  {
    try {
      result = (bool)(arg1)->preAddToRenderState((Ogre::RTShader::RenderState const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1_1setCreator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  Ogre::RTShader::HardwareSkinningFactory *arg2 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  arg2 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg2; 
  {
    try {
      (arg1)->_setCreator((Ogre::RTShader::HardwareSkinningFactory const *)arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1Type_1set(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  Ogre::String *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  Ogre::RTShader::HardwareSkinning::Type = *arg1;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1Type_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::String *) &Ogre::RTShader::HardwareSkinning::Type;
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1HardwareSkinning(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::HardwareSkinning *arg1 = (Ogre::RTShader::HardwareSkinning *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::HardwareSkinning **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_new_1HardwareSkinningFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::HardwareSkinningFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::HardwareSkinningFactory *)new Ogre::RTShader::HardwareSkinningFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::HardwareSkinningFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_delete_1HardwareSkinningFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1createInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::ScriptCompiler *arg2 = (Ogre::ScriptCompiler *) 0 ;
  Ogre::PropertyAbstractNode *arg3 = (Ogre::PropertyAbstractNode *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::RTShader::SGScriptTranslator *arg5 = (Ogre::RTShader::SGScriptTranslator *) 0 ;
  Ogre::RTShader::SubRenderState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = *(Ogre::ScriptCompiler **)&jarg2; 
  arg3 = *(Ogre::PropertyAbstractNode **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::RTShader::SGScriptTranslator **)&jarg5; 
  {
    try {
      result = (Ogre::RTShader::SubRenderState *)(arg1)->createInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::SubRenderState **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1writeInstance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::RTShader::SubRenderState *arg3 = (Ogre::RTShader::SubRenderState *) 0 ;
  Ogre::Pass *arg4 = (Ogre::Pass *) 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = *(Ogre::RTShader::SubRenderState **)&jarg3; 
  arg4 = *(Ogre::Pass **)&jarg4; 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->writeInstance(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1setCustomShadowCasterMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::RTShader::SkinningType arg2 ;
  Ogre::MaterialPtr *arg3 = 0 ;
  Ogre::MaterialPtr *arg4 = 0 ;
  Ogre::MaterialPtr *arg5 = 0 ;
  Ogre::MaterialPtr *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = (Ogre::RTShader::SkinningType)jarg2; 
  arg3 = *(Ogre::MaterialPtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  arg4 = *(Ogre::MaterialPtr **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  arg5 = *(Ogre::MaterialPtr **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  arg6 = *(Ogre::MaterialPtr **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCustomShadowCasterMaterials(arg2,(Ogre::MaterialPtr const &)*arg3,(Ogre::MaterialPtr const &)*arg4,(Ogre::MaterialPtr const &)*arg5,(Ogre::MaterialPtr const &)*arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1setCustomShadowReceiverMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5, jobject jarg5_, jlong jarg6, jobject jarg6_) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::RTShader::SkinningType arg2 ;
  Ogre::MaterialPtr *arg3 = 0 ;
  Ogre::MaterialPtr *arg4 = 0 ;
  Ogre::MaterialPtr *arg5 = 0 ;
  Ogre::MaterialPtr *arg6 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  (void)jarg4_;
  (void)jarg5_;
  (void)jarg6_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = (Ogre::RTShader::SkinningType)jarg2; 
  arg3 = *(Ogre::MaterialPtr **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  arg4 = *(Ogre::MaterialPtr **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  arg5 = *(Ogre::MaterialPtr **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  arg6 = *(Ogre::MaterialPtr **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCustomShadowReceiverMaterials(arg2,(Ogre::MaterialPtr const &)*arg3,(Ogre::MaterialPtr const &)*arg4,(Ogre::MaterialPtr const &)*arg5,(Ogre::MaterialPtr const &)*arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1getCustomShadowCasterMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::RTShader::SkinningType arg2 ;
  Ogre::ushort arg3 ;
  Ogre::MaterialPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = (Ogre::RTShader::SkinningType)jarg2; 
  arg3 = (Ogre::ushort)jarg3; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::RTShader::HardwareSkinningFactory const *)arg1)->getCustomShadowCasterMaterial(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::MaterialPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1getCustomShadowReceiverMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::RTShader::SkinningType arg2 ;
  Ogre::ushort arg3 ;
  Ogre::MaterialPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = (Ogre::RTShader::SkinningType)jarg2; 
  arg3 = (Ogre::ushort)jarg3; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::RTShader::HardwareSkinningFactory const *)arg1)->getCustomShadowReceiverMaterial(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::MaterialPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1prepareEntityForSkinning_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4, jboolean jarg5) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  Ogre::RTShader::SkinningType arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = *(Ogre::Entity **)&jarg2; 
  arg3 = (Ogre::RTShader::SkinningType)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->prepareEntityForSkinning((Ogre::Entity const *)arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1prepareEntityForSkinning_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  Ogre::RTShader::SkinningType arg3 ;
  bool arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = *(Ogre::Entity **)&jarg2; 
  arg3 = (Ogre::RTShader::SkinningType)jarg3; 
  arg4 = jarg4 ? true : false; 
  {
    try {
      (arg1)->prepareEntityForSkinning((Ogre::Entity const *)arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1prepareEntityForSkinning_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  Ogre::RTShader::SkinningType arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = *(Ogre::Entity **)&jarg2; 
  arg3 = (Ogre::RTShader::SkinningType)jarg3; 
  {
    try {
      (arg1)->prepareEntityForSkinning((Ogre::Entity const *)arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1prepareEntityForSkinning_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::Entity *arg2 = (Ogre::Entity *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = *(Ogre::Entity **)&jarg2; 
  {
    try {
      (arg1)->prepareEntityForSkinning((Ogre::Entity const *)arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1getMaxCalculableBoneCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  {
    try {
      result = (Ogre::ushort)((Ogre::RTShader::HardwareSkinningFactory const *)arg1)->getMaxCalculableBoneCount();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1setMaxCalculableBoneCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::RTShader::HardwareSkinningFactory *arg1 = (Ogre::RTShader::HardwareSkinningFactory *) 0 ;
  Ogre::ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      (arg1)->setMaxCalculableBoneCount(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1getSingleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RTShader::HardwareSkinningFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::RTShader::HardwareSkinningFactory *) &Ogre::RTShader::HardwareSkinningFactory::getSingleton();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RTShader::HardwareSkinningFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SGMaterialSerializerListener_1materialEventRaised(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::SGMaterialSerializerListener *arg1 = (Ogre::RTShader::SGMaterialSerializerListener *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::MaterialSerializer::SerializeEvent arg3 ;
  bool *arg4 = 0 ;
  Ogre::Material *arg5 = (Ogre::Material *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::SGMaterialSerializerListener **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = (Ogre::MaterialSerializer::SerializeEvent)jarg3; 
  arg4 = *(bool **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  arg5 = *(Ogre::Material **)&jarg5; 
  {
    try {
      (arg1)->materialEventRaised(arg2,arg3,*arg4,(Ogre::Material const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SGMaterialSerializerListener_1techniqueEventRaised(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::SGMaterialSerializerListener *arg1 = (Ogre::RTShader::SGMaterialSerializerListener *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::MaterialSerializer::SerializeEvent arg3 ;
  bool *arg4 = 0 ;
  Ogre::Technique *arg5 = (Ogre::Technique *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::SGMaterialSerializerListener **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = (Ogre::MaterialSerializer::SerializeEvent)jarg3; 
  arg4 = *(bool **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  arg5 = *(Ogre::Technique **)&jarg5; 
  {
    try {
      (arg1)->techniqueEventRaised(arg2,arg3,*arg4,(Ogre::Technique const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SGMaterialSerializerListener_1passEventRaised(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::SGMaterialSerializerListener *arg1 = (Ogre::RTShader::SGMaterialSerializerListener *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::MaterialSerializer::SerializeEvent arg3 ;
  bool *arg4 = 0 ;
  Ogre::Pass *arg5 = (Ogre::Pass *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::SGMaterialSerializerListener **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = (Ogre::MaterialSerializer::SerializeEvent)jarg3; 
  arg4 = *(bool **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  arg5 = *(Ogre::Pass **)&jarg5; 
  {
    try {
      (arg1)->passEventRaised(arg2,arg3,*arg4,(Ogre::Pass const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreRTShaderJNI_SGMaterialSerializerListener_1textureUnitStateEventRaised(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jlong jarg5, jobject jarg5_) {
  Ogre::RTShader::SGMaterialSerializerListener *arg1 = (Ogre::RTShader::SGMaterialSerializerListener *) 0 ;
  Ogre::MaterialSerializer *arg2 = (Ogre::MaterialSerializer *) 0 ;
  Ogre::MaterialSerializer::SerializeEvent arg3 ;
  bool *arg4 = 0 ;
  Ogre::TextureUnitState *arg5 = (Ogre::TextureUnitState *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(Ogre::RTShader::SGMaterialSerializerListener **)&jarg1; 
  arg2 = *(Ogre::MaterialSerializer **)&jarg2; 
  arg3 = (Ogre::MaterialSerializer::SerializeEvent)jarg3; 
  arg4 = *(bool **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  arg5 = *(Ogre::TextureUnitState **)&jarg5; 
  {
    try {
      (arg1)->textureUnitStateEventRaised(arg2,arg3,*arg4,(Ogre::TextureUnitState const *)arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_TargetRenderState_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::RenderState **)&baseptr = *(Ogre::RTShader::TargetRenderState **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransform_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderState **)&baseptr = *(Ogre::RTShader::FFPTransform **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTransformFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::FFPTransformFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColour_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderState **)&baseptr = *(Ogre::RTShader::FFPColour **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPColourFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::FFPColourFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLighting_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderState **)&baseptr = *(Ogre::RTShader::FFPLighting **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPLightingFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::FFPLightingFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturing_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderState **)&baseptr = *(Ogre::RTShader::FFPTexturing **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPTexturingFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::FFPTexturingFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFog_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderState **)&baseptr = *(Ogre::RTShader::FFPFog **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_FFPFogFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::FFPFogFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLighting_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderState **)&baseptr = *(Ogre::RTShader::PerPixelLighting **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_PerPixelLightingFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::PerPixelLightingFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLighting_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::PerPixelLighting **)&baseptr = *(Ogre::RTShader::NormalMapLighting **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_NormalMapLightingFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::NormalMapLightingFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderState **)&baseptr = *(Ogre::RTShader::IntegratedPSSM3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_IntegratedPSSM3Factory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::IntegratedPSSM3Factory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlending_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::FFPTexturing **)&baseptr = *(Ogre::RTShader::LayeredBlending **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_LayeredBlendingFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::LayeredBlendingFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinning_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderState **)&baseptr = *(Ogre::RTShader::HardwareSkinning **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_HardwareSkinningFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RTShader::SubRenderStateFactory **)&baseptr = *(Ogre::RTShader::HardwareSkinningFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreRTShaderJNI_SGMaterialSerializerListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::MaterialSerializer::Listener **)&baseptr = *(Ogre::RTShader::SGMaterialSerializerListener **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

