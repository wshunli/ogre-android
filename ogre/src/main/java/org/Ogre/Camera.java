/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class Camera extends Frustum {
  private transient long swigCPtr;

  protected Camera(long cPtr, boolean cMemoryOwn) {
    super(OgreJNI.Camera_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Camera obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Camera(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  static public class Listener {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Listener(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Listener obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_Camera_Listener(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    protected void swigDirectorDisconnect() {
      swigCMemOwn = false;
      delete();
    }
  
    public void swigReleaseOwnership() {
      swigCMemOwn = false;
      OgreJNI.Camera_Listener_change_ownership(this, swigCPtr, false);
    }
  
    public void swigTakeOwnership() {
      swigCMemOwn = true;
      OgreJNI.Camera_Listener_change_ownership(this, swigCPtr, true);
    }
  
    public Listener() {
      this(OgreJNI.new_Camera_Listener(), true);
      OgreJNI.Camera_Listener_director_connect(this, swigCPtr, true, true);
    }
  
    public void cameraPreRenderScene(Camera cam) {
      if (getClass() == Listener.class) OgreJNI.Camera_Listener_cameraPreRenderScene(swigCPtr, this, Camera.getCPtr(cam), cam); else OgreJNI.Camera_Listener_cameraPreRenderSceneSwigExplicitListener(swigCPtr, this, Camera.getCPtr(cam), cam);
    }
  
    public void cameraPostRenderScene(Camera cam) {
      if (getClass() == Listener.class) OgreJNI.Camera_Listener_cameraPostRenderScene(swigCPtr, this, Camera.getCPtr(cam), cam); else OgreJNI.Camera_Listener_cameraPostRenderSceneSwigExplicitListener(swigCPtr, this, Camera.getCPtr(cam), cam);
    }
  
    public void cameraDestroyed(Camera cam) {
      if (getClass() == Listener.class) OgreJNI.Camera_Listener_cameraDestroyed(swigCPtr, this, Camera.getCPtr(cam), cam); else OgreJNI.Camera_Listener_cameraDestroyedSwigExplicitListener(swigCPtr, this, Camera.getCPtr(cam), cam);
    }
  
  }

  public Camera(String name, SceneManager sm) {
    this(OgreJNI.new_Camera(name, SceneManager.getCPtr(sm), sm), true);
  }

  public void addListener(Camera.Listener l) {
    OgreJNI.Camera_addListener(swigCPtr, this, Camera.Listener.getCPtr(l), l);
  }

  public void removeListener(Camera.Listener l) {
    OgreJNI.Camera_removeListener(swigCPtr, this, Camera.Listener.getCPtr(l), l);
  }

  public SceneManager getSceneManager() {
    long cPtr = OgreJNI.Camera_getSceneManager(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneManager(cPtr, false);
  }

  public void setPolygonMode(PolygonMode sd) {
    OgreJNI.Camera_setPolygonMode(swigCPtr, this, sd.swigValue());
  }

  public PolygonMode getPolygonMode() {
    return PolygonMode.swigToEnum(OgreJNI.Camera_getPolygonMode(swigCPtr, this));
  }

  public void _renderScene(Viewport vp, boolean includeOverlays) {
    OgreJNI.Camera__renderScene(swigCPtr, this, Viewport.getCPtr(vp), vp, includeOverlays);
  }

  public void _notifyRenderedFaces(long numfaces) {
    OgreJNI.Camera__notifyRenderedFaces(swigCPtr, this, numfaces);
  }

  public void _notifyRenderedBatches(long numbatches) {
    OgreJNI.Camera__notifyRenderedBatches(swigCPtr, this, numbatches);
  }

  public long _getNumRenderedFaces() {
    return OgreJNI.Camera__getNumRenderedFaces(swigCPtr, this);
  }

  public long _getNumRenderedBatches() {
    return OgreJNI.Camera__getNumRenderedBatches(swigCPtr, this);
  }

  public Quaternion getDerivedOrientation() {
    return new Quaternion(OgreJNI.Camera_getDerivedOrientation(swigCPtr, this), false);
  }

  public Vector3 getDerivedPosition() {
    return new Vector3(OgreJNI.Camera_getDerivedPosition(swigCPtr, this), false);
  }

  public Vector3 getDerivedDirection() {
    return new Vector3(OgreJNI.Camera_getDerivedDirection(swigCPtr, this), true);
  }

  public Vector3 getDerivedUp() {
    return new Vector3(OgreJNI.Camera_getDerivedUp(swigCPtr, this), true);
  }

  public Vector3 getDerivedRight() {
    return new Vector3(OgreJNI.Camera_getDerivedRight(swigCPtr, this), true);
  }

  public Quaternion getRealOrientation() {
    return new Quaternion(OgreJNI.Camera_getRealOrientation(swigCPtr, this), false);
  }

  public Vector3 getRealPosition() {
    return new Vector3(OgreJNI.Camera_getRealPosition(swigCPtr, this), false);
  }

  public Vector3 getRealDirection() {
    return new Vector3(OgreJNI.Camera_getRealDirection(swigCPtr, this), true);
  }

  public Vector3 getRealUp() {
    return new Vector3(OgreJNI.Camera_getRealUp(swigCPtr, this), true);
  }

  public Vector3 getRealRight() {
    return new Vector3(OgreJNI.Camera_getRealRight(swigCPtr, this), true);
  }

  public void getWorldTransforms(Matrix4 mat) {
    OgreJNI.Camera_getWorldTransforms(swigCPtr, this, Matrix4.getCPtr(mat), mat);
  }

  public String getMovableType() {
    return OgreJNI.Camera_getMovableType(swigCPtr, this);
  }

  public void setLodBias(float factor) {
    OgreJNI.Camera_setLodBias__SWIG_0(swigCPtr, this, factor);
  }

  public void setLodBias() {
    OgreJNI.Camera_setLodBias__SWIG_1(swigCPtr, this);
  }

  public float getLodBias() {
    return OgreJNI.Camera_getLodBias(swigCPtr, this);
  }

  public void setLodCamera(Camera lodCam) {
    OgreJNI.Camera_setLodCamera(swigCPtr, this, Camera.getCPtr(lodCam), lodCam);
  }

  public Camera getLodCamera() {
    long cPtr = OgreJNI.Camera_getLodCamera(swigCPtr, this);
    return (cPtr == 0) ? null : new Camera(cPtr, false);
  }

  public Ray getCameraToViewportRay(float screenx, float screeny) {
    return new Ray(OgreJNI.Camera_getCameraToViewportRay__SWIG_0(swigCPtr, this, screenx, screeny), true);
  }

  public void getCameraToViewportRay(float screenx, float screeny, Ray outRay) {
    OgreJNI.Camera_getCameraToViewportRay__SWIG_1(swigCPtr, this, screenx, screeny, Ray.getCPtr(outRay), outRay);
  }

  public PlaneBoundedVolume getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom, boolean includeFarPlane) {
    return new PlaneBoundedVolume(OgreJNI.Camera_getCameraToViewportBoxVolume__SWIG_0(swigCPtr, this, screenLeft, screenTop, screenRight, screenBottom, includeFarPlane), true);
  }

  public PlaneBoundedVolume getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom) {
    return new PlaneBoundedVolume(OgreJNI.Camera_getCameraToViewportBoxVolume__SWIG_1(swigCPtr, this, screenLeft, screenTop, screenRight, screenBottom), true);
  }

  public void getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom, PlaneBoundedVolume outVolume, boolean includeFarPlane) {
    OgreJNI.Camera_getCameraToViewportBoxVolume__SWIG_2(swigCPtr, this, screenLeft, screenTop, screenRight, screenBottom, PlaneBoundedVolume.getCPtr(outVolume), outVolume, includeFarPlane);
  }

  public void getCameraToViewportBoxVolume(float screenLeft, float screenTop, float screenRight, float screenBottom, PlaneBoundedVolume outVolume) {
    OgreJNI.Camera_getCameraToViewportBoxVolume__SWIG_3(swigCPtr, this, screenLeft, screenTop, screenRight, screenBottom, PlaneBoundedVolume.getCPtr(outVolume), outVolume);
  }

  public float _getLodBiasInverse() {
    return OgreJNI.Camera__getLodBiasInverse(swigCPtr, this);
  }

  public void _autoTrack() {
    OgreJNI.Camera__autoTrack(swigCPtr, this);
  }

  public void setWindow(float left, float top, float right, float bottom) {
    OgreJNI.Camera_setWindow(swigCPtr, this, left, top, right, bottom);
  }

  public void resetWindow() {
    OgreJNI.Camera_resetWindow(swigCPtr, this);
  }

  public boolean isWindowSet() {
    return OgreJNI.Camera_isWindowSet(swigCPtr, this);
  }

  public SWIGTYPE_p_Ogre__vectorT_Ogre__Plane_t__type getWindowPlanes() {
    return new SWIGTYPE_p_Ogre__vectorT_Ogre__Plane_t__type(OgreJNI.Camera_getWindowPlanes(swigCPtr, this), false);
  }

  public float getBoundingRadius() {
    return OgreJNI.Camera_getBoundingRadius(swigCPtr, this);
  }

  public SceneNode getAutoTrackTarget() {
    long cPtr = OgreJNI.Camera_getAutoTrackTarget(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public Vector3 getAutoTrackOffset() {
    return new Vector3(OgreJNI.Camera_getAutoTrackOffset(swigCPtr, this), false);
  }

  public Viewport getViewport() {
    long cPtr = OgreJNI.Camera_getViewport(swigCPtr, this);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public void _notifyViewport(Viewport viewport) {
    OgreJNI.Camera__notifyViewport(swigCPtr, this, Viewport.getCPtr(viewport), viewport);
  }

  public void setAutoAspectRatio(boolean autoratio) {
    OgreJNI.Camera_setAutoAspectRatio(swigCPtr, this, autoratio);
  }

  public boolean getAutoAspectRatio() {
    return OgreJNI.Camera_getAutoAspectRatio(swigCPtr, this);
  }

  public void setCullingFrustum(Frustum frustum) {
    OgreJNI.Camera_setCullingFrustum(swigCPtr, this, Frustum.getCPtr(frustum), frustum);
  }

  public Frustum getCullingFrustum() {
    long cPtr = OgreJNI.Camera_getCullingFrustum(swigCPtr, this);
    return (cPtr == 0) ? null : new Frustum(cPtr, false);
  }

  public void forwardIntersect(Plane worldPlane, SWIGTYPE_p_Ogre__vectorT_Ogre__Vector4_t__type intersect3d) {
    OgreJNI.Camera_forwardIntersect(swigCPtr, this, Plane.getCPtr(worldPlane), worldPlane, SWIGTYPE_p_Ogre__vectorT_Ogre__Vector4_t__type.getCPtr(intersect3d));
  }

  public boolean isVisible(AxisAlignedBox bound, SWIGTYPE_p_Ogre__FrustumPlane culledBy) {
    return OgreJNI.Camera_isVisible__SWIG_0(swigCPtr, this, AxisAlignedBox.getCPtr(bound), bound, SWIGTYPE_p_Ogre__FrustumPlane.getCPtr(culledBy));
  }

  public boolean isVisible(AxisAlignedBox bound) {
    return OgreJNI.Camera_isVisible__SWIG_1(swigCPtr, this, AxisAlignedBox.getCPtr(bound), bound);
  }

  public boolean isVisible(Sphere bound, SWIGTYPE_p_Ogre__FrustumPlane culledBy) {
    return OgreJNI.Camera_isVisible__SWIG_2(swigCPtr, this, Sphere.getCPtr(bound), bound, SWIGTYPE_p_Ogre__FrustumPlane.getCPtr(culledBy));
  }

  public boolean isVisible(Sphere bound) {
    return OgreJNI.Camera_isVisible__SWIG_3(swigCPtr, this, Sphere.getCPtr(bound), bound);
  }

  public boolean isVisible(Vector3 vert, SWIGTYPE_p_Ogre__FrustumPlane culledBy) {
    return OgreJNI.Camera_isVisible__SWIG_4(swigCPtr, this, Vector3.getCPtr(vert), vert, SWIGTYPE_p_Ogre__FrustumPlane.getCPtr(culledBy));
  }

  public boolean isVisible(Vector3 vert) {
    return OgreJNI.Camera_isVisible__SWIG_5(swigCPtr, this, Vector3.getCPtr(vert), vert);
  }

  public Vector3 getWorldSpaceCorners() {
    long cPtr = OgreJNI.Camera_getWorldSpaceCorners(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public Plane getFrustumPlane(int plane) {
    return new Plane(OgreJNI.Camera_getFrustumPlane(swigCPtr, this, plane), false);
  }

  public boolean projectSphere(Sphere sphere, SWIGTYPE_p_float left, SWIGTYPE_p_float top, SWIGTYPE_p_float right, SWIGTYPE_p_float bottom) {
    return OgreJNI.Camera_projectSphere(swigCPtr, this, Sphere.getCPtr(sphere), sphere, SWIGTYPE_p_float.getCPtr(left), SWIGTYPE_p_float.getCPtr(top), SWIGTYPE_p_float.getCPtr(right), SWIGTYPE_p_float.getCPtr(bottom));
  }

  public float getNearClipDistance() {
    return OgreJNI.Camera_getNearClipDistance(swigCPtr, this);
  }

  public float getFarClipDistance() {
    return OgreJNI.Camera_getFarClipDistance(swigCPtr, this);
  }

  public Matrix4 getViewMatrix() {
    return new Matrix4(OgreJNI.Camera_getViewMatrix__SWIG_0(swigCPtr, this), false);
  }

  public Matrix4 getViewMatrix(boolean ownFrustumOnly) {
    return new Matrix4(OgreJNI.Camera_getViewMatrix__SWIG_1(swigCPtr, this, ownFrustumOnly), false);
  }

  public void setUseRenderingDistance(boolean use) {
    OgreJNI.Camera_setUseRenderingDistance(swigCPtr, this, use);
  }

  public boolean getUseRenderingDistance() {
    return OgreJNI.Camera_getUseRenderingDistance(swigCPtr, this);
  }

  public void synchroniseBaseSettingsWith(Camera cam) {
    OgreJNI.Camera_synchroniseBaseSettingsWith(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public Vector3 getPositionForViewUpdate() {
    return new Vector3(OgreJNI.Camera_getPositionForViewUpdate(swigCPtr, this), false);
  }

  public Quaternion getOrientationForViewUpdate() {
    return new Quaternion(OgreJNI.Camera_getOrientationForViewUpdate(swigCPtr, this), false);
  }

  public void setUseMinPixelSize(boolean enable) {
    OgreJNI.Camera_setUseMinPixelSize(swigCPtr, this, enable);
  }

  public boolean getUseMinPixelSize() {
    return OgreJNI.Camera_getUseMinPixelSize(swigCPtr, this);
  }

  public float getPixelDisplayRatio() {
    return OgreJNI.Camera_getPixelDisplayRatio(swigCPtr, this);
  }

  public String toString() {
    return OgreJNI.Camera_toString(swigCPtr, this);
  }

}
