/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class Particle {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Particle(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Particle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Particle(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setMOwnDimensions(boolean value) {
    OgreJNI.Particle_mOwnDimensions_set(swigCPtr, this, value);
  }

  public boolean getMOwnDimensions() {
    return OgreJNI.Particle_mOwnDimensions_get(swigCPtr, this);
  }

  public void setMWidth(float value) {
    OgreJNI.Particle_mWidth_set(swigCPtr, this, value);
  }

  public float getMWidth() {
    return OgreJNI.Particle_mWidth_get(swigCPtr, this);
  }

  public void setMHeight(float value) {
    OgreJNI.Particle_mHeight_set(swigCPtr, this, value);
  }

  public float getMHeight() {
    return OgreJNI.Particle_mHeight_get(swigCPtr, this);
  }

  public void setMRotation(Radian value) {
    OgreJNI.Particle_mRotation_set(swigCPtr, this, Radian.getCPtr(value), value);
  }

  public Radian getMRotation() {
    long cPtr = OgreJNI.Particle_mRotation_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Radian(cPtr, false);
  }

  public void setMPosition(Vector3 value) {
    OgreJNI.Particle_mPosition_set(swigCPtr, this, Vector3.getCPtr(value), value);
  }

  public Vector3 getMPosition() {
    long cPtr = OgreJNI.Particle_mPosition_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public void setMDirection(Vector3 value) {
    OgreJNI.Particle_mDirection_set(swigCPtr, this, Vector3.getCPtr(value), value);
  }

  public Vector3 getMDirection() {
    long cPtr = OgreJNI.Particle_mDirection_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public void setMColour(ColourValue value) {
    OgreJNI.Particle_mColour_set(swigCPtr, this, ColourValue.getCPtr(value), value);
  }

  public ColourValue getMColour() {
    long cPtr = OgreJNI.Particle_mColour_get(swigCPtr, this);
    return (cPtr == 0) ? null : new ColourValue(cPtr, false);
  }

  public void setMTimeToLive(float value) {
    OgreJNI.Particle_mTimeToLive_set(swigCPtr, this, value);
  }

  public float getMTimeToLive() {
    return OgreJNI.Particle_mTimeToLive_get(swigCPtr, this);
  }

  public void setMTotalTimeToLive(float value) {
    OgreJNI.Particle_mTotalTimeToLive_set(swigCPtr, this, value);
  }

  public float getMTotalTimeToLive() {
    return OgreJNI.Particle_mTotalTimeToLive_get(swigCPtr, this);
  }

  public void setMRotationSpeed(Radian value) {
    OgreJNI.Particle_mRotationSpeed_set(swigCPtr, this, Radian.getCPtr(value), value);
  }

  public Radian getMRotationSpeed() {
    long cPtr = OgreJNI.Particle_mRotationSpeed_get(swigCPtr, this);
    return (cPtr == 0) ? null : new Radian(cPtr, false);
  }

  public void setMParticleType(Particle.ParticleType value) {
    OgreJNI.Particle_mParticleType_set(swigCPtr, this, value.swigValue());
  }

  public Particle.ParticleType getMParticleType() {
    return Particle.ParticleType.swigToEnum(OgreJNI.Particle_mParticleType_get(swigCPtr, this));
  }

  public Particle() {
    this(OgreJNI.new_Particle(), true);
  }

  public void setDimensions(float width, float height) {
    OgreJNI.Particle_setDimensions(swigCPtr, this, width, height);
  }

  public boolean hasOwnDimensions() {
    return OgreJNI.Particle_hasOwnDimensions(swigCPtr, this);
  }

  public float getOwnWidth() {
    return OgreJNI.Particle_getOwnWidth(swigCPtr, this);
  }

  public float getOwnHeight() {
    return OgreJNI.Particle_getOwnHeight(swigCPtr, this);
  }

  public void setRotation(Radian rad) {
    OgreJNI.Particle_setRotation(swigCPtr, this, Radian.getCPtr(rad), rad);
  }

  public Radian getRotation() {
    return new Radian(OgreJNI.Particle_getRotation(swigCPtr, this), false);
  }

  public void _notifyOwner(ParticleSystem owner) {
    OgreJNI.Particle__notifyOwner(swigCPtr, this, ParticleSystem.getCPtr(owner), owner);
  }

  public void _notifyVisualData(ParticleVisualData vis) {
    OgreJNI.Particle__notifyVisualData(swigCPtr, this, ParticleVisualData.getCPtr(vis), vis);
  }

  public ParticleVisualData getVisualData() {
    long cPtr = OgreJNI.Particle_getVisualData(swigCPtr, this);
    return (cPtr == 0) ? null : new ParticleVisualData(cPtr, false);
  }

  public void resetDimensions() {
    OgreJNI.Particle_resetDimensions(swigCPtr, this);
  }

  public final static class ParticleType {
    public final static Particle.ParticleType Visual = new Particle.ParticleType("Visual");
    public final static Particle.ParticleType Emitter = new Particle.ParticleType("Emitter");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ParticleType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ParticleType.class + " with value " + swigValue);
    }

    private ParticleType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ParticleType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ParticleType(String swigName, ParticleType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ParticleType[] swigValues = { Visual, Emitter };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
