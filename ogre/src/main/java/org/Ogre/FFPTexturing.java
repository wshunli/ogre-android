/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class FFPTexturing extends SubRenderState {
  private transient long swigCPtr;

  protected FFPTexturing(long cPtr, boolean cMemoryOwn) {
    super(OgreRTShaderJNI.FFPTexturing_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FFPTexturing obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreRTShaderJNI.delete_FFPTexturing(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public FFPTexturing() {
    this(OgreRTShaderJNI.new_FFPTexturing(), true);
  }

  public int getExecutionOrder() {
    return OgreRTShaderJNI.FFPTexturing_getExecutionOrder(swigCPtr, this);
  }

  public void updateGpuProgramsParams(Renderable rend, Pass pass, SWIGTYPE_p_Ogre__AutoParamDataSource source, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t pLightList) {
    OgreRTShaderJNI.FFPTexturing_updateGpuProgramsParams(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass, SWIGTYPE_p_Ogre__AutoParamDataSource.getCPtr(source), SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(pLightList));
  }

  public void copyFrom(SubRenderState rhs) {
    OgreRTShaderJNI.FFPTexturing_copyFrom(swigCPtr, this, SubRenderState.getCPtr(rhs), rhs);
  }

  public boolean preAddToRenderState(RenderState renderState, Pass srcPass, Pass dstPass) {
    return OgreRTShaderJNI.FFPTexturing_preAddToRenderState(swigCPtr, this, RenderState.getCPtr(renderState), renderState, Pass.getCPtr(srcPass), srcPass, Pass.getCPtr(dstPass), dstPass);
  }

  public static void AddTextureSampleWrapperInvocation(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__UniformParameter_t textureSampler, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__UniformParameter_t textureSamplerState, GpuConstantType samplerType, SWIGTYPE_p_Ogre__RTShader__Function function, int groupOrder) {
    OgreRTShaderJNI.FFPTexturing_AddTextureSampleWrapperInvocation(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__UniformParameter_t.getCPtr(textureSampler), SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__UniformParameter_t.getCPtr(textureSamplerState), samplerType.swigValue(), SWIGTYPE_p_Ogre__RTShader__Function.getCPtr(function), groupOrder);
  }

  public static SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__Parameter_t GetSamplerWrapperParam(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__UniformParameter_t sampler, SWIGTYPE_p_Ogre__RTShader__Function function) {
    return new SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__Parameter_t(OgreRTShaderJNI.FFPTexturing_GetSamplerWrapperParam(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__RTShader__UniformParameter_t.getCPtr(sampler), SWIGTYPE_p_Ogre__RTShader__Function.getCPtr(function)), true);
  }

  public static void setType(String value) {
    OgreRTShaderJNI.FFPTexturing_Type_set(value);
  }

  public static String getType() {
    return OgreRTShaderJNI.FFPTexturing_Type_get();
  }

}
