/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class OgreRTShaderJNI {
  public final static native int VSOCP_LOW_get();
  public final static native int VSOCP_MEDIUM_get();
  public final static native int VSOCP_HIGH_get();
  public final static native long new_SGScriptTranslator();
  public final static native void SGScriptTranslator_translate(long jarg1, SGScriptTranslator jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3);
  public final static native long SGScriptTranslator_getGeneratedSubRenderState(long jarg1, SGScriptTranslator jarg1_, String jarg2);
  public final static native void delete_SGScriptTranslator(long jarg1);
  public final static native void delete_SubRenderState(long jarg1);
  public final static native int SubRenderState_getExecutionOrder(long jarg1, SubRenderState jarg1_);
  public final static native void SubRenderState_copyFrom(long jarg1, SubRenderState jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean SubRenderState_createCpuSubPrograms(long jarg1, SubRenderState jarg1_, long jarg2);
  public final static native void SubRenderState_updateGpuProgramsParams(long jarg1, SubRenderState jarg1_, long jarg2, Renderable jarg2_, long jarg3, Pass jarg3_, long jarg4, long jarg5);
  public final static native boolean SubRenderState_preAddToRenderState(long jarg1, SubRenderState jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native long SubRenderState_getAccessor__SWIG_0(long jarg1, SubRenderState jarg1_);
  public final static native void SubRenderStateAccessor_addSubRenderStateInstance(long jarg1, SubRenderStateAccessor jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native void SubRenderStateAccessor_removeSubRenderStateInstance(long jarg1, SubRenderStateAccessor jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native long SubRenderStateAccessor_getSubRenderStateInstanceSet__SWIG_0(long jarg1, SubRenderStateAccessor jarg1_);
  public final static native void delete_SubRenderStateAccessor(long jarg1);
  public final static native void delete_SubRenderStateFactory(long jarg1);
  public final static native long SubRenderStateFactory_createInstance__SWIG_0(long jarg1, SubRenderStateFactory jarg1_);
  public final static native long SubRenderStateFactory_createInstance__SWIG_1(long jarg1, SubRenderStateFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native long SubRenderStateFactory_createInstance__SWIG_2(long jarg1, SubRenderStateFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, TextureUnitState jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native long SubRenderStateFactory_createOrRetrieveInstance(long jarg1, SubRenderStateFactory jarg1_, long jarg2, SGScriptTranslator jarg2_);
  public final static native void SubRenderStateFactory_destroyInstance(long jarg1, SubRenderStateFactory jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native void SubRenderStateFactory_destroyAllInstances(long jarg1, SubRenderStateFactory jarg1_);
  public final static native void SubRenderStateFactory_writeInstance__SWIG_0(long jarg1, SubRenderStateFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native void SubRenderStateFactory_writeInstance__SWIG_1(long jarg1, SubRenderStateFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, TextureUnitState jarg4_, long jarg5, TextureUnitState jarg5_);
  public final static native void delete_ProgramWriter(long jarg1);
  public final static native void ProgramWriter_writeSourceCode(long jarg1, ProgramWriter jarg1_, long jarg2, long jarg3);
  public final static native String ProgramWriter_getTargetLanguage(long jarg1, ProgramWriter jarg1_);
  public final static native boolean ShaderGenerator_initialize();
  public final static native void ShaderGenerator_destroy();
  public final static native long ShaderGenerator_getSingleton();
  public final static native void ShaderGenerator_addSceneManager(long jarg1, ShaderGenerator jarg1_, long jarg2, SceneManager jarg2_);
  public final static native void ShaderGenerator_removeSceneManager(long jarg1, ShaderGenerator jarg1_, long jarg2, SceneManager jarg2_);
  public final static native long ShaderGenerator_getActiveSceneManager(long jarg1, ShaderGenerator jarg1_);
  public final static native void ShaderGenerator__setActiveSceneManager(long jarg1, ShaderGenerator jarg1_, long jarg2, SceneManager jarg2_);
  public final static native void ShaderGenerator_setTargetLanguage__SWIG_0(long jarg1, ShaderGenerator jarg1_, String jarg2, float jarg3);
  public final static native void ShaderGenerator_setTargetLanguage__SWIG_1(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native boolean ShaderGenerator_IsHlsl4(long jarg1, ShaderGenerator jarg1_);
  public final static native String ShaderGenerator_getTargetLanguage(long jarg1, ShaderGenerator jarg1_);
  public final static native float ShaderGenerator_getTargetLanguageVersion(long jarg1, ShaderGenerator jarg1_);
  public final static native void ShaderGenerator_setVertexShaderProfiles(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native String ShaderGenerator_getVertexShaderProfiles(long jarg1, ShaderGenerator jarg1_);
  public final static native long ShaderGenerator_getVertexShaderProfilesList(long jarg1, ShaderGenerator jarg1_);
  public final static native void ShaderGenerator_setFragmentShaderProfiles(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native String ShaderGenerator_getFragmentShaderProfiles(long jarg1, ShaderGenerator jarg1_);
  public final static native long ShaderGenerator_getFragmentShaderProfilesList(long jarg1, ShaderGenerator jarg1_);
  public final static native void ShaderGenerator_setShaderCachePath(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native String ShaderGenerator_getShaderCachePath(long jarg1, ShaderGenerator jarg1_);
  public final static native void ShaderGenerator_flushShaderCache(long jarg1, ShaderGenerator jarg1_);
  public final static native long ShaderGenerator_getRenderState__SWIG_0(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native long ShaderGenerator_createOrRetrieveRenderState(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native boolean ShaderGenerator_hasRenderState(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native long ShaderGenerator_getRenderState__SWIG_1(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4, int jarg5);
  public final static native void ShaderGenerator_addSubRenderStateFactory(long jarg1, ShaderGenerator jarg1_, long jarg2, SubRenderStateFactory jarg2_);
  public final static native long ShaderGenerator_getNumSubRenderStateFactories(long jarg1, ShaderGenerator jarg1_);
  public final static native long ShaderGenerator_getSubRenderStateFactory__SWIG_0(long jarg1, ShaderGenerator jarg1_, long jarg2);
  public final static native long ShaderGenerator_getSubRenderStateFactory__SWIG_1(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native void ShaderGenerator_removeSubRenderStateFactory(long jarg1, ShaderGenerator jarg1_, long jarg2, SubRenderStateFactory jarg2_);
  public final static native long ShaderGenerator_createSubRenderState(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native void ShaderGenerator_destroySubRenderState(long jarg1, ShaderGenerator jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean ShaderGenerator_hasShaderBasedTechnique__SWIG_0(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native boolean ShaderGenerator_hasShaderBasedTechnique__SWIG_1(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native boolean ShaderGenerator_createShaderBasedTechnique__SWIG_0(long jarg1, ShaderGenerator jarg1_, long jarg2, Material jarg2_, String jarg3, String jarg4, boolean jarg5);
  public final static native boolean ShaderGenerator_createShaderBasedTechnique__SWIG_1(long jarg1, ShaderGenerator jarg1_, long jarg2, Material jarg2_, String jarg3, String jarg4);
  public final static native boolean ShaderGenerator_createShaderBasedTechnique__SWIG_2(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, boolean jarg6);
  public final static native boolean ShaderGenerator_createShaderBasedTechnique__SWIG_3(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native boolean ShaderGenerator_removeShaderBasedTechnique(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native boolean ShaderGenerator_removeAllShaderBasedTechniques__SWIG_0(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3);
  public final static native boolean ShaderGenerator_cloneShaderBasedTechniques(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4, String jarg5);
  public final static native void ShaderGenerator_removeAllShaderBasedTechniques__SWIG_1(long jarg1, ShaderGenerator jarg1_);
  public final static native void ShaderGenerator_createScheme(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native void ShaderGenerator_invalidateScheme(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native boolean ShaderGenerator_validateScheme(long jarg1, ShaderGenerator jarg1_, String jarg2);
  public final static native void ShaderGenerator_invalidateMaterial(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native boolean ShaderGenerator_validateMaterial(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native void ShaderGenerator_invalidateMaterialIlluminationPasses(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native boolean ShaderGenerator_validateMaterialIlluminationPasses(long jarg1, ShaderGenerator jarg1_, String jarg2, String jarg3, String jarg4);
  public final static native long ShaderGenerator_getMaterialSerializerListener(long jarg1, ShaderGenerator jarg1_);
  public final static native long ShaderGenerator_getVertexShaderCount(long jarg1, ShaderGenerator jarg1_);
  public final static native long ShaderGenerator_getFragmentShaderCount(long jarg1, ShaderGenerator jarg1_);
  public final static native void ShaderGenerator_setVertexShaderOutputsCompactPolicy(long jarg1, ShaderGenerator jarg1_, int jarg2);
  public final static native int ShaderGenerator_getVertexShaderOutputsCompactPolicy(long jarg1, ShaderGenerator jarg1_);
  public final static native void ShaderGenerator_setCreateShaderOverProgrammablePass(long jarg1, ShaderGenerator jarg1_, boolean jarg2);
  public final static native boolean ShaderGenerator_getCreateShaderOverProgrammablePass(long jarg1, ShaderGenerator jarg1_);
  public final static native long ShaderGenerator_getRTShaderSchemeCount(long jarg1, ShaderGenerator jarg1_);
  public final static native String ShaderGenerator_getRTShaderScheme(long jarg1, ShaderGenerator jarg1_, long jarg2);
  public final static native void ShaderGenerator_DEFAULT_SCHEME_NAME_set(String jarg1);
  public final static native String ShaderGenerator_DEFAULT_SCHEME_NAME_get();
  public final static native long new_RenderState();
  public final static native void delete_RenderState(long jarg1);
  public final static native void RenderState_reset(long jarg1, RenderState jarg1_);
  public final static native void RenderState_addTemplateSubRenderState(long jarg1, RenderState jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native void RenderState_removeTemplateSubRenderState(long jarg1, RenderState jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native long RenderState_getTemplateSubRenderStateList(long jarg1, RenderState jarg1_);
  public final static native void RenderState_setLightCount(long jarg1, RenderState jarg1_, long jarg2);
  public final static native void RenderState_getLightCount(long jarg1, RenderState jarg1_, long jarg2);
  public final static native void RenderState_setLightCountAutoUpdate(long jarg1, RenderState jarg1_, boolean jarg2);
  public final static native boolean RenderState_getLightCountAutoUpdate(long jarg1, RenderState jarg1_);
  public final static native long new_TargetRenderState();
  public final static native void delete_TargetRenderState(long jarg1);
  public final static native void TargetRenderState_link(long jarg1, TargetRenderState jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void TargetRenderState_updateGpuProgramsParams(long jarg1, TargetRenderState jarg1_, long jarg2, Renderable jarg2_, long jarg3, Pass jarg3_, long jarg4, long jarg5);
  public final static native int FFPTransform_getExecutionOrder(long jarg1, FFPTransform jarg1_);
  public final static native void FFPTransform_copyFrom(long jarg1, FFPTransform jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean FFPTransform_createCpuSubPrograms(long jarg1, FFPTransform jarg1_, long jarg2);
  public final static native boolean FFPTransform_preAddToRenderState(long jarg1, FFPTransform jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void FFPTransform_Type_set(String jarg1);
  public final static native String FFPTransform_Type_get();
  public final static native long new_FFPTransform();
  public final static native void delete_FFPTransform(long jarg1);
  public final static native long FFPTransformFactory_createInstance(long jarg1, FFPTransformFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void FFPTransformFactory_writeInstance(long jarg1, FFPTransformFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native long new_FFPTransformFactory();
  public final static native void delete_FFPTransformFactory(long jarg1);
  public final static native int FFPColour_SF_VS_INPUT_DIFFUSE_get();
  public final static native int FFPColour_SF_VS_INPUT_SPECULAR_get();
  public final static native int FFPColour_SF_VS_OUTPUT_DIFFUSE_get();
  public final static native int FFPColour_SF_VS_OUTPUT_SPECULAR_get();
  public final static native int FFPColour_SF_PS_INPUT_DIFFUSE_get();
  public final static native int FFPColour_SF_PS_INPUT_SPECULAR_get();
  public final static native int FFPColour_SF_PS_OUTPUT_DIFFUSE_get();
  public final static native int FFPColour_SF_PS_OUTPUT_SPECULAR_get();
  public final static native long new_FFPColour();
  public final static native int FFPColour_getExecutionOrder(long jarg1, FFPColour jarg1_);
  public final static native void FFPColour_copyFrom(long jarg1, FFPColour jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean FFPColour_preAddToRenderState(long jarg1, FFPColour jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void FFPColour_setResolveStageFlags(long jarg1, FFPColour jarg1_, long jarg2);
  public final static native long FFPColour_getResolveStageFlags(long jarg1, FFPColour jarg1_);
  public final static native void FFPColour_addResolveStageMask(long jarg1, FFPColour jarg1_, long jarg2);
  public final static native void FFPColour_removeResolveStageMask(long jarg1, FFPColour jarg1_, long jarg2);
  public final static native void FFPColour_Type_set(String jarg1);
  public final static native String FFPColour_Type_get();
  public final static native void delete_FFPColour(long jarg1);
  public final static native long FFPColourFactory_createInstance(long jarg1, FFPColourFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void FFPColourFactory_writeInstance(long jarg1, FFPColourFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native long new_FFPColourFactory();
  public final static native void delete_FFPColourFactory(long jarg1);
  public final static native long new_FFPLighting();
  public final static native int FFPLighting_getExecutionOrder(long jarg1, FFPLighting jarg1_);
  public final static native void FFPLighting_updateGpuProgramsParams(long jarg1, FFPLighting jarg1_, long jarg2, Renderable jarg2_, long jarg3, Pass jarg3_, long jarg4, long jarg5);
  public final static native void FFPLighting_copyFrom(long jarg1, FFPLighting jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean FFPLighting_preAddToRenderState(long jarg1, FFPLighting jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void FFPLighting_Type_set(String jarg1);
  public final static native String FFPLighting_Type_get();
  public final static native void delete_FFPLighting(long jarg1);
  public final static native long FFPLightingFactory_createInstance(long jarg1, FFPLightingFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void FFPLightingFactory_writeInstance(long jarg1, FFPLightingFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native long new_FFPLightingFactory();
  public final static native void delete_FFPLightingFactory(long jarg1);
  public final static native long new_FFPTexturing();
  public final static native int FFPTexturing_getExecutionOrder(long jarg1, FFPTexturing jarg1_);
  public final static native void FFPTexturing_updateGpuProgramsParams(long jarg1, FFPTexturing jarg1_, long jarg2, Renderable jarg2_, long jarg3, Pass jarg3_, long jarg4, long jarg5);
  public final static native void FFPTexturing_copyFrom(long jarg1, FFPTexturing jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean FFPTexturing_preAddToRenderState(long jarg1, FFPTexturing jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void FFPTexturing_AddTextureSampleWrapperInvocation(long jarg1, long jarg2, int jarg3, long jarg4, int jarg5);
  public final static native long FFPTexturing_GetSamplerWrapperParam(long jarg1, long jarg2);
  public final static native void FFPTexturing_Type_set(String jarg1);
  public final static native String FFPTexturing_Type_get();
  public final static native void delete_FFPTexturing(long jarg1);
  public final static native long FFPTexturingFactory_createInstance(long jarg1, FFPTexturingFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void FFPTexturingFactory_writeInstance(long jarg1, FFPTexturingFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native long new_FFPTexturingFactory();
  public final static native void delete_FFPTexturingFactory(long jarg1);
  public final static native int FFPFog_CM_PER_VERTEX_get();
  public final static native int FFPFog_CM_PER_PIXEL_get();
  public final static native long new_FFPFog();
  public final static native int FFPFog_getExecutionOrder(long jarg1, FFPFog jarg1_);
  public final static native void FFPFog_updateGpuProgramsParams(long jarg1, FFPFog jarg1_, long jarg2, Renderable jarg2_, long jarg3, Pass jarg3_, long jarg4, long jarg5);
  public final static native void FFPFog_copyFrom(long jarg1, FFPFog jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean FFPFog_preAddToRenderState(long jarg1, FFPFog jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void FFPFog_setFogProperties(long jarg1, FFPFog jarg1_, int jarg2, long jarg3, ColourValue jarg3_, float jarg4, float jarg5, float jarg6);
  public final static native void FFPFog_setCalcMode(long jarg1, FFPFog jarg1_, int jarg2);
  public final static native int FFPFog_getCalcMode(long jarg1, FFPFog jarg1_);
  public final static native void FFPFog_Type_set(String jarg1);
  public final static native String FFPFog_Type_get();
  public final static native void delete_FFPFog(long jarg1);
  public final static native long FFPFogFactory_createInstance(long jarg1, FFPFogFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void FFPFogFactory_writeInstance(long jarg1, FFPFogFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native long new_FFPFogFactory();
  public final static native void delete_FFPFogFactory(long jarg1);
  public final static native String SGX_LIB_PERPIXELLIGHTING_get();
  public final static native String SGX_FUNC_TRANSFORMNORMAL_get();
  public final static native String SGX_FUNC_TRANSFORMPOSITION_get();
  public final static native String SGX_FUNC_LIGHT_DIRECTIONAL_DIFFUSE_get();
  public final static native String SGX_FUNC_LIGHT_DIRECTIONAL_DIFFUSESPECULAR_get();
  public final static native String SGX_FUNC_LIGHT_POINT_DIFFUSE_get();
  public final static native String SGX_FUNC_LIGHT_POINT_DIFFUSESPECULAR_get();
  public final static native String SGX_FUNC_LIGHT_SPOT_DIFFUSE_get();
  public final static native String SGX_FUNC_LIGHT_SPOT_DIFFUSESPECULAR_get();
  public final static native long new_PerPixelLighting();
  public final static native int PerPixelLighting_getExecutionOrder(long jarg1, PerPixelLighting jarg1_);
  public final static native void PerPixelLighting_updateGpuProgramsParams(long jarg1, PerPixelLighting jarg1_, long jarg2, Renderable jarg2_, long jarg3, Pass jarg3_, long jarg4, long jarg5);
  public final static native void PerPixelLighting_copyFrom(long jarg1, PerPixelLighting jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean PerPixelLighting_preAddToRenderState(long jarg1, PerPixelLighting jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void PerPixelLighting_Type_set(String jarg1);
  public final static native String PerPixelLighting_Type_get();
  public final static native void delete_PerPixelLighting(long jarg1);
  public final static native long PerPixelLightingFactory_createInstance(long jarg1, PerPixelLightingFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void PerPixelLightingFactory_writeInstance(long jarg1, PerPixelLightingFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native long new_PerPixelLightingFactory();
  public final static native void delete_PerPixelLightingFactory(long jarg1);
  public final static native String SGX_LIB_NORMALMAPLIGHTING_get();
  public final static native String SGX_FUNC_CONSTRUCT_TBNMATRIX_get();
  public final static native String SGX_FUNC_FETCHNORMAL_get();
  public final static native long new_NormalMapLighting();
  public final static native void NormalMapLighting_updateGpuProgramsParams(long jarg1, NormalMapLighting jarg1_, long jarg2, Renderable jarg2_, long jarg3, Pass jarg3_, long jarg4, long jarg5);
  public final static native void NormalMapLighting_copyFrom(long jarg1, NormalMapLighting jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean NormalMapLighting_preAddToRenderState(long jarg1, NormalMapLighting jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void NormalMapLighting_setTexCoordIndex(long jarg1, NormalMapLighting jarg1_, long jarg2);
  public final static native long NormalMapLighting_getTexCoordIndex(long jarg1, NormalMapLighting jarg1_);
  public final static native void NormalMapLighting_Type_set(String jarg1);
  public final static native String NormalMapLighting_Type_get();
  public final static native void NormalMapLighting_setNormalMapSpace(long jarg1, NormalMapLighting jarg1_, int jarg2);
  public final static native int NormalMapLighting_getNormalMapSpace(long jarg1, NormalMapLighting jarg1_);
  public final static native void NormalMapLighting_setNormalMapTextureName(long jarg1, NormalMapLighting jarg1_, String jarg2);
  public final static native String NormalMapLighting_getNormalMapTextureName(long jarg1, NormalMapLighting jarg1_);
  public final static native void NormalMapLighting_setNormalMapFiltering(long jarg1, NormalMapLighting jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void NormalMapLighting_getNormalMapFiltering(long jarg1, NormalMapLighting jarg1_, long jarg2, long jarg3, long jarg4);
  public final static native void NormalMapLighting_setNormalMapAnisotropy(long jarg1, NormalMapLighting jarg1_, long jarg2);
  public final static native long NormalMapLighting_getNormalMapAnisotropy(long jarg1, NormalMapLighting jarg1_);
  public final static native void NormalMapLighting_setNormalMapMipBias(long jarg1, NormalMapLighting jarg1_, float jarg2);
  public final static native float NormalMapLighting_getNormalMapMipBias(long jarg1, NormalMapLighting jarg1_);
  public final static native void delete_NormalMapLighting(long jarg1);
  public final static native long NormalMapLightingFactory_createInstance(long jarg1, NormalMapLightingFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void NormalMapLightingFactory_writeInstance(long jarg1, NormalMapLightingFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native long new_NormalMapLightingFactory();
  public final static native void delete_NormalMapLightingFactory(long jarg1);
  public final static native String SGX_LIB_INTEGRATEDPSSM_get();
  public final static native String SGX_FUNC_COMPUTE_SHADOW_COLOUR3_get();
  public final static native String SGX_FUNC_APPLYSHADOWFACTOR_DIFFUSE_get();
  public final static native String SGX_FUNC_MODULATE_SCALAR_get();
  public final static native long new_IntegratedPSSM3();
  public final static native int IntegratedPSSM3_getExecutionOrder(long jarg1, IntegratedPSSM3 jarg1_);
  public final static native void IntegratedPSSM3_updateGpuProgramsParams(long jarg1, IntegratedPSSM3 jarg1_, long jarg2, Renderable jarg2_, long jarg3, Pass jarg3_, long jarg4, long jarg5);
  public final static native void IntegratedPSSM3_copyFrom(long jarg1, IntegratedPSSM3 jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native boolean IntegratedPSSM3_preAddToRenderState(long jarg1, IntegratedPSSM3 jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void IntegratedPSSM3_setSplitPoints(long jarg1, IntegratedPSSM3 jarg1_, long jarg2);
  public final static native void IntegratedPSSM3_Type_set(String jarg1);
  public final static native String IntegratedPSSM3_Type_get();
  public final static native void delete_IntegratedPSSM3(long jarg1);
  public final static native long IntegratedPSSM3Factory_createInstance(long jarg1, IntegratedPSSM3Factory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native long new_IntegratedPSSM3Factory();
  public final static native void delete_IntegratedPSSM3Factory(long jarg1);
  public final static native String SGX_LIB_LAYEREDBLENDING_get();
  public final static native int LayeredBlending_LB_Invalid_get();
  public final static native int LayeredBlending_SM_Invalid_get();
  public final static native long new_LayeredBlending_TextureBlend();
  public final static native void LayeredBlending_TextureBlend_blendMode_set(long jarg1, LayeredBlending.TextureBlend jarg1_, int jarg2);
  public final static native int LayeredBlending_TextureBlend_blendMode_get(long jarg1, LayeredBlending.TextureBlend jarg1_);
  public final static native void LayeredBlending_TextureBlend_sourceModifier_set(long jarg1, LayeredBlending.TextureBlend jarg1_, int jarg2);
  public final static native int LayeredBlending_TextureBlend_sourceModifier_get(long jarg1, LayeredBlending.TextureBlend jarg1_);
  public final static native void LayeredBlending_TextureBlend_customNum_set(long jarg1, LayeredBlending.TextureBlend jarg1_, int jarg2);
  public final static native int LayeredBlending_TextureBlend_customNum_get(long jarg1, LayeredBlending.TextureBlend jarg1_);
  public final static native void LayeredBlending_TextureBlend_modControlParam_set(long jarg1, LayeredBlending.TextureBlend jarg1_, long jarg2);
  public final static native long LayeredBlending_TextureBlend_modControlParam_get(long jarg1, LayeredBlending.TextureBlend jarg1_);
  public final static native void delete_LayeredBlending_TextureBlend(long jarg1);
  public final static native long new_LayeredBlending();
  public final static native void LayeredBlending_setBlendMode(long jarg1, LayeredBlending jarg1_, int jarg2, int jarg3);
  public final static native int LayeredBlending_getBlendMode(long jarg1, LayeredBlending jarg1_, int jarg2);
  public final static native void LayeredBlending_setSourceModifier(long jarg1, LayeredBlending jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native boolean LayeredBlending_getSourceModifier(long jarg1, LayeredBlending jarg1_, int jarg2, long jarg3, long jarg4);
  public final static native void LayeredBlending_copyFrom(long jarg1, LayeredBlending jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native void LayeredBlending_Type_set(String jarg1);
  public final static native String LayeredBlending_Type_get();
  public final static native void delete_LayeredBlending(long jarg1);
  public final static native long LayeredBlendingFactory_createInstance(long jarg1, LayeredBlendingFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, TextureUnitState jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void LayeredBlendingFactory_writeInstance(long jarg1, LayeredBlendingFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, TextureUnitState jarg4_, long jarg5, TextureUnitState jarg5_);
  public final static native long new_LayeredBlendingFactory();
  public final static native void delete_LayeredBlendingFactory(long jarg1);
  public final static native int HS_MAX_WEIGHT_COUNT_get();
  public final static native long new_HardwareSkinning_SkinningData();
  public final static native void HardwareSkinning_SkinningData_isValid_set(long jarg1, HardwareSkinning.SkinningData jarg1_, boolean jarg2);
  public final static native boolean HardwareSkinning_SkinningData_isValid_get(long jarg1, HardwareSkinning.SkinningData jarg1_);
  public final static native void HardwareSkinning_SkinningData_maxBoneCount_set(long jarg1, HardwareSkinning.SkinningData jarg1_, int jarg2);
  public final static native int HardwareSkinning_SkinningData_maxBoneCount_get(long jarg1, HardwareSkinning.SkinningData jarg1_);
  public final static native void HardwareSkinning_SkinningData_maxWeightCount_set(long jarg1, HardwareSkinning.SkinningData jarg1_, int jarg2);
  public final static native int HardwareSkinning_SkinningData_maxWeightCount_get(long jarg1, HardwareSkinning.SkinningData jarg1_);
  public final static native void HardwareSkinning_SkinningData_skinningType_set(long jarg1, HardwareSkinning.SkinningData jarg1_, int jarg2);
  public final static native int HardwareSkinning_SkinningData_skinningType_get(long jarg1, HardwareSkinning.SkinningData jarg1_);
  public final static native void HardwareSkinning_SkinningData_correctAntipodalityHandling_set(long jarg1, HardwareSkinning.SkinningData jarg1_, boolean jarg2);
  public final static native boolean HardwareSkinning_SkinningData_correctAntipodalityHandling_get(long jarg1, HardwareSkinning.SkinningData jarg1_);
  public final static native void HardwareSkinning_SkinningData_scalingShearingSupport_set(long jarg1, HardwareSkinning.SkinningData jarg1_, boolean jarg2);
  public final static native boolean HardwareSkinning_SkinningData_scalingShearingSupport_get(long jarg1, HardwareSkinning.SkinningData jarg1_);
  public final static native void delete_HardwareSkinning_SkinningData(long jarg1);
  public final static native long new_HardwareSkinning();
  public final static native int HardwareSkinning_getExecutionOrder(long jarg1, HardwareSkinning jarg1_);
  public final static native void HardwareSkinning_copyFrom(long jarg1, HardwareSkinning jarg1_, long jarg2, SubRenderState jarg2_);
  public final static native void HardwareSkinning_setHardwareSkinningParam__SWIG_0(long jarg1, HardwareSkinning jarg1_, int jarg2, int jarg3, int jarg4, boolean jarg5, boolean jarg6);
  public final static native void HardwareSkinning_setHardwareSkinningParam__SWIG_1(long jarg1, HardwareSkinning jarg1_, int jarg2, int jarg3, int jarg4, boolean jarg5);
  public final static native void HardwareSkinning_setHardwareSkinningParam__SWIG_2(long jarg1, HardwareSkinning jarg1_, int jarg2, int jarg3, int jarg4);
  public final static native void HardwareSkinning_setHardwareSkinningParam__SWIG_3(long jarg1, HardwareSkinning jarg1_, int jarg2, int jarg3);
  public final static native int HardwareSkinning_getBoneCount(long jarg1, HardwareSkinning jarg1_);
  public final static native int HardwareSkinning_getWeightCount(long jarg1, HardwareSkinning jarg1_);
  public final static native int HardwareSkinning_getSkinningType(long jarg1, HardwareSkinning jarg1_);
  public final static native boolean HardwareSkinning_hasCorrectAntipodalityHandling(long jarg1, HardwareSkinning jarg1_);
  public final static native boolean HardwareSkinning_hasScalingShearingSupport(long jarg1, HardwareSkinning jarg1_);
  public final static native boolean HardwareSkinning_preAddToRenderState(long jarg1, HardwareSkinning jarg1_, long jarg2, RenderState jarg2_, long jarg3, Pass jarg3_, long jarg4, Pass jarg4_);
  public final static native void HardwareSkinning__setCreator(long jarg1, HardwareSkinning jarg1_, long jarg2, HardwareSkinningFactory jarg2_);
  public final static native void HardwareSkinning_Type_set(String jarg1);
  public final static native String HardwareSkinning_Type_get();
  public final static native void delete_HardwareSkinning(long jarg1);
  public final static native long new_HardwareSkinningFactory();
  public final static native void delete_HardwareSkinningFactory(long jarg1);
  public final static native long HardwareSkinningFactory_createInstance(long jarg1, HardwareSkinningFactory jarg1_, long jarg2, ScriptCompiler jarg2_, long jarg3, PropertyAbstractNode jarg3_, long jarg4, Pass jarg4_, long jarg5, SGScriptTranslator jarg5_);
  public final static native void HardwareSkinningFactory_writeInstance(long jarg1, HardwareSkinningFactory jarg1_, long jarg2, MaterialSerializer jarg2_, long jarg3, SubRenderState jarg3_, long jarg4, Pass jarg4_, long jarg5, Pass jarg5_);
  public final static native void HardwareSkinningFactory_setCustomShadowCasterMaterials(long jarg1, HardwareSkinningFactory jarg1_, int jarg2, long jarg3, MaterialPtr jarg3_, long jarg4, MaterialPtr jarg4_, long jarg5, MaterialPtr jarg5_, long jarg6, MaterialPtr jarg6_);
  public final static native void HardwareSkinningFactory_setCustomShadowReceiverMaterials(long jarg1, HardwareSkinningFactory jarg1_, int jarg2, long jarg3, MaterialPtr jarg3_, long jarg4, MaterialPtr jarg4_, long jarg5, MaterialPtr jarg5_, long jarg6, MaterialPtr jarg6_);
  public final static native long HardwareSkinningFactory_getCustomShadowCasterMaterial(long jarg1, HardwareSkinningFactory jarg1_, int jarg2, int jarg3);
  public final static native long HardwareSkinningFactory_getCustomShadowReceiverMaterial(long jarg1, HardwareSkinningFactory jarg1_, int jarg2, int jarg3);
  public final static native void HardwareSkinningFactory_prepareEntityForSkinning__SWIG_0(long jarg1, HardwareSkinningFactory jarg1_, long jarg2, Entity jarg2_, int jarg3, boolean jarg4, boolean jarg5);
  public final static native void HardwareSkinningFactory_prepareEntityForSkinning__SWIG_1(long jarg1, HardwareSkinningFactory jarg1_, long jarg2, Entity jarg2_, int jarg3, boolean jarg4);
  public final static native void HardwareSkinningFactory_prepareEntityForSkinning__SWIG_2(long jarg1, HardwareSkinningFactory jarg1_, long jarg2, Entity jarg2_, int jarg3);
  public final static native void HardwareSkinningFactory_prepareEntityForSkinning__SWIG_3(long jarg1, HardwareSkinningFactory jarg1_, long jarg2, Entity jarg2_);
  public final static native int HardwareSkinningFactory_getMaxCalculableBoneCount(long jarg1, HardwareSkinningFactory jarg1_);
  public final static native void HardwareSkinningFactory_setMaxCalculableBoneCount(long jarg1, HardwareSkinningFactory jarg1_, int jarg2);
  public final static native long HardwareSkinningFactory_getSingleton();
  public final static native void SGMaterialSerializerListener_materialEventRaised(long jarg1, SGMaterialSerializerListener jarg1_, long jarg2, MaterialSerializer jarg2_, int jarg3, long jarg4, long jarg5, Material jarg5_);
  public final static native void SGMaterialSerializerListener_techniqueEventRaised(long jarg1, SGMaterialSerializerListener jarg1_, long jarg2, MaterialSerializer jarg2_, int jarg3, long jarg4, long jarg5, Technique jarg5_);
  public final static native void SGMaterialSerializerListener_passEventRaised(long jarg1, SGMaterialSerializerListener jarg1_, long jarg2, MaterialSerializer jarg2_, int jarg3, long jarg4, long jarg5, Pass jarg5_);
  public final static native void SGMaterialSerializerListener_textureUnitStateEventRaised(long jarg1, SGMaterialSerializerListener jarg1_, long jarg2, MaterialSerializer jarg2_, int jarg3, long jarg4, long jarg5, TextureUnitState jarg5_);
  public final static native long TargetRenderState_SWIGUpcast(long jarg1);
  public final static native long FFPTransform_SWIGUpcast(long jarg1);
  public final static native long FFPTransformFactory_SWIGUpcast(long jarg1);
  public final static native long FFPColour_SWIGUpcast(long jarg1);
  public final static native long FFPColourFactory_SWIGUpcast(long jarg1);
  public final static native long FFPLighting_SWIGUpcast(long jarg1);
  public final static native long FFPLightingFactory_SWIGUpcast(long jarg1);
  public final static native long FFPTexturing_SWIGUpcast(long jarg1);
  public final static native long FFPTexturingFactory_SWIGUpcast(long jarg1);
  public final static native long FFPFog_SWIGUpcast(long jarg1);
  public final static native long FFPFogFactory_SWIGUpcast(long jarg1);
  public final static native long PerPixelLighting_SWIGUpcast(long jarg1);
  public final static native long PerPixelLightingFactory_SWIGUpcast(long jarg1);
  public final static native long NormalMapLighting_SWIGUpcast(long jarg1);
  public final static native long NormalMapLightingFactory_SWIGUpcast(long jarg1);
  public final static native long IntegratedPSSM3_SWIGUpcast(long jarg1);
  public final static native long IntegratedPSSM3Factory_SWIGUpcast(long jarg1);
  public final static native long LayeredBlending_SWIGUpcast(long jarg1);
  public final static native long LayeredBlendingFactory_SWIGUpcast(long jarg1);
  public final static native long HardwareSkinning_SWIGUpcast(long jarg1);
  public final static native long HardwareSkinningFactory_SWIGUpcast(long jarg1);
  public final static native long SGMaterialSerializerListener_SWIGUpcast(long jarg1);
}
