/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class Vector3 {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Vector3(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Vector3 obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Vector3(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setX(float value) {
    OgreJNI.Vector3_x_set(swigCPtr, this, value);
  }

  public float getX() {
    return OgreJNI.Vector3_x_get(swigCPtr, this);
  }

  public void setY(float value) {
    OgreJNI.Vector3_y_set(swigCPtr, this, value);
  }

  public float getY() {
    return OgreJNI.Vector3_y_get(swigCPtr, this);
  }

  public void setZ(float value) {
    OgreJNI.Vector3_z_set(swigCPtr, this, value);
  }

  public float getZ() {
    return OgreJNI.Vector3_z_get(swigCPtr, this);
  }

  public Vector3() {
    this(OgreJNI.new_Vector3__SWIG_0(), true);
  }

  public Vector3(float fX, float fY, float fZ) {
    this(OgreJNI.new_Vector3__SWIG_1(fX, fY, fZ), true);
  }

  public Vector3(SWIGTYPE_p_float afCoordinate) {
    this(OgreJNI.new_Vector3__SWIG_2(SWIGTYPE_p_float.getCPtr(afCoordinate)), true);
  }

  public Vector3(SWIGTYPE_p_int afCoordinate) {
    this(OgreJNI.new_Vector3__SWIG_3(SWIGTYPE_p_int.getCPtr(afCoordinate)), true);
  }

  public Vector3(float scaler) {
    this(OgreJNI.new_Vector3__SWIG_5(scaler), true);
  }

  public Vector2 xy() {
    return new Vector2(OgreJNI.Vector3_xy(swigCPtr, this), true);
  }

  public void swap(Vector3 other) {
    OgreJNI.Vector3_swap(swigCPtr, this, Vector3.getCPtr(other), other);
  }

  public float __getitem__(long i) {
    return OgreJNI.Vector3___getitem____SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_float ptr() {
    long cPtr = OgreJNI.Vector3_ptr__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public float length() {
    return OgreJNI.Vector3_length(swigCPtr, this);
  }

  public float squaredLength() {
    return OgreJNI.Vector3_squaredLength(swigCPtr, this);
  }

  public float distance(Vector3 rhs) {
    return OgreJNI.Vector3_distance(swigCPtr, this, Vector3.getCPtr(rhs), rhs);
  }

  public float squaredDistance(Vector3 rhs) {
    return OgreJNI.Vector3_squaredDistance(swigCPtr, this, Vector3.getCPtr(rhs), rhs);
  }

  public float dotProduct(Vector3 vec) {
    return OgreJNI.Vector3_dotProduct(swigCPtr, this, Vector3.getCPtr(vec), vec);
  }

  public float absDotProduct(Vector3 vec) {
    return OgreJNI.Vector3_absDotProduct(swigCPtr, this, Vector3.getCPtr(vec), vec);
  }

  public float normalise() {
    return OgreJNI.Vector3_normalise(swigCPtr, this);
  }

  public Vector3 crossProduct(Vector3 rkVector) {
    return new Vector3(OgreJNI.Vector3_crossProduct(swigCPtr, this, Vector3.getCPtr(rkVector), rkVector), true);
  }

  public Vector3 midPoint(Vector3 vec) {
    return new Vector3(OgreJNI.Vector3_midPoint(swigCPtr, this, Vector3.getCPtr(vec), vec), true);
  }

  public void makeFloor(Vector3 cmp) {
    OgreJNI.Vector3_makeFloor(swigCPtr, this, Vector3.getCPtr(cmp), cmp);
  }

  public void makeCeil(Vector3 cmp) {
    OgreJNI.Vector3_makeCeil(swigCPtr, this, Vector3.getCPtr(cmp), cmp);
  }

  public Vector3 perpendicular() {
    return new Vector3(OgreJNI.Vector3_perpendicular(swigCPtr, this), true);
  }

  public Vector3 randomDeviant(Radian angle, Vector3 up) {
    return new Vector3(OgreJNI.Vector3_randomDeviant__SWIG_0(swigCPtr, this, Radian.getCPtr(angle), angle, Vector3.getCPtr(up), up), true);
  }

  public Vector3 randomDeviant(Radian angle) {
    return new Vector3(OgreJNI.Vector3_randomDeviant__SWIG_1(swigCPtr, this, Radian.getCPtr(angle), angle), true);
  }

  public Radian angleBetween(Vector3 dest) {
    return new Radian(OgreJNI.Vector3_angleBetween(swigCPtr, this, Vector3.getCPtr(dest), dest), true);
  }

  public Quaternion getRotationTo(Vector3 dest, Vector3 fallbackAxis) {
    return new Quaternion(OgreJNI.Vector3_getRotationTo__SWIG_0(swigCPtr, this, Vector3.getCPtr(dest), dest, Vector3.getCPtr(fallbackAxis), fallbackAxis), true);
  }

  public Quaternion getRotationTo(Vector3 dest) {
    return new Quaternion(OgreJNI.Vector3_getRotationTo__SWIG_1(swigCPtr, this, Vector3.getCPtr(dest), dest), true);
  }

  public boolean isZeroLength() {
    return OgreJNI.Vector3_isZeroLength(swigCPtr, this);
  }

  public Vector3 normalisedCopy() {
    return new Vector3(OgreJNI.Vector3_normalisedCopy(swigCPtr, this), true);
  }

  public Vector3 reflect(Vector3 normal) {
    return new Vector3(OgreJNI.Vector3_reflect(swigCPtr, this, Vector3.getCPtr(normal), normal), true);
  }

  public boolean positionEquals(Vector3 rhs, float tolerance) {
    return OgreJNI.Vector3_positionEquals__SWIG_0(swigCPtr, this, Vector3.getCPtr(rhs), rhs, tolerance);
  }

  public boolean positionEquals(Vector3 rhs) {
    return OgreJNI.Vector3_positionEquals__SWIG_1(swigCPtr, this, Vector3.getCPtr(rhs), rhs);
  }

  public boolean positionCloses(Vector3 rhs, float tolerance) {
    return OgreJNI.Vector3_positionCloses__SWIG_0(swigCPtr, this, Vector3.getCPtr(rhs), rhs, tolerance);
  }

  public boolean positionCloses(Vector3 rhs) {
    return OgreJNI.Vector3_positionCloses__SWIG_1(swigCPtr, this, Vector3.getCPtr(rhs), rhs);
  }

  public boolean directionEquals(Vector3 rhs, Radian tolerance) {
    return OgreJNI.Vector3_directionEquals(swigCPtr, this, Vector3.getCPtr(rhs), rhs, Radian.getCPtr(tolerance), tolerance);
  }

  public boolean isNaN() {
    return OgreJNI.Vector3_isNaN(swigCPtr, this);
  }

  public Vector3 primaryAxis() {
    return new Vector3(OgreJNI.Vector3_primaryAxis(swigCPtr, this), true);
  }

  public static Vector3 getZERO() {
    long cPtr = OgreJNI.Vector3_ZERO_get();
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public static Vector3 getUNIT_X() {
    long cPtr = OgreJNI.Vector3_UNIT_X_get();
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public static Vector3 getUNIT_Y() {
    long cPtr = OgreJNI.Vector3_UNIT_Y_get();
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public static Vector3 getUNIT_Z() {
    long cPtr = OgreJNI.Vector3_UNIT_Z_get();
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public static Vector3 getNEGATIVE_UNIT_X() {
    long cPtr = OgreJNI.Vector3_NEGATIVE_UNIT_X_get();
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public static Vector3 getNEGATIVE_UNIT_Y() {
    long cPtr = OgreJNI.Vector3_NEGATIVE_UNIT_Y_get();
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public static Vector3 getNEGATIVE_UNIT_Z() {
    long cPtr = OgreJNI.Vector3_NEGATIVE_UNIT_Z_get();
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public static Vector3 getUNIT_SCALE() {
    long cPtr = OgreJNI.Vector3_UNIT_SCALE_get();
    return (cPtr == 0) ? null : new Vector3(cPtr, false);
  }

  public String toString() {
    return OgreJNI.Vector3_toString(swigCPtr, this);
  }

}
