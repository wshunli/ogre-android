/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class Quaternion {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Quaternion(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Quaternion obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Quaternion(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public Quaternion() {
    this(OgreJNI.new_Quaternion__SWIG_0(), true);
  }

  public Quaternion(float fW, float fX, float fY, float fZ) {
    this(OgreJNI.new_Quaternion__SWIG_1(fW, fX, fY, fZ), true);
  }

  public Quaternion(Matrix3 rot) {
    this(OgreJNI.new_Quaternion__SWIG_2(Matrix3.getCPtr(rot), rot), true);
  }

  public Quaternion(Radian rfAngle, Vector3 rkAxis) {
    this(OgreJNI.new_Quaternion__SWIG_3(Radian.getCPtr(rfAngle), rfAngle, Vector3.getCPtr(rkAxis), rkAxis), true);
  }

  public Quaternion(Vector3 xaxis, Vector3 yaxis, Vector3 zaxis) {
    this(OgreJNI.new_Quaternion__SWIG_4(Vector3.getCPtr(xaxis), xaxis, Vector3.getCPtr(yaxis), yaxis, Vector3.getCPtr(zaxis), zaxis), true);
  }

  public Quaternion(Vector3 akAxis) {
    this(OgreJNI.new_Quaternion__SWIG_5(Vector3.getCPtr(akAxis), akAxis), true);
  }

  public Quaternion(SWIGTYPE_p_float valptr) {
    this(OgreJNI.new_Quaternion__SWIG_6(SWIGTYPE_p_float.getCPtr(valptr)), true);
  }

  public void swap(Quaternion other) {
    OgreJNI.Quaternion_swap(swigCPtr, this, Quaternion.getCPtr(other), other);
  }

  public float __getitem__(long i) {
    return OgreJNI.Quaternion___getitem____SWIG_0(swigCPtr, this, i);
  }

  public SWIGTYPE_p_float ptr() {
    long cPtr = OgreJNI.Quaternion_ptr__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_float(cPtr, false);
  }

  public void FromRotationMatrix(Matrix3 kRot) {
    OgreJNI.Quaternion_FromRotationMatrix(swigCPtr, this, Matrix3.getCPtr(kRot), kRot);
  }

  public void ToRotationMatrix(Matrix3 kRot) {
    OgreJNI.Quaternion_ToRotationMatrix(swigCPtr, this, Matrix3.getCPtr(kRot), kRot);
  }

  public void FromAngleAxis(Radian rfAngle, Vector3 rkAxis) {
    OgreJNI.Quaternion_FromAngleAxis(swigCPtr, this, Radian.getCPtr(rfAngle), rfAngle, Vector3.getCPtr(rkAxis), rkAxis);
  }

  public void ToAngleAxis(Radian rfAngle, Vector3 rkAxis) {
    OgreJNI.Quaternion_ToAngleAxis__SWIG_0(swigCPtr, this, Radian.getCPtr(rfAngle), rfAngle, Vector3.getCPtr(rkAxis), rkAxis);
  }

  public void ToAngleAxis(Degree dAngle, Vector3 rkAxis) {
    OgreJNI.Quaternion_ToAngleAxis__SWIG_1(swigCPtr, this, Degree.getCPtr(dAngle), dAngle, Vector3.getCPtr(rkAxis), rkAxis);
  }

  public void FromAxes(Vector3 akAxis) {
    OgreJNI.Quaternion_FromAxes__SWIG_0(swigCPtr, this, Vector3.getCPtr(akAxis), akAxis);
  }

  public void FromAxes(Vector3 xAxis, Vector3 yAxis, Vector3 zAxis) {
    OgreJNI.Quaternion_FromAxes__SWIG_1(swigCPtr, this, Vector3.getCPtr(xAxis), xAxis, Vector3.getCPtr(yAxis), yAxis, Vector3.getCPtr(zAxis), zAxis);
  }

  public void ToAxes(Vector3 akAxis) {
    OgreJNI.Quaternion_ToAxes__SWIG_0(swigCPtr, this, Vector3.getCPtr(akAxis), akAxis);
  }

  public void ToAxes(Vector3 xAxis, Vector3 yAxis, Vector3 zAxis) {
    OgreJNI.Quaternion_ToAxes__SWIG_1(swigCPtr, this, Vector3.getCPtr(xAxis), xAxis, Vector3.getCPtr(yAxis), yAxis, Vector3.getCPtr(zAxis), zAxis);
  }

  public Vector3 xAxis() {
    return new Vector3(OgreJNI.Quaternion_xAxis(swigCPtr, this), true);
  }

  public Vector3 yAxis() {
    return new Vector3(OgreJNI.Quaternion_yAxis(swigCPtr, this), true);
  }

  public Vector3 zAxis() {
    return new Vector3(OgreJNI.Quaternion_zAxis(swigCPtr, this), true);
  }

  public float Dot(Quaternion rkQ) {
    return OgreJNI.Quaternion_Dot(swigCPtr, this, Quaternion.getCPtr(rkQ), rkQ);
  }

  public float Norm() {
    return OgreJNI.Quaternion_Norm(swigCPtr, this);
  }

  public float normalise() {
    return OgreJNI.Quaternion_normalise(swigCPtr, this);
  }

  public Quaternion Inverse() {
    return new Quaternion(OgreJNI.Quaternion_Inverse(swigCPtr, this), true);
  }

  public Quaternion UnitInverse() {
    return new Quaternion(OgreJNI.Quaternion_UnitInverse(swigCPtr, this), true);
  }

  public Quaternion Exp() {
    return new Quaternion(OgreJNI.Quaternion_Exp(swigCPtr, this), true);
  }

  public Quaternion Log() {
    return new Quaternion(OgreJNI.Quaternion_Log(swigCPtr, this), true);
  }

  public Radian getRoll(boolean reprojectAxis) {
    return new Radian(OgreJNI.Quaternion_getRoll__SWIG_0(swigCPtr, this, reprojectAxis), true);
  }

  public Radian getRoll() {
    return new Radian(OgreJNI.Quaternion_getRoll__SWIG_1(swigCPtr, this), true);
  }

  public Radian getPitch(boolean reprojectAxis) {
    return new Radian(OgreJNI.Quaternion_getPitch__SWIG_0(swigCPtr, this, reprojectAxis), true);
  }

  public Radian getPitch() {
    return new Radian(OgreJNI.Quaternion_getPitch__SWIG_1(swigCPtr, this), true);
  }

  public Radian getYaw(boolean reprojectAxis) {
    return new Radian(OgreJNI.Quaternion_getYaw__SWIG_0(swigCPtr, this, reprojectAxis), true);
  }

  public Radian getYaw() {
    return new Radian(OgreJNI.Quaternion_getYaw__SWIG_1(swigCPtr, this), true);
  }

  public boolean equals(Quaternion rhs, Radian tolerance) {
    return OgreJNI.Quaternion_equals(swigCPtr, this, Quaternion.getCPtr(rhs), rhs, Radian.getCPtr(tolerance), tolerance);
  }

  public boolean orientationEquals(Quaternion other, float tolerance) {
    return OgreJNI.Quaternion_orientationEquals__SWIG_0(swigCPtr, this, Quaternion.getCPtr(other), other, tolerance);
  }

  public boolean orientationEquals(Quaternion other) {
    return OgreJNI.Quaternion_orientationEquals__SWIG_1(swigCPtr, this, Quaternion.getCPtr(other), other);
  }

  public static Quaternion Slerp(float fT, Quaternion rkP, Quaternion rkQ, boolean shortestPath) {
    return new Quaternion(OgreJNI.Quaternion_Slerp__SWIG_0(fT, Quaternion.getCPtr(rkP), rkP, Quaternion.getCPtr(rkQ), rkQ, shortestPath), true);
  }

  public static Quaternion Slerp(float fT, Quaternion rkP, Quaternion rkQ) {
    return new Quaternion(OgreJNI.Quaternion_Slerp__SWIG_1(fT, Quaternion.getCPtr(rkP), rkP, Quaternion.getCPtr(rkQ), rkQ), true);
  }

  public static Quaternion SlerpExtraSpins(float fT, Quaternion rkP, Quaternion rkQ, int iExtraSpins) {
    return new Quaternion(OgreJNI.Quaternion_SlerpExtraSpins(fT, Quaternion.getCPtr(rkP), rkP, Quaternion.getCPtr(rkQ), rkQ, iExtraSpins), true);
  }

  public static void Intermediate(Quaternion rkQ0, Quaternion rkQ1, Quaternion rkQ2, Quaternion rka, Quaternion rkB) {
    OgreJNI.Quaternion_Intermediate(Quaternion.getCPtr(rkQ0), rkQ0, Quaternion.getCPtr(rkQ1), rkQ1, Quaternion.getCPtr(rkQ2), rkQ2, Quaternion.getCPtr(rka), rka, Quaternion.getCPtr(rkB), rkB);
  }

  public static Quaternion Squad(float fT, Quaternion rkP, Quaternion rkA, Quaternion rkB, Quaternion rkQ, boolean shortestPath) {
    return new Quaternion(OgreJNI.Quaternion_Squad__SWIG_0(fT, Quaternion.getCPtr(rkP), rkP, Quaternion.getCPtr(rkA), rkA, Quaternion.getCPtr(rkB), rkB, Quaternion.getCPtr(rkQ), rkQ, shortestPath), true);
  }

  public static Quaternion Squad(float fT, Quaternion rkP, Quaternion rkA, Quaternion rkB, Quaternion rkQ) {
    return new Quaternion(OgreJNI.Quaternion_Squad__SWIG_1(fT, Quaternion.getCPtr(rkP), rkP, Quaternion.getCPtr(rkA), rkA, Quaternion.getCPtr(rkB), rkB, Quaternion.getCPtr(rkQ), rkQ), true);
  }

  public static Quaternion nlerp(float fT, Quaternion rkP, Quaternion rkQ, boolean shortestPath) {
    return new Quaternion(OgreJNI.Quaternion_nlerp__SWIG_0(fT, Quaternion.getCPtr(rkP), rkP, Quaternion.getCPtr(rkQ), rkQ, shortestPath), true);
  }

  public static Quaternion nlerp(float fT, Quaternion rkP, Quaternion rkQ) {
    return new Quaternion(OgreJNI.Quaternion_nlerp__SWIG_1(fT, Quaternion.getCPtr(rkP), rkP, Quaternion.getCPtr(rkQ), rkQ), true);
  }

  public static float getMsEpsilon() {
    return OgreJNI.Quaternion_msEpsilon_get();
  }

  public static Quaternion getZERO() {
    long cPtr = OgreJNI.Quaternion_ZERO_get();
    return (cPtr == 0) ? null : new Quaternion(cPtr, false);
  }

  public static Quaternion getIDENTITY() {
    long cPtr = OgreJNI.Quaternion_IDENTITY_get();
    return (cPtr == 0) ? null : new Quaternion(cPtr, false);
  }

  public void setW(float value) {
    OgreJNI.Quaternion_w_set(swigCPtr, this, value);
  }

  public float getW() {
    return OgreJNI.Quaternion_w_get(swigCPtr, this);
  }

  public void setX(float value) {
    OgreJNI.Quaternion_x_set(swigCPtr, this, value);
  }

  public float getX() {
    return OgreJNI.Quaternion_x_get(swigCPtr, this);
  }

  public void setY(float value) {
    OgreJNI.Quaternion_y_set(swigCPtr, this, value);
  }

  public float getY() {
    return OgreJNI.Quaternion_y_get(swigCPtr, this);
  }

  public void setZ(float value) {
    OgreJNI.Quaternion_z_set(swigCPtr, this, value);
  }

  public float getZ() {
    return OgreJNI.Quaternion_z_get(swigCPtr, this);
  }

  public boolean isNaN() {
    return OgreJNI.Quaternion_isNaN(swigCPtr, this);
  }

  public String toString() {
    return OgreJNI.Quaternion_toString(swigCPtr, this);
  }

}
