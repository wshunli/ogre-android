/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class Resource extends StringInterface {
  private transient long swigCPtr;

  protected Resource(long cPtr, boolean cMemoryOwn) {
    super(OgreJNI.Resource_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Resource obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Resource(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  static public class Listener {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Listener(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Listener obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_Resource_Listener(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    protected void swigDirectorDisconnect() {
      swigCMemOwn = false;
      delete();
    }
  
    public void swigReleaseOwnership() {
      swigCMemOwn = false;
      OgreJNI.Resource_Listener_change_ownership(this, swigCPtr, false);
    }
  
    public void swigTakeOwnership() {
      swigCMemOwn = true;
      OgreJNI.Resource_Listener_change_ownership(this, swigCPtr, true);
    }
  
    public Listener() {
      this(OgreJNI.new_Resource_Listener(), true);
      OgreJNI.Resource_Listener_director_connect(this, swigCPtr, true, true);
    }
  
    public void backgroundLoadingComplete(Resource arg0) {
      if (getClass() == Listener.class) OgreJNI.Resource_Listener_backgroundLoadingComplete(swigCPtr, this, Resource.getCPtr(arg0), arg0); else OgreJNI.Resource_Listener_backgroundLoadingCompleteSwigExplicitListener(swigCPtr, this, Resource.getCPtr(arg0), arg0);
    }
  
    public void backgroundPreparingComplete(Resource arg0) {
      if (getClass() == Listener.class) OgreJNI.Resource_Listener_backgroundPreparingComplete(swigCPtr, this, Resource.getCPtr(arg0), arg0); else OgreJNI.Resource_Listener_backgroundPreparingCompleteSwigExplicitListener(swigCPtr, this, Resource.getCPtr(arg0), arg0);
    }
  
    public void loadingComplete(Resource arg0) {
      if (getClass() == Listener.class) OgreJNI.Resource_Listener_loadingComplete(swigCPtr, this, Resource.getCPtr(arg0), arg0); else OgreJNI.Resource_Listener_loadingCompleteSwigExplicitListener(swigCPtr, this, Resource.getCPtr(arg0), arg0);
    }
  
    public void preparingComplete(Resource arg0) {
      if (getClass() == Listener.class) OgreJNI.Resource_Listener_preparingComplete(swigCPtr, this, Resource.getCPtr(arg0), arg0); else OgreJNI.Resource_Listener_preparingCompleteSwigExplicitListener(swigCPtr, this, Resource.getCPtr(arg0), arg0);
    }
  
    public void unloadingComplete(Resource arg0) {
      if (getClass() == Listener.class) OgreJNI.Resource_Listener_unloadingComplete(swigCPtr, this, Resource.getCPtr(arg0), arg0); else OgreJNI.Resource_Listener_unloadingCompleteSwigExplicitListener(swigCPtr, this, Resource.getCPtr(arg0), arg0);
    }
  
  }

  public void prepare(boolean backgroundThread) {
    OgreJNI.Resource_prepare__SWIG_0(swigCPtr, this, backgroundThread);
  }

  public void prepare() {
    OgreJNI.Resource_prepare__SWIG_1(swigCPtr, this);
  }

  public void load(boolean backgroundThread) {
    OgreJNI.Resource_load__SWIG_0(swigCPtr, this, backgroundThread);
  }

  public void load() {
    OgreJNI.Resource_load__SWIG_1(swigCPtr, this);
  }

  public void reload(Resource.LoadingFlags flags) {
    OgreJNI.Resource_reload__SWIG_0(swigCPtr, this, flags.swigValue());
  }

  public void reload() {
    OgreJNI.Resource_reload__SWIG_1(swigCPtr, this);
  }

  public boolean isReloadable() {
    return OgreJNI.Resource_isReloadable(swigCPtr, this);
  }

  public boolean isManuallyLoaded() {
    return OgreJNI.Resource_isManuallyLoaded(swigCPtr, this);
  }

  public void unload() {
    OgreJNI.Resource_unload(swigCPtr, this);
  }

  public long getSize() {
    return OgreJNI.Resource_getSize(swigCPtr, this);
  }

  public void touch() {
    OgreJNI.Resource_touch(swigCPtr, this);
  }

  public String getName() {
    return OgreJNI.Resource_getName(swigCPtr, this);
  }

  public java.math.BigInteger getHandle() {
    return OgreJNI.Resource_getHandle(swigCPtr, this);
  }

  public boolean isPrepared() {
    return OgreJNI.Resource_isPrepared(swigCPtr, this);
  }

  public boolean isLoaded() {
    return OgreJNI.Resource_isLoaded(swigCPtr, this);
  }

  public boolean isLoading() {
    return OgreJNI.Resource_isLoading(swigCPtr, this);
  }

  public Resource.LoadingState getLoadingState() {
    return Resource.LoadingState.swigToEnum(OgreJNI.Resource_getLoadingState(swigCPtr, this));
  }

  public boolean isBackgroundLoaded() {
    return OgreJNI.Resource_isBackgroundLoaded(swigCPtr, this);
  }

  public void setBackgroundLoaded(boolean bl) {
    OgreJNI.Resource_setBackgroundLoaded(swigCPtr, this, bl);
  }

  public void escalateLoading() {
    OgreJNI.Resource_escalateLoading(swigCPtr, this);
  }

  public void addListener(Resource.Listener lis) {
    OgreJNI.Resource_addListener(swigCPtr, this, Resource.Listener.getCPtr(lis), lis);
  }

  public void removeListener(Resource.Listener lis) {
    OgreJNI.Resource_removeListener(swigCPtr, this, Resource.Listener.getCPtr(lis), lis);
  }

  public String getGroup() {
    return OgreJNI.Resource_getGroup(swigCPtr, this);
  }

  public void changeGroupOwnership(String newGroup) {
    OgreJNI.Resource_changeGroupOwnership(swigCPtr, this, newGroup);
  }

  public ResourceManager getCreator() {
    long cPtr = OgreJNI.Resource_getCreator(swigCPtr, this);
    return (cPtr == 0) ? null : new ResourceManager(cPtr, false);
  }

  public String getOrigin() {
    return OgreJNI.Resource_getOrigin(swigCPtr, this);
  }

  public void _notifyOrigin(String origin) {
    OgreJNI.Resource__notifyOrigin(swigCPtr, this, origin);
  }

  public long getStateCount() {
    return OgreJNI.Resource_getStateCount(swigCPtr, this);
  }

  public void _dirtyState() {
    OgreJNI.Resource__dirtyState(swigCPtr, this);
  }

  public void _fireLoadingComplete(boolean wasBackgroundLoaded) {
    OgreJNI.Resource__fireLoadingComplete(swigCPtr, this, wasBackgroundLoaded);
  }

  public void _firePreparingComplete(boolean wasBackgroundLoaded) {
    OgreJNI.Resource__firePreparingComplete(swigCPtr, this, wasBackgroundLoaded);
  }

  public void _fireUnloadingComplete() {
    OgreJNI.Resource__fireUnloadingComplete(swigCPtr, this);
  }

  public long calculateSize() {
    return OgreJNI.Resource_calculateSize(swigCPtr, this);
  }

  public final static class LoadingState {
    public final static Resource.LoadingState LOADSTATE_UNLOADED = new Resource.LoadingState("LOADSTATE_UNLOADED");
    public final static Resource.LoadingState LOADSTATE_LOADING = new Resource.LoadingState("LOADSTATE_LOADING");
    public final static Resource.LoadingState LOADSTATE_LOADED = new Resource.LoadingState("LOADSTATE_LOADED");
    public final static Resource.LoadingState LOADSTATE_UNLOADING = new Resource.LoadingState("LOADSTATE_UNLOADING");
    public final static Resource.LoadingState LOADSTATE_PREPARED = new Resource.LoadingState("LOADSTATE_PREPARED");
    public final static Resource.LoadingState LOADSTATE_PREPARING = new Resource.LoadingState("LOADSTATE_PREPARING");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static LoadingState swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + LoadingState.class + " with value " + swigValue);
    }

    private LoadingState(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private LoadingState(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private LoadingState(String swigName, LoadingState swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static LoadingState[] swigValues = { LOADSTATE_UNLOADED, LOADSTATE_LOADING, LOADSTATE_LOADED, LOADSTATE_UNLOADING, LOADSTATE_PREPARED, LOADSTATE_PREPARING };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class LoadingFlags {
    public final static Resource.LoadingFlags LF_DEFAULT = new Resource.LoadingFlags("LF_DEFAULT", OgreJNI.Resource_LF_DEFAULT_get());
    public final static Resource.LoadingFlags LF_INCLUDE_NON_RELOADABLE = new Resource.LoadingFlags("LF_INCLUDE_NON_RELOADABLE", OgreJNI.Resource_LF_INCLUDE_NON_RELOADABLE_get());
    public final static Resource.LoadingFlags LF_ONLY_UNREFERENCED = new Resource.LoadingFlags("LF_ONLY_UNREFERENCED", OgreJNI.Resource_LF_ONLY_UNREFERENCED_get());
    public final static Resource.LoadingFlags LF_ONLY_UNREFERENCED_INCLUDE_NON_RELOADABLE = new Resource.LoadingFlags("LF_ONLY_UNREFERENCED_INCLUDE_NON_RELOADABLE", OgreJNI.Resource_LF_ONLY_UNREFERENCED_INCLUDE_NON_RELOADABLE_get());
    public final static Resource.LoadingFlags LF_PRESERVE_STATE = new Resource.LoadingFlags("LF_PRESERVE_STATE", OgreJNI.Resource_LF_PRESERVE_STATE_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static LoadingFlags swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + LoadingFlags.class + " with value " + swigValue);
    }

    private LoadingFlags(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private LoadingFlags(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private LoadingFlags(String swigName, LoadingFlags swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static LoadingFlags[] swigValues = { LF_DEFAULT, LF_INCLUDE_NON_RELOADABLE, LF_ONLY_UNREFERENCED, LF_ONLY_UNREFERENCED_INCLUDE_NON_RELOADABLE, LF_PRESERVE_STATE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
