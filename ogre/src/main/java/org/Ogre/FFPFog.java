/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class FFPFog extends SubRenderState {
  private transient long swigCPtr;

  protected FFPFog(long cPtr, boolean cMemoryOwn) {
    super(OgreRTShaderJNI.FFPFog_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(FFPFog obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreRTShaderJNI.delete_FFPFog(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public FFPFog() {
    this(OgreRTShaderJNI.new_FFPFog(), true);
  }

  public int getExecutionOrder() {
    return OgreRTShaderJNI.FFPFog_getExecutionOrder(swigCPtr, this);
  }

  public void updateGpuProgramsParams(Renderable rend, Pass pass, SWIGTYPE_p_Ogre__AutoParamDataSource source, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t pLightList) {
    OgreRTShaderJNI.FFPFog_updateGpuProgramsParams(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass, SWIGTYPE_p_Ogre__AutoParamDataSource.getCPtr(source), SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(pLightList));
  }

  public void copyFrom(SubRenderState rhs) {
    OgreRTShaderJNI.FFPFog_copyFrom(swigCPtr, this, SubRenderState.getCPtr(rhs), rhs);
  }

  public boolean preAddToRenderState(RenderState renderState, Pass srcPass, Pass dstPass) {
    return OgreRTShaderJNI.FFPFog_preAddToRenderState(swigCPtr, this, RenderState.getCPtr(renderState), renderState, Pass.getCPtr(srcPass), srcPass, Pass.getCPtr(dstPass), dstPass);
  }

  public void setFogProperties(FogMode fogMode, ColourValue fogColour, float fogStart, float fogEnd, float fogDensity) {
    OgreRTShaderJNI.FFPFog_setFogProperties(swigCPtr, this, fogMode.swigValue(), ColourValue.getCPtr(fogColour), fogColour, fogStart, fogEnd, fogDensity);
  }

  public void setCalcMode(FFPFog.CalcMode calcMode) {
    OgreRTShaderJNI.FFPFog_setCalcMode(swigCPtr, this, calcMode.swigValue());
  }

  public FFPFog.CalcMode getCalcMode() {
    return FFPFog.CalcMode.swigToEnum(OgreRTShaderJNI.FFPFog_getCalcMode(swigCPtr, this));
  }

  public static void setType(String value) {
    OgreRTShaderJNI.FFPFog_Type_set(value);
  }

  public static String getType() {
    return OgreRTShaderJNI.FFPFog_Type_get();
  }

  public final static class CalcMode {
    public final static FFPFog.CalcMode CM_PER_VERTEX = new FFPFog.CalcMode("CM_PER_VERTEX", OgreRTShaderJNI.FFPFog_CM_PER_VERTEX_get());
    public final static FFPFog.CalcMode CM_PER_PIXEL = new FFPFog.CalcMode("CM_PER_PIXEL", OgreRTShaderJNI.FFPFog_CM_PER_PIXEL_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static CalcMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + CalcMode.class + " with value " + swigValue);
    }

    private CalcMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private CalcMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private CalcMode(String swigName, CalcMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static CalcMode[] swigValues = { CM_PER_VERTEX, CM_PER_PIXEL };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
