/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}

namespace Swig {
  namespace {
    jclass jclass_OgreBitesJNI = NULL;
    jmethodID director_method_ids[29];
  }
}

/* Includes the header in the wrapper code */
#include "Ogre.h"
#include "OgreBuildSettings.h"
#include "OgreApplicationContext.h"
#include "OgreSGTechniqueResolverListener.h"
#include "OgreCameraMan.h"
#include "OgreTrays.h"
#include "OgreAdvancedRenderControls.h"

#if OGRE_BITES_HAVE_SDL
#include "SDL_stdinc.h"
#include "SDL_events.h"
#include "SDL_keyboard.h"
#include "SDL_keycode.h"
#endif


#include <string>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


#include <android/native_window_jni.h>
#include <android/asset_manager_jni.h>

JNIEnv* OgreJNIGetEnv();

SWIGINTERN void OgreBites_ApplicationContext_initAppForAndroid(OgreBites::ApplicationContext *self,jobject assetManager,jobject surface){
        if( !(assetManager) ) Ogre::ExceptionFactory::throwException(Ogre::Exception::ERR_RT_ASSERTION_FAILED, ("assetManager is NULL"), __FUNCTION__, "/home/pavel/workspace/ogre-git/Components/Bites/include/OgreBites.i", 65);
        if( !(surface) ) Ogre::ExceptionFactory::throwException(Ogre::Exception::ERR_RT_ASSERTION_FAILED, ("surface is NULL"), __FUNCTION__, "/home/pavel/workspace/ogre-git/Components/Bites/include/OgreBites.i", 66);

        AAssetManager* assetMgr = AAssetManager_fromJava(OgreJNIGetEnv(), assetManager);
        ANativeWindow* nativeWnd = ANativeWindow_fromSurface(OgreJNIGetEnv(), surface);
        self->initAppForAndroid(assetMgr, nativeWnd);
    }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OgreBitesJAVA_wrap.h"

SwigDirector_InputListener::SwigDirector_InputListener(JNIEnv *jenv) : OgreBites::InputListener(), Swig::Director(jenv) {
}

SwigDirector_InputListener::~SwigDirector_InputListener() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_InputListener::frameRendered(Ogre::FrameEvent const &evt) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[0]) {
    OgreBites::InputListener::frameRendered(evt);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(Ogre::FrameEvent **)&jevt = (Ogre::FrameEvent *) &evt; 
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[0], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::frameRendered ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_InputListener::keyPressed(OgreBites::KeyboardEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[1]) {
    return OgreBites::InputListener::keyPressed(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::KeyboardEvent **)&jevt = (OgreBites::KeyboardEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[1], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::keyPressed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_InputListener::keyReleased(OgreBites::KeyboardEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[2]) {
    return OgreBites::InputListener::keyReleased(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::KeyboardEvent **)&jevt = (OgreBites::KeyboardEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[2], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::keyReleased ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_InputListener::touchMoved(OgreBites::TouchFingerEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[3]) {
    return OgreBites::InputListener::touchMoved(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::TouchFingerEvent **)&jevt = (OgreBites::TouchFingerEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[3], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::touchMoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_InputListener::touchPressed(OgreBites::TouchFingerEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[4]) {
    return OgreBites::InputListener::touchPressed(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::TouchFingerEvent **)&jevt = (OgreBites::TouchFingerEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[4], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::touchPressed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_InputListener::touchReleased(OgreBites::TouchFingerEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[5]) {
    return OgreBites::InputListener::touchReleased(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::TouchFingerEvent **)&jevt = (OgreBites::TouchFingerEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[5], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::touchReleased ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_InputListener::mouseMoved(OgreBites::MouseMotionEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[6]) {
    return OgreBites::InputListener::mouseMoved(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::MouseMotionEvent **)&jevt = (OgreBites::MouseMotionEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[6], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::mouseMoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_InputListener::mouseWheelRolled(OgreBites::MouseWheelEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[7]) {
    return OgreBites::InputListener::mouseWheelRolled(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::MouseWheelEvent **)&jevt = (OgreBites::MouseWheelEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[7], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::mouseWheelRolled ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_InputListener::mousePressed(OgreBites::MouseButtonEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[8]) {
    return OgreBites::InputListener::mousePressed(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::MouseButtonEvent **)&jevt = (OgreBites::MouseButtonEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[8], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::mousePressed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_InputListener::mouseReleased(OgreBites::MouseButtonEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[9]) {
    return OgreBites::InputListener::mouseReleased(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(OgreBites::MouseButtonEvent **)&jevt = (OgreBites::MouseButtonEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[9], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::InputListener::mouseReleased ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_InputListener::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "frameRendered", "(Lorg/Ogre/FrameEvent;)V", NULL 
    },
    {
      "keyPressed", "(Lorg/Ogre/KeyboardEvent;)Z", NULL 
    },
    {
      "keyReleased", "(Lorg/Ogre/KeyboardEvent;)Z", NULL 
    },
    {
      "touchMoved", "(Lorg/Ogre/TouchFingerEvent;)Z", NULL 
    },
    {
      "touchPressed", "(Lorg/Ogre/TouchFingerEvent;)Z", NULL 
    },
    {
      "touchReleased", "(Lorg/Ogre/TouchFingerEvent;)Z", NULL 
    },
    {
      "mouseMoved", "(Lorg/Ogre/MouseMotionEvent;)Z", NULL 
    },
    {
      "mouseWheelRolled", "(Lorg/Ogre/MouseWheelEvent;)Z", NULL 
    },
    {
      "mousePressed", "(Lorg/Ogre/MouseButtonEvent;)Z", NULL 
    },
    {
      "mouseReleased", "(Lorg/Ogre/MouseButtonEvent;)Z", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/Ogre/InputListener");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 10; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}


SwigDirector_ApplicationContext::SwigDirector_ApplicationContext(JNIEnv *jenv, Ogre::String const &appName, bool unused) : OgreBites::ApplicationContext(appName, unused), Swig::Director(jenv) {
}

bool SwigDirector_ApplicationContext::frameStarted(Ogre::FrameEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[0]) {
    return OgreBites::ApplicationContext::frameStarted(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(Ogre::FrameEvent **)&jevt = (Ogre::FrameEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[10], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::frameStarted ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ApplicationContext::frameRenderingQueued(Ogre::FrameEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[1]) {
    return OgreBites::ApplicationContext::frameRenderingQueued(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(Ogre::FrameEvent **)&jevt = (Ogre::FrameEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[11], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::frameRenderingQueued ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

bool SwigDirector_ApplicationContext::frameEnded(Ogre::FrameEvent const &evt) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jevt = 0 ;
  
  if (!swig_override[2]) {
    return OgreBites::ApplicationContext::frameEnded(evt);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *(Ogre::FrameEvent **)&jevt = (Ogre::FrameEvent *) &evt; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[12], swigjobj, jevt);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::frameEnded ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

SwigDirector_ApplicationContext::~SwigDirector_ApplicationContext() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ApplicationContext::windowMoved(Ogre::RenderWindow *rw) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrw = 0 ;
  
  if (!swig_override[3]) {
    OgreBites::ApplicationContext::windowMoved(rw);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((Ogre::RenderWindow **)&jrw) = (Ogre::RenderWindow *) rw; 
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[13], swigjobj, jrw);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::windowMoved ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ApplicationContext::windowResized(Ogre::RenderWindow *rw) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrw = 0 ;
  
  if (!swig_override[4]) {
    OgreBites::ApplicationContext::windowResized(rw);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((Ogre::RenderWindow **)&jrw) = (Ogre::RenderWindow *) rw; 
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[14], swigjobj, jrw);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::windowResized ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ApplicationContext::windowClosing(Ogre::RenderWindow *rw) {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrw = 0 ;
  
  if (!swig_override[5]) {
    return OgreBites::ApplicationContext::windowClosing(rw);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((Ogre::RenderWindow **)&jrw) = (Ogre::RenderWindow *) rw; 
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[15], swigjobj, jrw);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::windowClosing ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ApplicationContext::windowClosed(Ogre::RenderWindow *rw) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrw = 0 ;
  
  if (!swig_override[6]) {
    OgreBites::ApplicationContext::windowClosed(rw);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((Ogre::RenderWindow **)&jrw) = (Ogre::RenderWindow *) rw; 
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[16], swigjobj, jrw);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::windowClosed ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ApplicationContext::windowFocusChange(Ogre::RenderWindow *rw) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jlong jrw = 0 ;
  
  if (!swig_override[7]) {
    OgreBites::ApplicationContext::windowFocusChange(rw);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    *((Ogre::RenderWindow **)&jrw) = (Ogre::RenderWindow *) rw; 
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[17], swigjobj, jrw);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::windowFocusChange ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ApplicationContext::setup() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[8]) {
    OgreBites::ApplicationContext::setup();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[18], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::setup ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ApplicationContext::createRoot() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[9]) {
    OgreBites::ApplicationContext::createRoot();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[19], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::createRoot ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

bool SwigDirector_ApplicationContext::oneTimeConfig() {
  bool c_result = SwigValueInit< bool >() ;
  jboolean jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[10]) {
    return OgreBites::ApplicationContext::oneTimeConfig();
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jresult = (jboolean) jenv->CallStaticBooleanMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[20], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    c_result = jresult ? true : false; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::oneTimeConfig ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ApplicationContext::locateResources() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[11]) {
    OgreBites::ApplicationContext::locateResources();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[21], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::locateResources ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ApplicationContext::loadResources() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[12]) {
    OgreBites::ApplicationContext::loadResources();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[22], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::loadResources ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ApplicationContext::reconfigure(Ogre::String const &renderer, Ogre::NameValuePairList &options) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jrenderer = 0 ;
  jlong joptions = 0 ;
  
  if (!swig_override[13]) {
    OgreBites::ApplicationContext::reconfigure(renderer,options);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jrenderer = jenv->NewStringUTF((&renderer)->c_str());
    Swig::LocalRefGuard renderer_refguard(jenv, jrenderer); 
    *(Ogre::NameValuePairList **)&joptions = (Ogre::NameValuePairList *) &options; 
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[23], swigjobj, jrenderer, joptions);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::reconfigure ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ApplicationContext::shutdown() {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  
  if (!swig_override[14]) {
    OgreBites::ApplicationContext::shutdown();
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jenv->CallStaticVoidMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[24], swigjobj);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::shutdown ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

OgreBites::NativeWindowPair SwigDirector_ApplicationContext::createWindow(Ogre::String const &name, uint32_t w, uint32_t h, Ogre::NameValuePairList miscParams) {
  OgreBites::NativeWindowPair c_result ;
  jlong jresult = 0 ;
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jname = 0 ;
  jlong jw  ;
  jlong jh  ;
  jlong jmiscParams  ;
  OgreBites::NativeWindowPair *argp ;
  
  if (!swig_override[15]) {
    return OgreBites::ApplicationContext::createWindow(name,w,h,miscParams);
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jname = jenv->NewStringUTF((&name)->c_str());
    Swig::LocalRefGuard name_refguard(jenv, jname); 
    jw = (jlong) w;
    jh = (jlong) h;
    jmiscParams = 0;
    *((Ogre::NameValuePairList **)&jmiscParams) = new Ogre::NameValuePairList((const Ogre::NameValuePairList &)miscParams); 
    jresult = (jlong) jenv->CallStaticLongMethod(Swig::jclass_OgreBitesJNI, Swig::director_method_ids[25], swigjobj, jname, jw, jh, jmiscParams);
    jthrowable swigerror = jenv->ExceptionOccurred();
    if (swigerror) {
      Swig::DirectorException::raise(jenv, swigerror);
    }
    
    argp = *(OgreBites::NativeWindowPair **)&jresult; 
    if (!argp) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Unexpected null return for type OgreBites::NativeWindowPair");
      return c_result;
    }
    c_result = *argp; 
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object in OgreBites::ApplicationContext::createWindow ");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
  return c_result;
}

void SwigDirector_ApplicationContext::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "frameStarted", "(Lorg/Ogre/FrameEvent;)Z", NULL 
    },
    {
      "frameRenderingQueued", "(Lorg/Ogre/FrameEvent;)Z", NULL 
    },
    {
      "frameEnded", "(Lorg/Ogre/FrameEvent;)Z", NULL 
    },
    {
      "windowMoved", "(Lorg/Ogre/RenderWindow;)V", NULL 
    },
    {
      "windowResized", "(Lorg/Ogre/RenderWindow;)V", NULL 
    },
    {
      "windowClosing", "(Lorg/Ogre/RenderWindow;)Z", NULL 
    },
    {
      "windowClosed", "(Lorg/Ogre/RenderWindow;)V", NULL 
    },
    {
      "windowFocusChange", "(Lorg/Ogre/RenderWindow;)V", NULL 
    },
    {
      "setup", "()V", NULL 
    },
    {
      "createRoot", "()V", NULL 
    },
    {
      "oneTimeConfig", "()Z", NULL 
    },
    {
      "locateResources", "()V", NULL 
    },
    {
      "loadResources", "()V", NULL 
    },
    {
      "reconfigure", "(Ljava/lang/String;Lorg/Ogre/SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t;)V", NULL 
    },
    {
      "shutdown", "()V", NULL 
    },
    {
      "createWindow", "(Ljava/lang/String;JJLorg/Ogre/SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t;)Lorg/Ogre/NativeWindowPair;", NULL 
    },
    {
      "createWindow", "(Ljava/lang/String;JJ)Lorg/Ogre/NativeWindowPair;", NULL 
    },
    {
      "createWindow", "(Ljava/lang/String;J)Lorg/Ogre/NativeWindowPair;", NULL 
    },
    {
      "createWindow", "(Ljava/lang/String;)Lorg/Ogre/NativeWindowPair;", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("org/Ogre/ApplicationContext");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 19; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1SGTechniqueResolverListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  Ogre::RTShader::ShaderGenerator *arg1 = (Ogre::RTShader::ShaderGenerator *) 0 ;
  OgreBites::SGTechniqueResolverListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RTShader::ShaderGenerator **)&jarg1; 
  {
    try {
      result = (OgreBites::SGTechniqueResolverListener *)new OgreBites::SGTechniqueResolverListener(arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::SGTechniqueResolverListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_SGTechniqueResolverListener_1handleSchemeNotFound(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jint jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  OgreBites::SGTechniqueResolverListener *arg1 = (OgreBites::SGTechniqueResolverListener *) 0 ;
  unsigned short arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Material *arg4 = (Ogre::Material *) 0 ;
  unsigned short arg5 ;
  Ogre::Renderable *arg6 = (Ogre::Renderable *) 0 ;
  Ogre::Technique *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(OgreBites::SGTechniqueResolverListener **)&jarg1; 
  arg2 = (unsigned short)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::Material **)&jarg4; 
  arg5 = (unsigned short)jarg5; 
  arg6 = *(Ogre::Renderable **)&jarg6; 
  {
    try {
      result = (Ogre::Technique *)(arg1)->handleSchemeNotFound(arg2,(Ogre::String const &)*arg3,arg4,arg5,(Ogre::Renderable const *)arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Technique **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_SGTechniqueResolverListener_1afterIlluminationPassesCreated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::SGTechniqueResolverListener *arg1 = (OgreBites::SGTechniqueResolverListener *) 0 ;
  Ogre::Technique *arg2 = (Ogre::Technique *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::SGTechniqueResolverListener **)&jarg1; 
  arg2 = *(Ogre::Technique **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->afterIlluminationPassesCreated(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_SGTechniqueResolverListener_1beforeIlluminationPassesCleared(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::SGTechniqueResolverListener *arg1 = (OgreBites::SGTechniqueResolverListener *) 0 ;
  Ogre::Technique *arg2 = (Ogre::Technique *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::SGTechniqueResolverListener **)&jarg1; 
  arg2 = *(Ogre::Technique **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->beforeIlluminationPassesCleared(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1SGTechniqueResolverListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::SGTechniqueResolverListener *arg1 = (OgreBites::SGTechniqueResolverListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::SGTechniqueResolverListener **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_BUTTON_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)OgreBites::BUTTON_LEFT;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_BUTTON_1MIDDLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)OgreBites::BUTTON_MIDDLE;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_BUTTON_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)OgreBites::BUTTON_RIGHT;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_KeyboardEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::KeyboardEvent *arg1 = (OgreBites::KeyboardEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::KeyboardEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_KeyboardEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::KeyboardEvent *arg1 = (OgreBites::KeyboardEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::KeyboardEvent **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_KeyboardEvent_1repeat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::KeyboardEvent *arg1 = (OgreBites::KeyboardEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::KeyboardEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->repeat = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_KeyboardEvent_1repeat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::KeyboardEvent *arg1 = (OgreBites::KeyboardEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::KeyboardEvent **)&jarg1; 
  result = (int) ((arg1)->repeat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1KeyboardEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::KeyboardEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::KeyboardEvent *)new OgreBites::KeyboardEvent();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::KeyboardEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1KeyboardEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::KeyboardEvent *arg1 = (OgreBites::KeyboardEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::KeyboardEvent **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1xrel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->xrel = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1xrel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  result = (int) ((arg1)->xrel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1yrel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yrel = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1yrel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  result = (int) ((arg1)->yrel);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1windowID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->windowID = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseMotionEvent_1windowID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  result = (int) ((arg1)->windowID);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1MouseMotionEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::MouseMotionEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::MouseMotionEvent *)new OgreBites::MouseMotionEvent();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::MouseMotionEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1MouseMotionEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::MouseMotionEvent *arg1 = (OgreBites::MouseMotionEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::MouseMotionEvent **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseButtonEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseButtonEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseButtonEvent_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseButtonEvent_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  result = (int) ((arg1)->x);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseButtonEvent_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseButtonEvent_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseButtonEvent_1button_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->button = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseButtonEvent_1button_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  result = (int) ((arg1)->button);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1MouseButtonEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::MouseButtonEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::MouseButtonEvent *)new OgreBites::MouseButtonEvent();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::MouseButtonEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1MouseButtonEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::MouseButtonEvent *arg1 = (OgreBites::MouseButtonEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::MouseButtonEvent **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseWheelEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseWheelEvent *arg1 = (OgreBites::MouseWheelEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseWheelEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseWheelEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseWheelEvent *arg1 = (OgreBites::MouseWheelEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseWheelEvent **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_MouseWheelEvent_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::MouseWheelEvent *arg1 = (OgreBites::MouseWheelEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseWheelEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_MouseWheelEvent_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::MouseWheelEvent *arg1 = (OgreBites::MouseWheelEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::MouseWheelEvent **)&jarg1; 
  result = (int) ((arg1)->y);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1MouseWheelEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::MouseWheelEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::MouseWheelEvent *)new OgreBites::MouseWheelEvent();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::MouseWheelEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1MouseWheelEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::MouseWheelEvent *arg1 = (OgreBites::MouseWheelEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::MouseWheelEvent **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1fingerId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fingerId = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1fingerId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  result = (int) ((arg1)->fingerId);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  result = (float) ((arg1)->x);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  result = (float) ((arg1)->y);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1dx_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dx = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1dx_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  result = (float) ((arg1)->dx);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1dy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dy = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TouchFingerEvent_1dy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  result = (float) ((arg1)->dy);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1TouchFingerEvent(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::TouchFingerEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::TouchFingerEvent *)new OgreBites::TouchFingerEvent();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::TouchFingerEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1TouchFingerEvent(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::TouchFingerEvent *arg1 = (OgreBites::TouchFingerEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::TouchFingerEvent **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Event_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_Event_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  result = (int) ((arg1)->type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Event_1key_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::KeyboardEvent *arg2 = (OgreBites::KeyboardEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  arg2 = *(OgreBites::KeyboardEvent **)&jarg2; 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Event_1key_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::KeyboardEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  result = (OgreBites::KeyboardEvent *)& ((arg1)->key);
  *(OgreBites::KeyboardEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Event_1button_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = (OgreBites::MouseButtonEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2; 
  if (arg1) (arg1)->button = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Event_1button_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::MouseButtonEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  result = (OgreBites::MouseButtonEvent *)& ((arg1)->button);
  *(OgreBites::MouseButtonEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Event_1wheel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::MouseWheelEvent *arg2 = (OgreBites::MouseWheelEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  arg2 = *(OgreBites::MouseWheelEvent **)&jarg2; 
  if (arg1) (arg1)->wheel = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Event_1wheel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::MouseWheelEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  result = (OgreBites::MouseWheelEvent *)& ((arg1)->wheel);
  *(OgreBites::MouseWheelEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Event_1motion_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::MouseMotionEvent *arg2 = (OgreBites::MouseMotionEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  arg2 = *(OgreBites::MouseMotionEvent **)&jarg2; 
  if (arg1) (arg1)->motion = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Event_1motion_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::MouseMotionEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  result = (OgreBites::MouseMotionEvent *)& ((arg1)->motion);
  *(OgreBites::MouseMotionEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Event_1tfinger_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::TouchFingerEvent *arg2 = (OgreBites::TouchFingerEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  arg2 = *(OgreBites::TouchFingerEvent **)&jarg2; 
  if (arg1) (arg1)->tfinger = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Event_1tfinger_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  OgreBites::TouchFingerEvent *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Event **)&jarg1; 
  result = (OgreBites::TouchFingerEvent *)& ((arg1)->tfinger);
  *(OgreBites::TouchFingerEvent **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1Event(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::Event *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::Event *)new OgreBites::Event();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Event **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1Event(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::Event *arg1 = (OgreBites::Event *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::Event **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1RETURN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_RETURN;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1ESCAPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_ESCAPE;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1SPACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_SPACE;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1DOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_DOWN;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1UP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_UP;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1LEFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_LEFT;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1RIGHT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_RIGHT;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1PAGEUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_PAGEUP;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1PAGEDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_PAGEDOWN;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1LSHIFT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_LSHIFT;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F2;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F3;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F4;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F5;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F6;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F9_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F9;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F10_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F10;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F11_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F11;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1F12_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_F12;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1KP_1PLUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_KP_PLUS;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDLK_1KP_1MINUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDLK_KP_MINUS;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1NUM_1KEYCODES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_NUM_KEYCODES;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1KEYDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_KEYDOWN;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1KEYUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_KEYUP;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1MOUSEBUTTONDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_MOUSEBUTTONDOWN;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1MOUSEBUTTONUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_MOUSEBUTTONUP;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1MOUSEWHEEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_MOUSEWHEEL;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1MOUSEMOTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_MOUSEMOTION;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1FINGERDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_FINGERDOWN;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1FINGERUP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_FINGERUP;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1FINGERMOTION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)SDL_FINGERMOTION;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_KMOD_1CTRL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (int)KMOD_CTRL;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1GetKeyboardState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  {
    try {
      result = (unsigned char *)SDL_GetKeyboardState(arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(unsigned char **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1GetMouseState(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int **)&jarg1; 
  arg2 = *(int **)&jarg2; 
  {
    try {
      result = (int)SDL_GetMouseState(arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SDL_1GetModState(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SDL_Keymod result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (SDL_Keymod)SDL_GetModState();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1InputListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1frameRendered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->frameRendered((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1frameRenderedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->OgreBites::InputListener::frameRendered((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1keyPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::KeyboardEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::KeyboardEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::KeyboardEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->keyPressed((OgreBites::KeyboardEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1keyPressedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::KeyboardEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::KeyboardEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::KeyboardEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::keyPressed((OgreBites::KeyboardEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1keyReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::KeyboardEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::KeyboardEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::KeyboardEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->keyReleased((OgreBites::KeyboardEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1keyReleasedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::KeyboardEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::KeyboardEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::KeyboardEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::keyReleased((OgreBites::KeyboardEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1touchMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::TouchFingerEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::TouchFingerEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::TouchFingerEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->touchMoved((OgreBites::TouchFingerEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1touchMovedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::TouchFingerEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::TouchFingerEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::TouchFingerEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::touchMoved((OgreBites::TouchFingerEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1touchPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::TouchFingerEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::TouchFingerEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::TouchFingerEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->touchPressed((OgreBites::TouchFingerEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1touchPressedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::TouchFingerEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::TouchFingerEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::TouchFingerEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::touchPressed((OgreBites::TouchFingerEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1touchReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::TouchFingerEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::TouchFingerEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::TouchFingerEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->touchReleased((OgreBites::TouchFingerEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1touchReleasedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::TouchFingerEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::TouchFingerEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::TouchFingerEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::touchReleased((OgreBites::TouchFingerEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1mouseMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::MouseMotionEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::MouseMotionEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseMotionEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mouseMoved((OgreBites::MouseMotionEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1mouseMovedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::MouseMotionEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::MouseMotionEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseMotionEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::mouseMoved((OgreBites::MouseMotionEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1mouseWheelRolled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::MouseWheelEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::MouseWheelEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseWheelEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mouseWheelRolled((OgreBites::MouseWheelEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1mouseWheelRolledSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::MouseWheelEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::MouseWheelEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseWheelEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::mouseWheelRolled((OgreBites::MouseWheelEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1mousePressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseButtonEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mousePressed((OgreBites::MouseButtonEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1mousePressedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseButtonEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::mousePressed((OgreBites::MouseButtonEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1mouseReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseButtonEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mouseReleased((OgreBites::MouseButtonEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1mouseReleasedSwigExplicitInputListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::InputListener *arg1 = (OgreBites::InputListener *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::InputListener **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseButtonEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::InputListener::mouseReleased((OgreBites::MouseButtonEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1InputListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::InputListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::InputListener *)new SwigDirector_InputListener(jenv);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::InputListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OgreBites::InputListener *obj = *((OgreBites::InputListener **)&objarg);
  (void)jcls;
  SwigDirector_InputListener *director = static_cast<SwigDirector_InputListener *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_InputListener_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OgreBites::InputListener *obj = *((OgreBites::InputListener **)&objarg);
  SwigDirector_InputListener *director = static_cast<SwigDirector_InputListener *>(obj);
  (void)jcls;
  director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_NativeWindowPair_1render_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::NativeWindowPair *arg1 = (OgreBites::NativeWindowPair *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::NativeWindowPair **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  if (arg1) (arg1)->render = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_NativeWindowPair_1render_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::NativeWindowPair *arg1 = (OgreBites::NativeWindowPair *) 0 ;
  Ogre::RenderWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::NativeWindowPair **)&jarg1; 
  result = (Ogre::RenderWindow *) ((arg1)->render);
  *(Ogre::RenderWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_NativeWindowPair_1_1native_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::NativeWindowPair *arg1 = (OgreBites::NativeWindowPair *) 0 ;
  OgreBites::NativeWindowType *arg2 = (OgreBites::NativeWindowType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::NativeWindowPair **)&jarg1; 
  arg2 = *(OgreBites::NativeWindowType **)&jarg2; 
  if (arg1) (arg1)->native = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_NativeWindowPair_1_1native_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::NativeWindowPair *arg1 = (OgreBites::NativeWindowPair *) 0 ;
  OgreBites::NativeWindowType *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::NativeWindowPair **)&jarg1; 
  result = (OgreBites::NativeWindowType *) ((arg1)->native);
  *(OgreBites::NativeWindowType **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1NativeWindowPair(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::NativeWindowPair *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::NativeWindowPair *)new OgreBites::NativeWindowPair();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1NativeWindowPair(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::NativeWindowPair *arg1 = (OgreBites::NativeWindowPair *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::NativeWindowPair **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1ApplicationContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jboolean jarg2) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  bool arg2 ;
  OgreBites::ApplicationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (OgreBites::ApplicationContext *)new SwigDirector_ApplicationContext(jenv,(Ogre::String const &)*arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::ApplicationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1ApplicationContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  OgreBites::ApplicationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (OgreBites::ApplicationContext *)new SwigDirector_ApplicationContext(jenv,(Ogre::String const &)*arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::ApplicationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1ApplicationContext_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::ApplicationContext *)new SwigDirector_ApplicationContext(jenv);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::ApplicationContext **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1ApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1getRenderWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      result = (Ogre::RenderWindow *)((OgreBites::ApplicationContext const *)arg1)->getRenderWindow();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::RenderWindow **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1getRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::Root *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      result = (Ogre::Root *)((OgreBites::ApplicationContext const *)arg1)->getRoot();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Root **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1getOverlaySystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::OverlaySystem *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      result = (Ogre::OverlaySystem *)((OgreBites::ApplicationContext const *)arg1)->getOverlaySystem();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlaySystem **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1_1fireInputEventAndroid_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  AInputEvent *arg2 = (AInputEvent *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(AInputEvent **)&jarg2; 
  arg3 = (int)jarg3; 
  {
    try {
      (arg1)->_fireInputEventAndroid(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1_1fireInputEventAndroid_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  AInputEvent *arg2 = (AInputEvent *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(AInputEvent **)&jarg2; 
  {
    try {
      (arg1)->_fireInputEventAndroid(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1closeApp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->closeApp();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1frameStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->frameStarted((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1frameStartedSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::ApplicationContext::frameStarted((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1frameRenderingQueued(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->frameRenderingQueued((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1frameRenderingQueuedSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::ApplicationContext::frameRenderingQueued((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1frameEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->frameEnded((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1frameEndedSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->OgreBites::ApplicationContext::frameEnded((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->windowMoved(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowMovedSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::windowMoved(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowResized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->windowResized(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowResizedSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::windowResized(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowClosing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->windowClosing(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowClosingSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->OgreBites::ApplicationContext::windowClosing(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->windowClosed(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowClosedSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::windowClosed(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowFocusChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->windowFocusChange(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1windowFocusChangeSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::windowFocusChange(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1_1fireInputEvent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  OgreBites::Event *arg2 = 0 ;
  uint32_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(OgreBites::Event **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::Event const & reference is null");
    return ;
  } 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      ((OgreBites::ApplicationContext const *)arg1)->_fireInputEvent((OgreBites::Event const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1initialiseRTShaderSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->initialiseRTShaderSystem();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1setRTSSWriteShadersToDisk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setRTSSWriteShadersToDisk(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1destroyRTShaderSystem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->destroyRTShaderSystem();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->setup();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1setupSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::setup();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createRoot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->createRoot();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createRootSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::createRoot();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1oneTimeConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->oneTimeConfig();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1oneTimeConfigSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->OgreBites::ApplicationContext::oneTimeConfig();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1setWindowGrab_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  OgreBites::NativeWindowType *arg2 = (OgreBites::NativeWindowType *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(OgreBites::NativeWindowType **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setWindowGrab(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1setWindowGrab_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  OgreBites::NativeWindowType *arg2 = (OgreBites::NativeWindowType *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(OgreBites::NativeWindowType **)&jarg2; 
  {
    try {
      (arg1)->setWindowGrab(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1setWindowGrab_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setWindowGrab(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1setWindowGrab_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->setWindowGrab();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1locateResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->locateResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1locateResourcesSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::locateResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1loadResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->loadResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1loadResourcesSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::loadResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1reconfigure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::NameValuePairList *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(Ogre::NameValuePairList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::NameValuePairList & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->reconfigure((Ogre::String const &)*arg2,*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1reconfigureSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::NameValuePairList *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(Ogre::NameValuePairList **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::NameValuePairList & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::reconfigure((Ogre::String const &)*arg2,*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1shutdown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->shutdown();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1shutdownSwigExplicitApplicationContext(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->OgreBites::ApplicationContext::shutdown();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1pollEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->pollEvents();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createDummyScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->createDummyScene();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1destroyDummyScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      (arg1)->destroyDummyScene();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1enableShaderCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  {
    try {
      ((OgreBites::ApplicationContext const *)arg1)->enableShaderCache();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1addInputListener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  OgreBites::NativeWindowType *arg2 = (OgreBites::NativeWindowType *) 0 ;
  OgreBites::InputListener *arg3 = (OgreBites::InputListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(OgreBites::NativeWindowType **)&jarg2; 
  arg3 = *(OgreBites::InputListener **)&jarg3; 
  {
    try {
      (arg1)->addInputListener(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1addInputListener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  OgreBites::InputListener *arg2 = (OgreBites::InputListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(OgreBites::InputListener **)&jarg2; 
  {
    try {
      (arg1)->addInputListener(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1removeInputListener_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  OgreBites::NativeWindowType *arg2 = (OgreBites::NativeWindowType *) 0 ;
  OgreBites::InputListener *arg3 = (OgreBites::InputListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(OgreBites::NativeWindowType **)&jarg2; 
  arg3 = *(OgreBites::InputListener **)&jarg3; 
  {
    try {
      (arg1)->removeInputListener(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1removeInputListener_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  OgreBites::InputListener *arg2 = (OgreBites::InputListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = *(OgreBites::InputListener **)&jarg2; 
  {
    try {
      (arg1)->removeInputListener(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createWindow_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  SwigValueWrapper< std::map< std::string,std::string,std::less< std::string > > > arg5 ;
  Ogre::NameValuePairList *argp5 ;
  OgreBites::NativeWindowPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  argp5 = *(Ogre::NameValuePairList **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::NameValuePairList");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = (arg1)->createWindow((Ogre::String const &)*arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = new OgreBites::NativeWindowPair((const OgreBites::NativeWindowPair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createWindowSwigExplicitApplicationContext_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  SwigValueWrapper< std::map< std::string,std::string,std::less< std::string > > > arg5 ;
  Ogre::NameValuePairList *argp5 ;
  OgreBites::NativeWindowPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  argp5 = *(Ogre::NameValuePairList **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::NameValuePairList");
    return 0;
  }
  arg5 = *argp5; 
  {
    try {
      result = (arg1)->OgreBites::ApplicationContext::createWindow((Ogre::String const &)*arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = new OgreBites::NativeWindowPair((const OgreBites::NativeWindowPair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createWindow_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  OgreBites::NativeWindowPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  {
    try {
      result = (arg1)->createWindow((Ogre::String const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = new OgreBites::NativeWindowPair((const OgreBites::NativeWindowPair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createWindowSwigExplicitApplicationContext_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  OgreBites::NativeWindowPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  {
    try {
      result = (arg1)->OgreBites::ApplicationContext::createWindow((Ogre::String const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = new OgreBites::NativeWindowPair((const OgreBites::NativeWindowPair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createWindow_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  uint32_t arg3 ;
  OgreBites::NativeWindowPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (arg1)->createWindow((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = new OgreBites::NativeWindowPair((const OgreBites::NativeWindowPair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createWindowSwigExplicitApplicationContext_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  uint32_t arg3 ;
  OgreBites::NativeWindowPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (uint32_t)jarg3; 
  {
    try {
      result = (arg1)->OgreBites::ApplicationContext::createWindow((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = new OgreBites::NativeWindowPair((const OgreBites::NativeWindowPair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createWindow_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  OgreBites::NativeWindowPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->createWindow((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = new OgreBites::NativeWindowPair((const OgreBites::NativeWindowPair &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1createWindowSwigExplicitApplicationContext_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  Ogre::String *arg2 = 0 ;
  OgreBites::NativeWindowPair result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (arg1)->OgreBites::ApplicationContext::createWindow((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::NativeWindowPair **)&jresult = new OgreBites::NativeWindowPair((const OgreBites::NativeWindowPair &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1getDefaultMediaDir(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  Ogre::String result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = OgreBites::ApplicationContext::getDefaultMediaDir();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1initAppForAndroid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3) {
  OgreBites::ApplicationContext *arg1 = (OgreBites::ApplicationContext *) 0 ;
  jobject arg2 ;
  jobject arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ApplicationContext **)&jarg1; 
  arg2 = jarg2; 
  arg3 = jarg3; 
  {
    try {
      OgreBites_ApplicationContext_initAppForAndroid(arg1,arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  OgreBites::ApplicationContext *obj = *((OgreBites::ApplicationContext **)&objarg);
  (void)jcls;
  SwigDirector_ApplicationContext *director = static_cast<SwigDirector_ApplicationContext *>(obj);
  director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  OgreBites::ApplicationContext *obj = *((OgreBites::ApplicationContext **)&objarg);
  SwigDirector_ApplicationContext *director = static_cast<SwigDirector_ApplicationContext *>(obj);
  (void)jcls;
  director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1CameraMan(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::SceneNode *arg1 = (Ogre::SceneNode *) 0 ;
  OgreBites::CameraMan *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::SceneNode **)&jarg1; 
  {
    try {
      result = (OgreBites::CameraMan *)new OgreBites::CameraMan(arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::CameraMan **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1setCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(Ogre::SceneNode **)&jarg2; 
  {
    try {
      (arg1)->setCamera(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1getCamera(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  {
    try {
      result = (Ogre::SceneNode *)(arg1)->getCamera();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::SceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1setTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(Ogre::SceneNode **)&jarg2; 
  {
    try {
      (arg1)->setTarget(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1getTarget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  Ogre::SceneNode *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  {
    try {
      result = (Ogre::SceneNode *)(arg1)->getTarget();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::SceneNode **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1setYawPitchDist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  Ogre::Radian arg2 ;
  Ogre::Radian arg3 ;
  Ogre::Real arg4 ;
  Ogre::Radian *argp2 ;
  Ogre::Radian *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  argp2 = *(Ogre::Radian **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::Radian");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(Ogre::Radian **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::Radian");
    return ;
  }
  arg3 = *argp3; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      (arg1)->setYawPitchDist(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1setTopSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setTopSpeed(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1getTopSpeed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->getTopSpeed();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1setStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  OgreBites::CameraStyle arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = (OgreBites::CameraStyle)jarg2; 
  {
    try {
      (arg1)->setStyle(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1getStyle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  OgreBites::CameraStyle result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  {
    try {
      result = (OgreBites::CameraStyle)(arg1)->getStyle();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1manualStop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  {
    try {
      (arg1)->manualStop();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1frameRendered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->frameRendered((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1keyPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  OgreBites::KeyboardEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(OgreBites::KeyboardEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::KeyboardEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->keyPressed((OgreBites::KeyboardEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1keyReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  OgreBites::KeyboardEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(OgreBites::KeyboardEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::KeyboardEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->keyReleased((OgreBites::KeyboardEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1mouseMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  OgreBites::MouseMotionEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(OgreBites::MouseMotionEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseMotionEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mouseMoved((OgreBites::MouseMotionEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1mouseWheelRolled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  OgreBites::MouseWheelEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(OgreBites::MouseWheelEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseWheelEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mouseWheelRolled((OgreBites::MouseWheelEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1mousePressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseButtonEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mousePressed((OgreBites::MouseButtonEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1mouseReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseButtonEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mouseReleased((OgreBites::MouseButtonEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1CameraMan(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::CameraMan *arg1 = (OgreBites::CameraMan *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::CameraMan **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1WindowEventListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::WindowEventListener *arg1 = (Ogre::WindowEventListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::WindowEventListener **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventListener_1windowMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::WindowEventListener *arg1 = (Ogre::WindowEventListener *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::WindowEventListener **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->windowMoved(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventListener_1windowResized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::WindowEventListener *arg1 = (Ogre::WindowEventListener *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::WindowEventListener **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->windowResized(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventListener_1windowClosing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ogre::WindowEventListener *arg1 = (Ogre::WindowEventListener *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::WindowEventListener **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      result = (bool)(arg1)->windowClosing(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventListener_1windowClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::WindowEventListener *arg1 = (Ogre::WindowEventListener *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::WindowEventListener **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->windowClosed(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventListener_1windowFocusChange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::WindowEventListener *arg1 = (Ogre::WindowEventListener *) 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::WindowEventListener **)&jarg1; 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      (arg1)->windowFocusChange(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1WindowEventListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::WindowEventListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::WindowEventListener *)new Ogre::WindowEventListener();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::WindowEventListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1messagePump(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  {
    try {
      Ogre::WindowEventUtilities::messagePump();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1addWindowEventListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  Ogre::WindowEventListener *arg2 = (Ogre::WindowEventListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RenderWindow **)&jarg1; 
  arg2 = *(Ogre::WindowEventListener **)&jarg2; 
  {
    try {
      Ogre::WindowEventUtilities::addWindowEventListener(arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1removeWindowEventListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  Ogre::WindowEventListener *arg2 = (Ogre::WindowEventListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::RenderWindow **)&jarg1; 
  arg2 = *(Ogre::WindowEventListener **)&jarg2; 
  {
    try {
      Ogre::WindowEventUtilities::removeWindowEventListener(arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1_1addRenderWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RenderWindow **)&jarg1; 
  {
    try {
      Ogre::WindowEventUtilities::_addRenderWindow(arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1_1removeRenderWindow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::RenderWindow *arg1 = (Ogre::RenderWindow *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::RenderWindow **)&jarg1; 
  {
    try {
      Ogre::WindowEventUtilities::_removeRenderWindow(arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1_1msListeners_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::WindowEventUtilities::WindowEventListeners *arg1 = (Ogre::WindowEventUtilities::WindowEventListeners *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::WindowEventUtilities::WindowEventListeners **)&jarg1; 
  Ogre::WindowEventUtilities::_msListeners = *arg1;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1_1msListeners_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::WindowEventUtilities::WindowEventListeners *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::WindowEventUtilities::WindowEventListeners *)&Ogre::WindowEventUtilities::_msListeners;
  *(Ogre::WindowEventUtilities::WindowEventListeners **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1_1msWindows_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::RenderWindowList *arg1 = (Ogre::RenderWindowList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::RenderWindowList **)&jarg1; 
  Ogre::WindowEventUtilities::_msWindows = *arg1;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_WindowEventUtilities_1_1msWindows_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::RenderWindowList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Ogre::RenderWindowList *)&Ogre::WindowEventUtilities::_msWindows;
  *(Ogre::RenderWindowList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1WindowEventUtilities(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::WindowEventUtilities *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::WindowEventUtilities *)new Ogre::WindowEventUtilities();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::WindowEventUtilities **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1WindowEventUtilities(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::WindowEventUtilities *arg1 = (Ogre::WindowEventUtilities *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::WindowEventUtilities **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1TrayListener(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::TrayListener *arg1 = (OgreBites::TrayListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::TrayListener **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayListener_1buttonHit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayListener *arg1 = (OgreBites::TrayListener *) 0 ;
  OgreBites::Button *arg2 = (OgreBites::Button *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayListener **)&jarg1; 
  arg2 = *(OgreBites::Button **)&jarg2; 
  {
    try {
      (arg1)->buttonHit(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayListener_1itemSelected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayListener *arg1 = (OgreBites::TrayListener *) 0 ;
  OgreBites::SelectMenu *arg2 = (OgreBites::SelectMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayListener **)&jarg1; 
  arg2 = *(OgreBites::SelectMenu **)&jarg2; 
  {
    try {
      (arg1)->itemSelected(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayListener_1labelHit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayListener *arg1 = (OgreBites::TrayListener *) 0 ;
  OgreBites::Label *arg2 = (OgreBites::Label *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayListener **)&jarg1; 
  arg2 = *(OgreBites::Label **)&jarg2; 
  {
    try {
      (arg1)->labelHit(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayListener_1sliderMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayListener *arg1 = (OgreBites::TrayListener *) 0 ;
  OgreBites::Slider *arg2 = (OgreBites::Slider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayListener **)&jarg1; 
  arg2 = *(OgreBites::Slider **)&jarg2; 
  {
    try {
      (arg1)->sliderMoved(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayListener_1checkBoxToggled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayListener *arg1 = (OgreBites::TrayListener *) 0 ;
  OgreBites::CheckBox *arg2 = (OgreBites::CheckBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayListener **)&jarg1; 
  arg2 = *(OgreBites::CheckBox **)&jarg2; 
  {
    try {
      (arg1)->checkBoxToggled(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayListener_1okDialogClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::TrayListener *arg1 = (OgreBites::TrayListener *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayListener **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->okDialogClosed((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayListener_1yesNoDialogClosed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  OgreBites::TrayListener *arg1 = (OgreBites::TrayListener *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayListener **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->yesNoDialogClosed((Ogre::DisplayString const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1TrayListener(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::TrayListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::TrayListener *)new OgreBites::TrayListener();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::TrayListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1Widget(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OgreBites::Widget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (OgreBites::Widget *)new OgreBites::Widget();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Widget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1Widget(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1cleanup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      (arg1)->cleanup();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1nukeOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      OgreBites::Widget::nukeOverlayElement(arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1isCursorOver_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  jboolean jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  Ogre::Real arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (bool)OgreBites::Widget::isCursorOver(arg1,(Ogre::Vector2 const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1isCursorOver_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)OgreBites::Widget::isCursorOver(arg1,(Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1cursorOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  Ogre::Vector2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return 0;
  } 
  {
    try {
      result = OgreBites::Widget::cursorOffset(arg1,(Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Vector2 **)&jresult = new Ogre::Vector2((const Ogre::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1getCaptionWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jfloat jresult = 0 ;
  Ogre::DisplayString *arg1 = 0 ;
  Ogre::TextAreaOverlayElement *arg2 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::DisplayString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg2 = *(Ogre::TextAreaOverlayElement **)&jarg2; 
  {
    try {
      result = (Ogre::Real)OgreBites::Widget::getCaptionWidth((Ogre::DisplayString const &)*arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1fitCaptionToArea(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  Ogre::DisplayString *arg1 = 0 ;
  Ogre::TextAreaOverlayElement *arg2 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::DisplayString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  arg2 = *(Ogre::TextAreaOverlayElement **)&jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      OgreBites::Widget::fitCaptionToArea((Ogre::DisplayString const &)*arg1,arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1getOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->getOverlayElement();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &(arg1)->getName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1getTrayLocation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  OgreBites::TrayLocation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      result = (OgreBites::TrayLocation)(arg1)->getTrayLocation();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1hide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      (arg1)->hide();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1show(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      (arg1)->show();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1_1cursorPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorPressed((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1_1cursorReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorReleased((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1_1cursorMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->_cursorMoved((Ogre::Vector2 const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1_1focusLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  {
    try {
      (arg1)->_focusLost();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1_1assignToTray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  OgreBites::TrayLocation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  {
    try {
      (arg1)->_assignToTray(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Widget_1_1assignListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Widget *arg1 = (OgreBites::Widget *) 0 ;
  OgreBites::TrayListener *arg2 = (OgreBites::TrayListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Widget **)&jarg1; 
  arg2 = *(OgreBites::TrayListener **)&jarg2; 
  {
    try {
      (arg1)->_assignListener(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1Button(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::Real arg3 ;
  OgreBites::Button *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (OgreBites::Button *)new OgreBites::Button((Ogre::String const &)*arg1,(Ogre::DisplayString const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Button **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1Button(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::Button *arg1 = (OgreBites::Button *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::Button **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Button_1getCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Button *arg1 = (OgreBites::Button *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Button **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Button_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::Button *arg1 = (OgreBites::Button *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Button **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_Button_1getState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::Button *arg1 = (OgreBites::Button *) 0 ;
  OgreBites::ButtonState *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Button **)&jarg1; 
  {
    try {
      result = (OgreBites::ButtonState *) &(arg1)->getState();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Button_1_1cursorPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Button *arg1 = (OgreBites::Button *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Button **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorPressed((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Button_1_1cursorReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Button *arg1 = (OgreBites::Button *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Button **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorReleased((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Button_1_1cursorMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  OgreBites::Button *arg1 = (OgreBites::Button *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Button **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->_cursorMoved((Ogre::Vector2 const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Button_1_1focusLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::Button *arg1 = (OgreBites::Button *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Button **)&jarg1; 
  {
    try {
      (arg1)->_focusLost();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1TextBox(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  OgreBites::TextBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      result = (OgreBites::TextBox *)new OgreBites::TextBox((Ogre::String const &)*arg1,(Ogre::DisplayString const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::TextBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1setPadding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setPadding(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1getPadding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->getPadding();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1getCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1getText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getText();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1setText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setText((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1setTextAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::TextAreaOverlayElement::Alignment arg2 ;
  Ogre::TextAreaOverlayElement::Alignment *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  argp2 = *(Ogre::TextAreaOverlayElement::Alignment **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::TextAreaOverlayElement::Alignment");
    return ;
  }
  arg2 = *argp2; 
  {
    try {
      (arg1)->setTextAlignment(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1clearText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      (arg1)->clearText();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1appendText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->appendText((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1refitContents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      (arg1)->refitContents();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1setScrollPercentage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setScrollPercentage(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1getScrollPercentage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->getScrollPercentage();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1getHeightInLines(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      result = (unsigned int)(arg1)->getHeightInLines();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1_1cursorPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorPressed((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1_1cursorReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorReleased((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1_1cursorMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->_cursorMoved((Ogre::Vector2 const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1_1focusLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      (arg1)->_focusLost();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1TextBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::TextBox *arg1 = (OgreBites::TextBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::TextBox **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1SelectMenu(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  size_t arg5 ;
  OgreBites::SelectMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      result = (OgreBites::SelectMenu *)new OgreBites::SelectMenu((Ogre::String const &)*arg1,(Ogre::DisplayString const &)*arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::SelectMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1copyItemsFrom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  OgreBites::SelectMenu *arg2 = (OgreBites::SelectMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(OgreBites::SelectMenu **)&jarg2; 
  {
    try {
      (arg1)->copyItemsFrom(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1isExpanded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isExpanded();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1getCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1getItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      result = (Ogre::StringVector *) &(arg1)->getItems();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1getNumItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      result = (arg1)->getNumItems();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1setItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::StringVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::StringVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::StringVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setItems((Ogre::StringVector const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1addItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addItem((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1insertItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  size_t arg2 ;
  Ogre::DisplayString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = *(Ogre::DisplayString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->insertItem(arg2,(Ogre::DisplayString const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1removeItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->removeItem((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1removeItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->removeItem(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1clearItems(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      (arg1)->clearItems();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1selectItem_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  size_t arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->selectItem(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1selectItem_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      (arg1)->selectItem(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1containsItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->containsItem((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1selectItem_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->selectItem((Ogre::DisplayString const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1selectItem_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->selectItem((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1getSelectedItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::DisplayString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      result = (arg1)->getSelectedItem();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = new Ogre::DisplayString((const Ogre::DisplayString &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1getSelectionIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      result = (int)(arg1)->getSelectionIndex();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1_1cursorPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorPressed((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1_1cursorReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorReleased((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1_1cursorMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->_cursorMoved((Ogre::Vector2 const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1_1focusLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      (arg1)->_focusLost();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1SelectMenu(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::SelectMenu *arg1 = (OgreBites::SelectMenu *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::SelectMenu **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1Label(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::Real arg3 ;
  OgreBites::Label *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (OgreBites::Label *)new OgreBites::Label((Ogre::String const &)*arg1,(Ogre::DisplayString const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Label **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Label_1getCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Label *arg1 = (OgreBites::Label *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Label **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Label_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::Label *arg1 = (OgreBites::Label *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Label **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Label_1_1cursorPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Label *arg1 = (OgreBites::Label *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Label **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorPressed((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_Label_1_1isFitToTray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::Label *arg1 = (OgreBites::Label *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Label **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->_isFitToTray();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1Label(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::Label *arg1 = (OgreBites::Label *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::Label **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1Separator(JNIEnv *jenv, jclass jcls, jstring jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::Real arg2 ;
  OgreBites::Separator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      result = (OgreBites::Separator *)new OgreBites::Separator((Ogre::String const &)*arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Separator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_Separator_1_1isFitToTray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::Separator *arg1 = (OgreBites::Separator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Separator **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->_isFitToTray();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1Separator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::Separator *arg1 = (OgreBites::Separator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::Separator **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1Slider(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jlong jarg8) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  Ogre::Real arg7 ;
  unsigned int arg8 ;
  OgreBites::Slider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  arg7 = (Ogre::Real)jarg7; 
  arg8 = (unsigned int)jarg8; 
  {
    try {
      result = (OgreBites::Slider *)new OgreBites::Slider((Ogre::String const &)*arg1,(Ogre::DisplayString const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Slider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1setRange_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jlong jarg4, jboolean jarg5) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  unsigned int arg4 ;
  bool arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      (arg1)->setRange(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1setRange_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jlong jarg4) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  unsigned int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (unsigned int)jarg4; 
  {
    try {
      (arg1)->setRange(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1getValueCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getValueCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1setValueCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setValueCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1setValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jboolean jarg3) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::Real arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setValue(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1setValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setValue(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->getValue();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1getCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1_1cursorPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorPressed((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1_1cursorReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorReleased((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1_1cursorMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->_cursorMoved((Ogre::Vector2 const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1_1focusLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  {
    try {
      (arg1)->_focusLost();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1Slider(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::Slider *arg1 = (OgreBites::Slider *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::Slider **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1ParamsPanel(JNIEnv *jenv, jclass jcls, jstring jarg1, jfloat jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::Real arg2 ;
  unsigned int arg3 ;
  OgreBites::ParamsPanel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      result = (OgreBites::ParamsPanel *)new OgreBites::ParamsPanel((Ogre::String const &)*arg1,arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::ParamsPanel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1setAllParamNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  Ogre::StringVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  arg2 = *(Ogre::StringVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::StringVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAllParamNames((Ogre::StringVector const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1getAllParamNames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  Ogre::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  {
    try {
      result = (Ogre::StringVector *) &(arg1)->getAllParamNames();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1setAllParamValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  Ogre::StringVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  arg2 = *(Ogre::StringVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::StringVector const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setAllParamValues((Ogre::StringVector const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1setParamValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::DisplayString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  arg3 = *(Ogre::DisplayString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setParamValue((Ogre::DisplayString const &)*arg2,(Ogre::DisplayString const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1setParamValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  unsigned int arg2 ;
  Ogre::DisplayString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = *(Ogre::DisplayString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setParamValue(arg2,(Ogre::DisplayString const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1getParamValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::DisplayString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  {
    try {
      result = (arg1)->getParamValue((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = new Ogre::DisplayString((const Ogre::DisplayString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1getParamValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  unsigned int arg2 ;
  Ogre::DisplayString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      result = (arg1)->getParamValue(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = new Ogre::DisplayString((const Ogre::DisplayString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1getAllParamValues(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  Ogre::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  {
    try {
      result = (Ogre::StringVector *) &(arg1)->getAllParamValues();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1ParamsPanel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::ParamsPanel *arg1 = (OgreBites::ParamsPanel *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::ParamsPanel **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1CheckBox(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::Real arg3 ;
  OgreBites::CheckBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (OgreBites::CheckBox *)new OgreBites::CheckBox((Ogre::String const &)*arg1,(Ogre::DisplayString const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::CheckBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1getCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1isChecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isChecked();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1setChecked_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->setChecked(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1setChecked_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setChecked(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1toggle_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->toggle(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1toggle_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  {
    try {
      (arg1)->toggle();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1_1cursorPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_cursorPressed((Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1_1cursorMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return ;
  } 
  arg3 = (float)jarg3; 
  {
    try {
      (arg1)->_cursorMoved((Ogre::Vector2 const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1_1focusLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  {
    try {
      (arg1)->_focusLost();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1CheckBox(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::CheckBox *arg1 = (OgreBites::CheckBox *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::CheckBox **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1DecorWidget(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::String *arg2 = 0 ;
  OgreBites::DecorWidget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (OgreBites::DecorWidget *)new OgreBites::DecorWidget((Ogre::String const &)*arg1,(Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::DecorWidget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1DecorWidget(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::DecorWidget *arg1 = (OgreBites::DecorWidget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::DecorWidget **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1ProgressBar(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  OgreBites::ProgressBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      result = (OgreBites::ProgressBar *)new OgreBites::ProgressBar((Ogre::String const &)*arg1,(Ogre::DisplayString const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::ProgressBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ProgressBar_1setProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::ProgressBar *arg1 = (OgreBites::ProgressBar *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ProgressBar **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setProgress(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_ProgressBar_1getProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::ProgressBar *arg1 = (OgreBites::ProgressBar *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ProgressBar **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->getProgress();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ProgressBar_1getCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::ProgressBar *arg1 = (OgreBites::ProgressBar *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ProgressBar **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ProgressBar_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::ProgressBar *arg1 = (OgreBites::ProgressBar *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ProgressBar **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ProgressBar_1getComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::ProgressBar *arg1 = (OgreBites::ProgressBar *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ProgressBar **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &(arg1)->getComment();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_ProgressBar_1setComment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::ProgressBar *arg1 = (OgreBites::ProgressBar *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::ProgressBar **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setComment((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1ProgressBar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::ProgressBar *arg1 = (OgreBites::ProgressBar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::ProgressBar **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1TrayManager_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  OgreBites::TrayListener *arg3 = (OgreBites::TrayListener *) 0 ;
  OgreBites::TrayManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  (void)jarg3_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  arg3 = *(OgreBites::TrayListener **)&jarg3; 
  {
    try {
      result = (OgreBites::TrayManager *)new OgreBites::TrayManager((Ogre::String const &)*arg1,arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::TrayManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1TrayManager_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::RenderWindow *arg2 = (Ogre::RenderWindow *) 0 ;
  OgreBites::TrayManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  arg2 = *(Ogre::RenderWindow **)&jarg2; 
  {
    try {
      result = (OgreBites::TrayManager *)new OgreBites::TrayManager((Ogre::String const &)*arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::TrayManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1TrayManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1screenToScene(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  Ogre::Ray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Camera **)&jarg1; 
  arg2 = *(Ogre::Vector2 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector2 const & reference is null");
    return 0;
  } 
  {
    try {
      result = OgreBites::TrayManager::screenToScene(arg1,(Ogre::Vector2 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Ray **)&jresult = new Ogre::Ray((const Ogre::Ray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1sceneToScreen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Ogre::Camera *arg1 = (Ogre::Camera *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Ogre::Vector2 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Camera **)&jarg1; 
  arg2 = *(Ogre::Vector3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Vector3 const & reference is null");
    return 0;
  } 
  {
    try {
      result = OgreBites::TrayManager::sceneToScreen(arg1,(Ogre::Vector3 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Vector2 **)&jresult = new Ogre::Vector2((const Ogre::Vector2 &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getTrayContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::OverlayContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  {
    try {
      result = (Ogre::OverlayContainer *)(arg1)->getTrayContainer(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getBackdropLayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Overlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::Overlay *)(arg1)->getBackdropLayer();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Overlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getTraysLayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Overlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::Overlay *)(arg1)->getTraysLayer();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Overlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getCursorLayer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Overlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::Overlay *)(arg1)->getCursorLayer();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Overlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getBackdropContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)(arg1)->getBackdropContainer();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getCursorContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)(arg1)->getCursorContainer();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getCursorImage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->getCursorImage();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1setListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayListener *arg2 = (OgreBites::TrayListener *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::TrayListener **)&jarg2; 
  {
    try {
      (arg1)->setListener(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getListener(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayListener *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (OgreBites::TrayListener *)(arg1)->getListener();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::TrayListener **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->showAll();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1hideAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->hideAll();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showBackdrop_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->showBackdrop((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showBackdrop_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->showBackdrop();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1hideBackdrop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->hideBackdrop();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showCursor_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->showCursor((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showCursor_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->showCursor();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1hideCursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->hideCursor();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1refreshCursor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->refreshCursor();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showTrays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->showTrays();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1hideTrays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->hideTrays();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1isCursorVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isCursorVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1isBackdropVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isBackdropVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1areTraysVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->areTraysVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1setTrayWidgetAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::GuiHorizontalAlignment arg3 ;
  Ogre::GuiHorizontalAlignment *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  argp3 = *(Ogre::GuiHorizontalAlignment **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null Ogre::GuiHorizontalAlignment");
    return ;
  }
  arg3 = *argp3; 
  {
    try {
      (arg1)->setTrayWidgetAlignment(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1setWidgetPadding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setWidgetPadding(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1setWidgetSpacing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setWidgetSpacing(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1setTrayPadding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setTrayPadding(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getWidgetPadding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((OgreBites::TrayManager const *)arg1)->getWidgetPadding();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getWidgetSpacing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((OgreBites::TrayManager const *)arg1)->getWidgetSpacing();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getTrayPadding(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((OgreBites::TrayManager const *)arg1)->getTrayPadding();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1adjustTrays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->adjustTrays();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getCursorRay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::Ray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(Ogre::Camera **)&jarg2; 
  {
    try {
      result = (arg1)->getCursorRay(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Ray **)&jresult = new Ogre::Ray((const Ogre::Ray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createButton_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Real arg5 ;
  OgreBites::Button *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (Ogre::Real)jarg5; 
  {
    try {
      result = (OgreBites::Button *)(arg1)->createButton(arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Button **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createButton_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  OgreBites::Button *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (OgreBites::Button *)(arg1)->createButton(arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Button **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createTextBox(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  OgreBites::TextBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  {
    try {
      result = (OgreBites::TextBox *)(arg1)->createTextBox(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::TextBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createThickSelectMenu_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  unsigned int arg6 ;
  Ogre::StringVector *arg7 = 0 ;
  OgreBites::SelectMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = *(Ogre::StringVector **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::StringVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (OgreBites::SelectMenu *)(arg1)->createThickSelectMenu(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6,(Ogre::StringVector const &)*arg7);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::SelectMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createThickSelectMenu_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  unsigned int arg6 ;
  OgreBites::SelectMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = (OgreBites::SelectMenu *)(arg1)->createThickSelectMenu(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::SelectMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createLongSelectMenu_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7, jlong jarg8, jobject jarg8_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  unsigned int arg7 ;
  Ogre::StringVector *arg8 = 0 ;
  OgreBites::SelectMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg8_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  arg7 = (unsigned int)jarg7; 
  arg8 = *(Ogre::StringVector **)&jarg8;
  if (!arg8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::StringVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (OgreBites::SelectMenu *)(arg1)->createLongSelectMenu(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6,arg7,(Ogre::StringVector const &)*arg8);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::SelectMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createLongSelectMenu_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  unsigned int arg7 ;
  OgreBites::SelectMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  arg7 = (unsigned int)jarg7; 
  {
    try {
      result = (OgreBites::SelectMenu *)(arg1)->createLongSelectMenu(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6,arg7);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::SelectMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createLongSelectMenu_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jlong jarg6, jlong jarg7, jobject jarg7_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  unsigned int arg6 ;
  Ogre::StringVector *arg7 = 0 ;
  OgreBites::SelectMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg7_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (unsigned int)jarg6; 
  arg7 = *(Ogre::StringVector **)&jarg7;
  if (!arg7) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::StringVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (OgreBites::SelectMenu *)(arg1)->createLongSelectMenu(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6,(Ogre::StringVector const &)*arg7);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::SelectMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createLongSelectMenu_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  unsigned int arg6 ;
  OgreBites::SelectMenu *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (unsigned int)jarg6; 
  {
    try {
      result = (OgreBites::SelectMenu *)(arg1)->createLongSelectMenu(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::SelectMenu **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createLabel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  OgreBites::Label *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  {
    try {
      result = (OgreBites::Label *)(arg1)->createLabel(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Label **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createLabel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  OgreBites::Label *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  {
    try {
      result = (OgreBites::Label *)(arg1)->createLabel(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Label **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createSeparator_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  OgreBites::Separator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      result = (OgreBites::Separator *)(arg1)->createSeparator(arg2,(Ogre::String const &)*arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Separator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createSeparator_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  OgreBites::Separator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (OgreBites::Separator *)(arg1)->createSeparator(arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Separator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createThickSlider(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  Ogre::Real arg7 ;
  Ogre::Real arg8 ;
  unsigned int arg9 ;
  OgreBites::Slider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  arg7 = (Ogre::Real)jarg7; 
  arg8 = (Ogre::Real)jarg8; 
  arg9 = (unsigned int)jarg9; 
  {
    try {
      result = (OgreBites::Slider *)(arg1)->createThickSlider(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6,arg7,arg8,arg9);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Slider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createLongSlider_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jfloat jarg9, jlong jarg10) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  Ogre::Real arg7 ;
  Ogre::Real arg8 ;
  Ogre::Real arg9 ;
  unsigned int arg10 ;
  OgreBites::Slider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  arg7 = (Ogre::Real)jarg7; 
  arg8 = (Ogre::Real)jarg8; 
  arg9 = (Ogre::Real)jarg9; 
  arg10 = (unsigned int)jarg10; 
  {
    try {
      result = (OgreBites::Slider *)(arg1)->createLongSlider(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Slider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createLongSlider_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7, jfloat jarg8, jlong jarg9) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  Ogre::Real arg7 ;
  Ogre::Real arg8 ;
  unsigned int arg9 ;
  OgreBites::Slider *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  arg7 = (Ogre::Real)jarg7; 
  arg8 = (Ogre::Real)jarg8; 
  arg9 = (unsigned int)jarg9; 
  {
    try {
      result = (OgreBites::Slider *)(arg1)->createLongSlider(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6,arg7,arg8,arg9);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Slider **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createParamsPanel_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jfloat jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  unsigned int arg5 ;
  OgreBites::ParamsPanel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (unsigned int)jarg5; 
  {
    try {
      result = (OgreBites::ParamsPanel *)(arg1)->createParamsPanel(arg2,(Ogre::String const &)*arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::ParamsPanel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createParamsPanel_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jfloat jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::Real arg4 ;
  Ogre::StringVector *arg5 = 0 ;
  OgreBites::ParamsPanel *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = *(Ogre::StringVector **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::StringVector const & reference is null");
    return 0;
  } 
  {
    try {
      result = (OgreBites::ParamsPanel *)(arg1)->createParamsPanel(arg2,(Ogre::String const &)*arg3,arg4,(Ogre::StringVector const &)*arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::ParamsPanel **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createCheckBox_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  OgreBites::CheckBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  {
    try {
      result = (OgreBites::CheckBox *)(arg1)->createCheckBox(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::CheckBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createCheckBox_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  OgreBites::CheckBox *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  {
    try {
      result = (OgreBites::CheckBox *)(arg1)->createCheckBox(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::CheckBox **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createDecorWidget(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  OgreBites::DecorWidget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (OgreBites::DecorWidget *)(arg1)->createDecorWidget(arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::DecorWidget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1createProgressBar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jlong jarg4, jfloat jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  Ogre::DisplayString *arg4 = 0 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  OgreBites::ProgressBar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(Ogre::DisplayString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return 0;
  } 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  {
    try {
      result = (OgreBites::ProgressBar *)(arg1)->createProgressBar(arg2,(Ogre::String const &)*arg3,(Ogre::DisplayString const &)*arg4,arg5,arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::ProgressBar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showFrameStats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->showFrameStats(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showFrameStats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  {
    try {
      (arg1)->showFrameStats(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1hideFrameStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->hideFrameStats();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1areFrameStatsVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->areFrameStatsVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1toggleAdvancedFrameStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->toggleAdvancedFrameStats();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showLogo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->showLogo(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showLogo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  {
    try {
      (arg1)->showLogo(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1hideLogo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->hideLogo();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1isLogoVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isLogoVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showLoadingBar_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jfloat jarg4) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  Ogre::Real arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  {
    try {
      (arg1)->showLoadingBar(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showLoadingBar_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  {
    try {
      (arg1)->showLoadingBar(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showLoadingBar_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  unsigned int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  {
    try {
      (arg1)->showLoadingBar(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showLoadingBar_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->showLoadingBar();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1hideLoadingBar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->hideLoadingBar();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1isLoadingBarVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isLoadingBarVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showOkDialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::DisplayString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  arg3 = *(Ogre::DisplayString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->showOkDialog((Ogre::DisplayString const &)*arg2,(Ogre::DisplayString const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1showYesNoDialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  Ogre::DisplayString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  arg3 = *(Ogre::DisplayString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->showYesNoDialog((Ogre::DisplayString const &)*arg2,(Ogre::DisplayString const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1closeDialog(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->closeDialog();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1isDialogVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->isDialogVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getWidget_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  OgreBites::Widget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (OgreBites::Widget *)(arg1)->getWidget(arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Widget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getWidget_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  OgreBites::Widget *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (OgreBites::Widget *)(arg1)->getWidget((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::Widget **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getNumWidgets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      result = (unsigned int)(arg1)->getNumWidgets();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1getWidgets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  OgreBites::WidgetList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  {
    try {
      result = (OgreBites::WidgetList *) &((OgreBites::TrayManager const *)arg1)->getWidgets(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::WidgetList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1locateWidgetInTray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::Widget *arg2 = (OgreBites::Widget *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::Widget **)&jarg2; 
  {
    try {
      result = (int)(arg1)->locateWidgetInTray(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1destroyWidget_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::Widget *arg2 = (OgreBites::Widget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::Widget **)&jarg2; 
  {
    try {
      (arg1)->destroyWidget(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1destroyWidget_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->destroyWidget(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1destroyWidget_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->destroyWidget(arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1destroyWidget_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->destroyWidget((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1destroyAllWidgetsInTray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  {
    try {
      (arg1)->destroyAllWidgetsInTray(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1destroyAllWidgets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->destroyAllWidgets();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1moveWidgetToTray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::Widget *arg2 = (OgreBites::Widget *) 0 ;
  OgreBites::TrayLocation arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::Widget **)&jarg2; 
  arg3 = (OgreBites::TrayLocation)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->moveWidgetToTray(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1moveWidgetToTray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::Widget *arg2 = (OgreBites::Widget *) 0 ;
  OgreBites::TrayLocation arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::Widget **)&jarg2; 
  arg3 = (OgreBites::TrayLocation)jarg3; 
  {
    try {
      (arg1)->moveWidgetToTray(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1moveWidgetToTray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jlong jarg4) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  OgreBites::TrayLocation arg3 ;
  size_t arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (OgreBites::TrayLocation)jarg3; 
  arg4 = (size_t)jarg4; 
  {
    try {
      (arg1)->moveWidgetToTray((Ogre::String const &)*arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1moveWidgetToTray_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  OgreBites::TrayLocation arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (OgreBites::TrayLocation)jarg3; 
  {
    try {
      (arg1)->moveWidgetToTray((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1moveWidgetToTray_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4, jlong jarg5) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  OgreBites::TrayLocation arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (OgreBites::TrayLocation)jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->moveWidgetToTray(arg2,(Ogre::String const &)*arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1moveWidgetToTray_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3, jint jarg4) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  OgreBites::TrayLocation arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = (OgreBites::TrayLocation)jarg4; 
  {
    try {
      (arg1)->moveWidgetToTray(arg2,(Ogre::String const &)*arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1moveWidgetToTray_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4, jlong jarg5) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  size_t arg3 ;
  OgreBites::TrayLocation arg4 ;
  size_t arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (OgreBites::TrayLocation)jarg4; 
  arg5 = (size_t)jarg5; 
  {
    try {
      (arg1)->moveWidgetToTray(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1moveWidgetToTray_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  size_t arg3 ;
  OgreBites::TrayLocation arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (OgreBites::TrayLocation)jarg4; 
  {
    try {
      (arg1)->moveWidgetToTray(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1removeWidgetFromTray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::Widget *arg2 = (OgreBites::Widget *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::Widget **)&jarg2; 
  {
    try {
      (arg1)->removeWidgetFromTray(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1removeWidgetFromTray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->removeWidgetFromTray((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1removeWidgetFromTray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  Ogre::String *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->removeWidgetFromTray(arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1removeWidgetFromTray_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->removeWidgetFromTray(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1clearTray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::TrayLocation arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = (OgreBites::TrayLocation)jarg2; 
  {
    try {
      (arg1)->clearTray(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1clearAllTrays(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->clearAllTrays();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1frameRendered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->frameRendered((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1windowUpdate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->windowUpdate();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1resourceGroupScriptingStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->resourceGroupScriptingStarted((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1scriptParseStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(bool **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->scriptParseStarted((Ogre::String const &)*arg2,*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1scriptParseEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->scriptParseEnded((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1resourceGroupLoadStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  size_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (size_t)jarg3; 
  {
    try {
      (arg1)->resourceGroupLoadStarted((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1resourceLoadStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::ResourcePtr *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(Ogre::ResourcePtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::ResourcePtr const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->resourceLoadStarted((Ogre::ResourcePtr const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1resourceLoadEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->resourceLoadEnded();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1worldGeometryStageStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->worldGeometryStageStarted((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1worldGeometryStageEnded(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  {
    try {
      (arg1)->worldGeometryStageEnded();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1labelHit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::Label *arg2 = (OgreBites::Label *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::Label **)&jarg2; 
  {
    try {
      (arg1)->labelHit(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1buttonHit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::Button *arg2 = (OgreBites::Button *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::Button **)&jarg2; 
  {
    try {
      (arg1)->buttonHit(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1mousePressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseButtonEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mousePressed((OgreBites::MouseButtonEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1mouseReleased(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::MouseButtonEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::MouseButtonEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseButtonEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mouseReleased((OgreBites::MouseButtonEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1mouseMoved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  OgreBites::MouseMotionEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(OgreBites::MouseMotionEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::MouseMotionEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->mouseMoved((OgreBites::MouseMotionEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_new_1AdvancedRenderControls(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  OgreBites::TrayManager *arg1 = (OgreBites::TrayManager *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  OgreBites::AdvancedRenderControls *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::TrayManager **)&jarg1; 
  arg2 = *(Ogre::Camera **)&jarg2; 
  {
    try {
      result = (OgreBites::AdvancedRenderControls *)new OgreBites::AdvancedRenderControls(arg1,arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(OgreBites::AdvancedRenderControls **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_delete_1AdvancedRenderControls(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OgreBites::AdvancedRenderControls *arg1 = (OgreBites::AdvancedRenderControls *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OgreBites::AdvancedRenderControls **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreBitesJNI_AdvancedRenderControls_1keyPressed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  OgreBites::AdvancedRenderControls *arg1 = (OgreBites::AdvancedRenderControls *) 0 ;
  OgreBites::KeyboardEvent *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::AdvancedRenderControls **)&jarg1; 
  arg2 = *(OgreBites::KeyboardEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "OgreBites::KeyboardEvent const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->keyPressed((OgreBites::KeyboardEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_AdvancedRenderControls_1frameRendered(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  OgreBites::AdvancedRenderControls *arg1 = (OgreBites::AdvancedRenderControls *) 0 ;
  Ogre::FrameEvent *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(OgreBites::AdvancedRenderControls **)&jarg1; 
  arg2 = *(Ogre::FrameEvent **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::FrameEvent const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->frameRendered((Ogre::FrameEvent const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_SGTechniqueResolverListener_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::MaterialManager::Listener **)&baseptr = *(OgreBites::SGTechniqueResolverListener **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ApplicationContext_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::FrameListener **)&baseptr = *(OgreBites::ApplicationContext **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_CameraMan_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::InputListener **)&baseptr = *(OgreBites::CameraMan **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Button_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::Button **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TextBox_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::TextBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_SelectMenu_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::SelectMenu **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Label_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::Label **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Separator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::Separator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_Slider_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::Slider **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ParamsPanel_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::ParamsPanel **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_CheckBox_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::CheckBox **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_DecorWidget_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::DecorWidget **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_ProgressBar_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::Widget **)&baseptr = *(OgreBites::ProgressBar **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_TrayManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::TrayListener **)&baseptr = *(OgreBites::TrayManager **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreBitesJNI_AdvancedRenderControls_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(OgreBites::InputListener **)&baseptr = *(OgreBites::AdvancedRenderControls **)&jarg1;
    return baseptr;
}

SWIGEXPORT void JNICALL Java_org_Ogre_OgreBitesJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[29] = {
    {
      "SwigDirector_InputListener_frameRendered", "(Lorg/Ogre/InputListener;J)V" 
    },
    {
      "SwigDirector_InputListener_keyPressed", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_InputListener_keyReleased", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_InputListener_touchMoved", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_InputListener_touchPressed", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_InputListener_touchReleased", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_InputListener_mouseMoved", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_InputListener_mouseWheelRolled", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_InputListener_mousePressed", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_InputListener_mouseReleased", "(Lorg/Ogre/InputListener;J)Z" 
    },
    {
      "SwigDirector_ApplicationContext_frameStarted", "(Lorg/Ogre/ApplicationContext;J)Z" 
    },
    {
      "SwigDirector_ApplicationContext_frameRenderingQueued", "(Lorg/Ogre/ApplicationContext;J)Z" 
    },
    {
      "SwigDirector_ApplicationContext_frameEnded", "(Lorg/Ogre/ApplicationContext;J)Z" 
    },
    {
      "SwigDirector_ApplicationContext_windowMoved", "(Lorg/Ogre/ApplicationContext;J)V" 
    },
    {
      "SwigDirector_ApplicationContext_windowResized", "(Lorg/Ogre/ApplicationContext;J)V" 
    },
    {
      "SwigDirector_ApplicationContext_windowClosing", "(Lorg/Ogre/ApplicationContext;J)Z" 
    },
    {
      "SwigDirector_ApplicationContext_windowClosed", "(Lorg/Ogre/ApplicationContext;J)V" 
    },
    {
      "SwigDirector_ApplicationContext_windowFocusChange", "(Lorg/Ogre/ApplicationContext;J)V" 
    },
    {
      "SwigDirector_ApplicationContext_setup", "(Lorg/Ogre/ApplicationContext;)V" 
    },
    {
      "SwigDirector_ApplicationContext_createRoot", "(Lorg/Ogre/ApplicationContext;)V" 
    },
    {
      "SwigDirector_ApplicationContext_oneTimeConfig", "(Lorg/Ogre/ApplicationContext;)Z" 
    },
    {
      "SwigDirector_ApplicationContext_locateResources", "(Lorg/Ogre/ApplicationContext;)V" 
    },
    {
      "SwigDirector_ApplicationContext_loadResources", "(Lorg/Ogre/ApplicationContext;)V" 
    },
    {
      "SwigDirector_ApplicationContext_reconfigure", "(Lorg/Ogre/ApplicationContext;Ljava/lang/String;J)V" 
    },
    {
      "SwigDirector_ApplicationContext_shutdown", "(Lorg/Ogre/ApplicationContext;)V" 
    },
    {
      "SwigDirector_ApplicationContext_createWindow__SWIG_0", "(Lorg/Ogre/ApplicationContext;Ljava/lang/String;JJJ)J" 
    },
    {
      "SwigDirector_ApplicationContext_createWindow__SWIG_1", "(Lorg/Ogre/ApplicationContext;Ljava/lang/String;JJ)J" 
    },
    {
      "SwigDirector_ApplicationContext_createWindow__SWIG_2", "(Lorg/Ogre/ApplicationContext;Ljava/lang/String;J)J" 
    },
    {
      "SwigDirector_ApplicationContext_createWindow__SWIG_3", "(Lorg/Ogre/ApplicationContext;Ljava/lang/String;)J" 
    }
  };
  Swig::jclass_OgreBitesJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_OgreBitesJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_method_ids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_method_ids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

