/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public final class VertexElementSemantic {
  public final static VertexElementSemantic VES_POSITION = new VertexElementSemantic("VES_POSITION", OgreJNI.VES_POSITION_get());
  public final static VertexElementSemantic VES_BLEND_WEIGHTS = new VertexElementSemantic("VES_BLEND_WEIGHTS", OgreJNI.VES_BLEND_WEIGHTS_get());
  public final static VertexElementSemantic VES_BLEND_INDICES = new VertexElementSemantic("VES_BLEND_INDICES", OgreJNI.VES_BLEND_INDICES_get());
  public final static VertexElementSemantic VES_NORMAL = new VertexElementSemantic("VES_NORMAL", OgreJNI.VES_NORMAL_get());
  public final static VertexElementSemantic VES_DIFFUSE = new VertexElementSemantic("VES_DIFFUSE", OgreJNI.VES_DIFFUSE_get());
  public final static VertexElementSemantic VES_SPECULAR = new VertexElementSemantic("VES_SPECULAR", OgreJNI.VES_SPECULAR_get());
  public final static VertexElementSemantic VES_TEXTURE_COORDINATES = new VertexElementSemantic("VES_TEXTURE_COORDINATES", OgreJNI.VES_TEXTURE_COORDINATES_get());
  public final static VertexElementSemantic VES_BINORMAL = new VertexElementSemantic("VES_BINORMAL", OgreJNI.VES_BINORMAL_get());
  public final static VertexElementSemantic VES_TANGENT = new VertexElementSemantic("VES_TANGENT", OgreJNI.VES_TANGENT_get());
  public final static VertexElementSemantic VES_COUNT = new VertexElementSemantic("VES_COUNT", OgreJNI.VES_COUNT_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static VertexElementSemantic swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + VertexElementSemantic.class + " with value " + swigValue);
  }

  private VertexElementSemantic(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private VertexElementSemantic(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private VertexElementSemantic(String swigName, VertexElementSemantic swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static VertexElementSemantic[] swigValues = { VES_POSITION, VES_BLEND_WEIGHTS, VES_BLEND_INDICES, VES_NORMAL, VES_DIFFUSE, VES_SPECULAR, VES_TEXTURE_COORDINATES, VES_BINORMAL, VES_TANGENT, VES_COUNT };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

