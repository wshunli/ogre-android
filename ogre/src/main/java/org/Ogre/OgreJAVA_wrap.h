/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_Ogre_WRAP_H_
#define SWIG_Ogre_WRAP_H_

class SwigDirector_Resource_Listener : public Ogre::Resource::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Resource_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_Resource_Listener();
    virtual void backgroundLoadingComplete(Ogre::Resource *arg0);
    virtual void backgroundPreparingComplete(Ogre::Resource *arg0);
    virtual void loadingComplete(Ogre::Resource *arg0);
    virtual void preparingComplete(Ogre::Resource *arg0);
    virtual void unloadingComplete(Ogre::Resource *arg0);
public:
    bool swig_overrides(int n) {
      return (n < 5 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<5> swig_override;
};

class SwigDirector_ResourceBackgroundQueue_Listener : public Ogre::ResourceBackgroundQueue::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ResourceBackgroundQueue_Listener(JNIEnv *jenv);
    virtual void operationCompleted(Ogre::BackgroundProcessTicket ticket, Ogre::BackgroundProcessResult const &result);
    virtual ~SwigDirector_ResourceBackgroundQueue_Listener();
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_AnimationTrack_Listener : public Ogre::AnimationTrack::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_AnimationTrack_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_AnimationTrack_Listener();
    virtual bool getInterpolatedKeyFrame(Ogre::AnimationTrack const *t, Ogre::TimeIndex const &timeIndex, Ogre::KeyFrame *kf);
public:
    bool swig_overrides(int n) {
      return (n < 1 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<1> swig_override;
};

class SwigDirector_RenderSystem_Listener : public Ogre::RenderSystem::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_RenderSystem_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_RenderSystem_Listener();
    virtual void eventOccurred(Ogre::String const &eventName, Ogre::NameValuePairList const *parameters = 0);
public:
    bool swig_overrides(int n) {
      return (n < 2 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<2> swig_override;
};

class SwigDirector_CompositorInstance_Listener : public Ogre::CompositorInstance::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_CompositorInstance_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_CompositorInstance_Listener();
    virtual void notifyMaterialSetup(Ogre::uint32 pass_id, Ogre::MaterialPtr &mat);
    virtual void notifyMaterialRender(Ogre::uint32 pass_id, Ogre::MaterialPtr &mat);
    virtual void notifyResourcesCreated(bool forResizeOnly);
    virtual void notifyResourcesReleased(bool forResizeOnly);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_MaterialSerializer_Listener : public Ogre::MaterialSerializer::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MaterialSerializer_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_MaterialSerializer_Listener();
    virtual void materialEventRaised(Ogre::MaterialSerializer *ser, Ogre::MaterialSerializer::SerializeEvent event, bool &skip, Ogre::Material const *mat);
    virtual void techniqueEventRaised(Ogre::MaterialSerializer *ser, Ogre::MaterialSerializer::SerializeEvent event, bool &skip, Ogre::Technique const *tech);
    virtual void passEventRaised(Ogre::MaterialSerializer *ser, Ogre::MaterialSerializer::SerializeEvent event, bool &skip, Ogre::Pass const *pass);
    virtual void textureUnitStateEventRaised(Ogre::MaterialSerializer *ser, Ogre::MaterialSerializer::SerializeEvent event, bool &skip, Ogre::TextureUnitState const *textureUnit);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_MaterialManager_Listener : public Ogre::MaterialManager::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MaterialManager_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_MaterialManager_Listener();
    virtual Ogre::Technique *handleSchemeNotFound(unsigned short schemeIndex, Ogre::String const &schemeName, Ogre::Material *originalMaterial, unsigned short lodIndex, Ogre::Renderable const *rend);
    virtual bool afterIlluminationPassesCreated(Ogre::Technique *technique);
    virtual bool beforeIlluminationPassesCleared(Ogre::Technique *technique);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_MovableObject_Listener : public Ogre::MovableObject::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_MovableObject_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_MovableObject_Listener();
    virtual void objectDestroyed(Ogre::MovableObject *arg0);
    virtual void objectAttached(Ogre::MovableObject *arg0);
    virtual void objectDetached(Ogre::MovableObject *arg0);
    virtual void objectMoved(Ogre::MovableObject *arg0);
    virtual bool objectRendering(Ogre::MovableObject const *arg0, Ogre::Camera const *arg1);
    virtual Ogre::LightList const *objectQueryLights(Ogre::MovableObject const *arg0);
public:
    bool swig_overrides(int n) {
      return (n < 6 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<6> swig_override;
};

class SwigDirector_Node_Listener : public Ogre::Node::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Node_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_Node_Listener();
    virtual void nodeUpdated(Ogre::Node const *arg0);
    virtual void nodeDestroyed(Ogre::Node const *arg0);
    virtual void nodeAttached(Ogre::Node const *arg0);
    virtual void nodeDetached(Ogre::Node const *arg0);
public:
    bool swig_overrides(int n) {
      return (n < 4 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<4> swig_override;
};

class SwigDirector_Camera_Listener : public Ogre::Camera::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Camera_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_Camera_Listener();
    virtual void cameraPreRenderScene(Ogre::Camera *cam);
    virtual void cameraPostRenderScene(Ogre::Camera *cam);
    virtual void cameraDestroyed(Ogre::Camera *cam);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_Viewport_Listener : public Ogre::Viewport::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_Viewport_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_Viewport_Listener();
    virtual void viewportCameraChanged(Ogre::Viewport *viewport);
    virtual void viewportDimensionsChanged(Ogre::Viewport *viewport);
    virtual void viewportDestroyed(Ogre::Viewport *viewport);
public:
    bool swig_overrides(int n) {
      return (n < 3 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<3> swig_override;
};

class SwigDirector_SceneManager_Listener : public Ogre::SceneManager::Listener, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_SceneManager_Listener(JNIEnv *jenv);
    virtual ~SwigDirector_SceneManager_Listener();
    virtual void preUpdateSceneGraph(Ogre::SceneManager *source, Ogre::Camera *camera);
    virtual void postUpdateSceneGraph(Ogre::SceneManager *source, Ogre::Camera *camera);
    virtual void preFindVisibleObjects(Ogre::SceneManager *source, Ogre::SceneManager::IlluminationRenderStage irs, Ogre::Viewport *v);
    virtual void postFindVisibleObjects(Ogre::SceneManager *source, Ogre::SceneManager::IlluminationRenderStage irs, Ogre::Viewport *v);
    virtual void shadowTexturesUpdated(size_t numberOfShadowTextures);
    virtual void shadowTextureCasterPreViewProj(Ogre::Light *light, Ogre::Camera *camera, size_t iteration);
    virtual void shadowTextureReceiverPreViewProj(Ogre::Light *light, Ogre::Frustum *frustum);
    virtual bool sortLightsAffectingFrustum(Ogre::LightList &lightList);
    virtual void sceneManagerDestroyed(Ogre::SceneManager *source);
public:
    bool swig_overrides(int n) {
      return (n < 9 ? swig_override[n] : false);
    }
protected:
    Swig::BoolArray<9> swig_override;
};


#endif
