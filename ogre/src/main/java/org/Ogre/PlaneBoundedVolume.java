/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class PlaneBoundedVolume {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected PlaneBoundedVolume(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(PlaneBoundedVolume obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_PlaneBoundedVolume(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setPlanes(SWIGTYPE_p_Ogre__vectorT_Ogre__Plane_t__type value) {
    OgreJNI.PlaneBoundedVolume_planes_set(swigCPtr, this, SWIGTYPE_p_Ogre__vectorT_Ogre__Plane_t__type.getCPtr(value));
  }

  public SWIGTYPE_p_Ogre__vectorT_Ogre__Plane_t__type getPlanes() {
    long cPtr = OgreJNI.PlaneBoundedVolume_planes_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__vectorT_Ogre__Plane_t__type(cPtr, false);
  }

  public void setOutside(Plane.Side value) {
    OgreJNI.PlaneBoundedVolume_outside_set(swigCPtr, this, value.swigValue());
  }

  public Plane.Side getOutside() {
    return Plane.Side.swigToEnum(OgreJNI.PlaneBoundedVolume_outside_get(swigCPtr, this));
  }

  public PlaneBoundedVolume() {
    this(OgreJNI.new_PlaneBoundedVolume__SWIG_0(), true);
  }

  public PlaneBoundedVolume(Plane.Side theOutside) {
    this(OgreJNI.new_PlaneBoundedVolume__SWIG_1(theOutside.swigValue()), true);
  }

  public boolean intersects(AxisAlignedBox box) {
    return OgreJNI.PlaneBoundedVolume_intersects__SWIG_0(swigCPtr, this, AxisAlignedBox.getCPtr(box), box);
  }

  public boolean intersects(Sphere sphere) {
    return OgreJNI.PlaneBoundedVolume_intersects__SWIG_1(swigCPtr, this, Sphere.getCPtr(sphere), sphere);
  }

  public SWIGTYPE_p_std__pairT_bool_float_t intersects(Ray ray) {
    return new SWIGTYPE_p_std__pairT_bool_float_t(OgreJNI.PlaneBoundedVolume_intersects__SWIG_2(swigCPtr, this, Ray.getCPtr(ray), ray), true);
  }

}
