/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class ParticleSystem extends StringInterface {
  private transient long swigCPtr;

  protected ParticleSystem(long cPtr, boolean cMemoryOwn) {
    super(OgreJNI.ParticleSystem_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ParticleSystem obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_ParticleSystem(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public ParticleSystem() {
    this(OgreJNI.new_ParticleSystem__SWIG_0(), true);
  }

  public ParticleSystem(String name, String resourceGroupName) {
    this(OgreJNI.new_ParticleSystem__SWIG_1(name, resourceGroupName), true);
  }

  public void setRenderer(String typeName) {
    OgreJNI.ParticleSystem_setRenderer(swigCPtr, this, typeName);
  }

  public SWIGTYPE_p_Ogre__ParticleSystemRenderer getRenderer() {
    long cPtr = OgreJNI.ParticleSystem_getRenderer(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__ParticleSystemRenderer(cPtr, false);
  }

  public String getRendererName() {
    return OgreJNI.ParticleSystem_getRendererName(swigCPtr, this);
  }

  public ParticleEmitter addEmitter(String emitterType) {
    long cPtr = OgreJNI.ParticleSystem_addEmitter(swigCPtr, this, emitterType);
    return (cPtr == 0) ? null : new ParticleEmitter(cPtr, false);
  }

  public ParticleEmitter getEmitter(int index) {
    long cPtr = OgreJNI.ParticleSystem_getEmitter(swigCPtr, this, index);
    return (cPtr == 0) ? null : new ParticleEmitter(cPtr, false);
  }

  public int getNumEmitters() {
    return OgreJNI.ParticleSystem_getNumEmitters(swigCPtr, this);
  }

  public void removeEmitter(int index) {
    OgreJNI.ParticleSystem_removeEmitter__SWIG_0(swigCPtr, this, index);
  }

  public void removeAllEmitters() {
    OgreJNI.ParticleSystem_removeAllEmitters(swigCPtr, this);
  }

  public void removeEmitter(ParticleEmitter emitter) {
    OgreJNI.ParticleSystem_removeEmitter__SWIG_1(swigCPtr, this, ParticleEmitter.getCPtr(emitter), emitter);
  }

  public ParticleAffector addAffector(String affectorType) {
    long cPtr = OgreJNI.ParticleSystem_addAffector(swigCPtr, this, affectorType);
    return (cPtr == 0) ? null : new ParticleAffector(cPtr, false);
  }

  public ParticleAffector getAffector(int index) {
    long cPtr = OgreJNI.ParticleSystem_getAffector(swigCPtr, this, index);
    return (cPtr == 0) ? null : new ParticleAffector(cPtr, false);
  }

  public int getNumAffectors() {
    return OgreJNI.ParticleSystem_getNumAffectors(swigCPtr, this);
  }

  public void removeAffector(int index) {
    OgreJNI.ParticleSystem_removeAffector(swigCPtr, this, index);
  }

  public void removeAllAffectors() {
    OgreJNI.ParticleSystem_removeAllAffectors(swigCPtr, this);
  }

  public void clear() {
    OgreJNI.ParticleSystem_clear(swigCPtr, this);
  }

  public long getNumParticles() {
    return OgreJNI.ParticleSystem_getNumParticles(swigCPtr, this);
  }

  public Particle createParticle() {
    long cPtr = OgreJNI.ParticleSystem_createParticle(swigCPtr, this);
    return (cPtr == 0) ? null : new Particle(cPtr, false);
  }

  public Particle createEmitterParticle(String emitterName) {
    long cPtr = OgreJNI.ParticleSystem_createEmitterParticle(swigCPtr, this, emitterName);
    return (cPtr == 0) ? null : new Particle(cPtr, false);
  }

  public Particle getParticle(long index) {
    long cPtr = OgreJNI.ParticleSystem_getParticle(swigCPtr, this, index);
    return (cPtr == 0) ? null : new Particle(cPtr, false);
  }

  public long getParticleQuota() {
    return OgreJNI.ParticleSystem_getParticleQuota(swigCPtr, this);
  }

  public void setParticleQuota(long quota) {
    OgreJNI.ParticleSystem_setParticleQuota(swigCPtr, this, quota);
  }

  public long getEmittedEmitterQuota() {
    return OgreJNI.ParticleSystem_getEmittedEmitterQuota(swigCPtr, this);
  }

  public void setEmittedEmitterQuota(long quota) {
    OgreJNI.ParticleSystem_setEmittedEmitterQuota(swigCPtr, this, quota);
  }

  public void _update(float timeElapsed) {
    OgreJNI.ParticleSystem__update(swigCPtr, this, timeElapsed);
  }

  public ParticleIterator _getIterator() {
    return new ParticleIterator(OgreJNI.ParticleSystem__getIterator(swigCPtr, this), true);
  }

  public void setMaterialName(String name, String groupName) {
    OgreJNI.ParticleSystem_setMaterialName__SWIG_0(swigCPtr, this, name, groupName);
  }

  public void setMaterialName(String name) {
    OgreJNI.ParticleSystem_setMaterialName__SWIG_1(swigCPtr, this, name);
  }

  public String getMaterialName() {
    return OgreJNI.ParticleSystem_getMaterialName(swigCPtr, this);
  }

  public void _notifyCurrentCamera(Camera cam) {
    OgreJNI.ParticleSystem__notifyCurrentCamera(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public void _notifyAttached(Node parent, boolean isTagPoint) {
    OgreJNI.ParticleSystem__notifyAttached__SWIG_0(swigCPtr, this, Node.getCPtr(parent), parent, isTagPoint);
  }

  public void _notifyAttached(Node parent) {
    OgreJNI.ParticleSystem__notifyAttached__SWIG_1(swigCPtr, this, Node.getCPtr(parent), parent);
  }

  public AxisAlignedBox getBoundingBox() {
    return new AxisAlignedBox(OgreJNI.ParticleSystem_getBoundingBox(swigCPtr, this), false);
  }

  public float getBoundingRadius() {
    return OgreJNI.ParticleSystem_getBoundingRadius(swigCPtr, this);
  }

  public void _updateRenderQueue(RenderQueue queue) {
    OgreJNI.ParticleSystem__updateRenderQueue(swigCPtr, this, RenderQueue.getCPtr(queue), queue);
  }

  public void visitRenderables(Renderable.Visitor visitor, boolean debugRenderables) {
    OgreJNI.ParticleSystem_visitRenderables__SWIG_0(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor, debugRenderables);
  }

  public void visitRenderables(Renderable.Visitor visitor) {
    OgreJNI.ParticleSystem_visitRenderables__SWIG_1(swigCPtr, this, Renderable.Visitor.getCPtr(visitor), visitor);
  }

  public void fastForward(float time, float interval) {
    OgreJNI.ParticleSystem_fastForward__SWIG_0(swigCPtr, this, time, interval);
  }

  public void fastForward(float time) {
    OgreJNI.ParticleSystem_fastForward__SWIG_1(swigCPtr, this, time);
  }

  public void setSpeedFactor(float speedFactor) {
    OgreJNI.ParticleSystem_setSpeedFactor(swigCPtr, this, speedFactor);
  }

  public float getSpeedFactor() {
    return OgreJNI.ParticleSystem_getSpeedFactor(swigCPtr, this);
  }

  public void setIterationInterval(float iterationInterval) {
    OgreJNI.ParticleSystem_setIterationInterval(swigCPtr, this, iterationInterval);
  }

  public float getIterationInterval() {
    return OgreJNI.ParticleSystem_getIterationInterval(swigCPtr, this);
  }

  public static void setDefaultIterationInterval(float iterationInterval) {
    OgreJNI.ParticleSystem_setDefaultIterationInterval(iterationInterval);
  }

  public static float getDefaultIterationInterval() {
    return OgreJNI.ParticleSystem_getDefaultIterationInterval();
  }

  public void setNonVisibleUpdateTimeout(float timeout) {
    OgreJNI.ParticleSystem_setNonVisibleUpdateTimeout(swigCPtr, this, timeout);
  }

  public float getNonVisibleUpdateTimeout() {
    return OgreJNI.ParticleSystem_getNonVisibleUpdateTimeout(swigCPtr, this);
  }

  public static void setDefaultNonVisibleUpdateTimeout(float timeout) {
    OgreJNI.ParticleSystem_setDefaultNonVisibleUpdateTimeout(timeout);
  }

  public static float getDefaultNonVisibleUpdateTimeout() {
    return OgreJNI.ParticleSystem_getDefaultNonVisibleUpdateTimeout();
  }

  public String getMovableType() {
    return OgreJNI.ParticleSystem_getMovableType(swigCPtr, this);
  }

  public void _notifyParticleResized() {
    OgreJNI.ParticleSystem__notifyParticleResized(swigCPtr, this);
  }

  public void _notifyParticleRotated() {
    OgreJNI.ParticleSystem__notifyParticleRotated(swigCPtr, this);
  }

  public void setDefaultDimensions(float width, float height) {
    OgreJNI.ParticleSystem_setDefaultDimensions(swigCPtr, this, width, height);
  }

  public void setDefaultWidth(float width) {
    OgreJNI.ParticleSystem_setDefaultWidth(swigCPtr, this, width);
  }

  public float getDefaultWidth() {
    return OgreJNI.ParticleSystem_getDefaultWidth(swigCPtr, this);
  }

  public void setDefaultHeight(float height) {
    OgreJNI.ParticleSystem_setDefaultHeight(swigCPtr, this, height);
  }

  public float getDefaultHeight() {
    return OgreJNI.ParticleSystem_getDefaultHeight(swigCPtr, this);
  }

  public boolean getCullIndividually() {
    return OgreJNI.ParticleSystem_getCullIndividually(swigCPtr, this);
  }

  public void setCullIndividually(boolean cullIndividual) {
    OgreJNI.ParticleSystem_setCullIndividually(swigCPtr, this, cullIndividual);
  }

  public String getResourceGroupName() {
    return OgreJNI.ParticleSystem_getResourceGroupName(swigCPtr, this);
  }

  public String getOrigin() {
    return OgreJNI.ParticleSystem_getOrigin(swigCPtr, this);
  }

  public void _notifyOrigin(String origin) {
    OgreJNI.ParticleSystem__notifyOrigin(swigCPtr, this, origin);
  }

  public void setRenderQueueGroup(short queueID) {
    OgreJNI.ParticleSystem_setRenderQueueGroup(swigCPtr, this, queueID);
  }

  public void setRenderQueueGroupAndPriority(short queueID, int priority) {
    OgreJNI.ParticleSystem_setRenderQueueGroupAndPriority(swigCPtr, this, queueID, priority);
  }

  public void setSortingEnabled(boolean enabled) {
    OgreJNI.ParticleSystem_setSortingEnabled(swigCPtr, this, enabled);
  }

  public boolean getSortingEnabled() {
    return OgreJNI.ParticleSystem_getSortingEnabled(swigCPtr, this);
  }

  public void setBounds(AxisAlignedBox aabb) {
    OgreJNI.ParticleSystem_setBounds(swigCPtr, this, AxisAlignedBox.getCPtr(aabb), aabb);
  }

  public void setBoundsAutoUpdated(boolean autoUpdate, float stopIn) {
    OgreJNI.ParticleSystem_setBoundsAutoUpdated__SWIG_0(swigCPtr, this, autoUpdate, stopIn);
  }

  public void setBoundsAutoUpdated(boolean autoUpdate) {
    OgreJNI.ParticleSystem_setBoundsAutoUpdated__SWIG_1(swigCPtr, this, autoUpdate);
  }

  public void setKeepParticlesInLocalSpace(boolean keepLocal) {
    OgreJNI.ParticleSystem_setKeepParticlesInLocalSpace(swigCPtr, this, keepLocal);
  }

  public boolean getKeepParticlesInLocalSpace() {
    return OgreJNI.ParticleSystem_getKeepParticlesInLocalSpace(swigCPtr, this);
  }

  public void _updateBounds() {
    OgreJNI.ParticleSystem__updateBounds(swigCPtr, this);
  }

  public void setEmitting(boolean v) {
    OgreJNI.ParticleSystem_setEmitting(swigCPtr, this, v);
  }

  public boolean getEmitting() {
    return OgreJNI.ParticleSystem_getEmitting(swigCPtr, this);
  }

  public long getTypeFlags() {
    return OgreJNI.ParticleSystem_getTypeFlags(swigCPtr, this);
  }

}
