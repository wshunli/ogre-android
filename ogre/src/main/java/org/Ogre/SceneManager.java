/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class SceneManager {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected SceneManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SceneManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_SceneManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static void setWORLD_GEOMETRY_TYPE_MASK(long value) {
    OgreJNI.SceneManager_WORLD_GEOMETRY_TYPE_MASK_set(value);
  }

  public static long getWORLD_GEOMETRY_TYPE_MASK() {
    return OgreJNI.SceneManager_WORLD_GEOMETRY_TYPE_MASK_get();
  }

  public static void setENTITY_TYPE_MASK(long value) {
    OgreJNI.SceneManager_ENTITY_TYPE_MASK_set(value);
  }

  public static long getENTITY_TYPE_MASK() {
    return OgreJNI.SceneManager_ENTITY_TYPE_MASK_get();
  }

  public static void setFX_TYPE_MASK(long value) {
    OgreJNI.SceneManager_FX_TYPE_MASK_set(value);
  }

  public static long getFX_TYPE_MASK() {
    return OgreJNI.SceneManager_FX_TYPE_MASK_get();
  }

  public static void setSTATICGEOMETRY_TYPE_MASK(long value) {
    OgreJNI.SceneManager_STATICGEOMETRY_TYPE_MASK_set(value);
  }

  public static long getSTATICGEOMETRY_TYPE_MASK() {
    return OgreJNI.SceneManager_STATICGEOMETRY_TYPE_MASK_get();
  }

  public static void setLIGHT_TYPE_MASK(long value) {
    OgreJNI.SceneManager_LIGHT_TYPE_MASK_set(value);
  }

  public static long getLIGHT_TYPE_MASK() {
    return OgreJNI.SceneManager_LIGHT_TYPE_MASK_get();
  }

  public static void setFRUSTUM_TYPE_MASK(long value) {
    OgreJNI.SceneManager_FRUSTUM_TYPE_MASK_set(value);
  }

  public static long getFRUSTUM_TYPE_MASK() {
    return OgreJNI.SceneManager_FRUSTUM_TYPE_MASK_get();
  }

  public static void setUSER_TYPE_MASK_LIMIT(long value) {
    OgreJNI.SceneManager_USER_TYPE_MASK_LIMIT_set(value);
  }

  public static long getUSER_TYPE_MASK_LIMIT() {
    return OgreJNI.SceneManager_USER_TYPE_MASK_LIMIT_get();
  }

  static public class materialLess {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected materialLess(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(materialLess obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_SceneManager_materialLess(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public materialLess() {
      this(OgreJNI.new_SceneManager_materialLess(), true);
    }
  
  }

  static public class lightLess {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected lightLess(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(lightLess obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_SceneManager_lightLess(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public lightLess() {
      this(OgreJNI.new_SceneManager_lightLess(), true);
    }
  
  }

  static public class SkyDomeGenParameters {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected SkyDomeGenParameters(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SkyDomeGenParameters obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_SceneManager_SkyDomeGenParameters(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setSkyDomeCurvature(float value) {
      OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeCurvature_set(swigCPtr, this, value);
    }
  
    public float getSkyDomeCurvature() {
      return OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeCurvature_get(swigCPtr, this);
    }
  
    public void setSkyDomeTiling(float value) {
      OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeTiling_set(swigCPtr, this, value);
    }
  
    public float getSkyDomeTiling() {
      return OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeTiling_get(swigCPtr, this);
    }
  
    public void setSkyDomeDistance(float value) {
      OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeDistance_set(swigCPtr, this, value);
    }
  
    public float getSkyDomeDistance() {
      return OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeDistance_get(swigCPtr, this);
    }
  
    public void setSkyDomeXSegments(int value) {
      OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeXSegments_set(swigCPtr, this, value);
    }
  
    public int getSkyDomeXSegments() {
      return OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeXSegments_get(swigCPtr, this);
    }
  
    public void setSkyDomeYSegments(int value) {
      OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeYSegments_set(swigCPtr, this, value);
    }
  
    public int getSkyDomeYSegments() {
      return OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeYSegments_get(swigCPtr, this);
    }
  
    public void setSkyDomeYSegments_keep(int value) {
      OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeYSegments_keep_set(swigCPtr, this, value);
    }
  
    public int getSkyDomeYSegments_keep() {
      return OgreJNI.SceneManager_SkyDomeGenParameters_skyDomeYSegments_keep_get(swigCPtr, this);
    }
  
    public SkyDomeGenParameters() {
      this(OgreJNI.new_SceneManager_SkyDomeGenParameters(), true);
    }
  
  }

  static public class SkyPlaneGenParameters {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected SkyPlaneGenParameters(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SkyPlaneGenParameters obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_SceneManager_SkyPlaneGenParameters(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setSkyPlaneScale(float value) {
      OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneScale_set(swigCPtr, this, value);
    }
  
    public float getSkyPlaneScale() {
      return OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneScale_get(swigCPtr, this);
    }
  
    public void setSkyPlaneTiling(float value) {
      OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneTiling_set(swigCPtr, this, value);
    }
  
    public float getSkyPlaneTiling() {
      return OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneTiling_get(swigCPtr, this);
    }
  
    public void setSkyPlaneBow(float value) {
      OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneBow_set(swigCPtr, this, value);
    }
  
    public float getSkyPlaneBow() {
      return OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneBow_get(swigCPtr, this);
    }
  
    public void setSkyPlaneXSegments(int value) {
      OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneXSegments_set(swigCPtr, this, value);
    }
  
    public int getSkyPlaneXSegments() {
      return OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneXSegments_get(swigCPtr, this);
    }
  
    public void setSkyPlaneYSegments(int value) {
      OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneYSegments_set(swigCPtr, this, value);
    }
  
    public int getSkyPlaneYSegments() {
      return OgreJNI.SceneManager_SkyPlaneGenParameters_skyPlaneYSegments_get(swigCPtr, this);
    }
  
    public SkyPlaneGenParameters() {
      this(OgreJNI.new_SceneManager_SkyPlaneGenParameters(), true);
    }
  
  }

  static public class SkyBoxGenParameters {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected SkyBoxGenParameters(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SkyBoxGenParameters obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_SceneManager_SkyBoxGenParameters(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setSkyBoxDistance(float value) {
      OgreJNI.SceneManager_SkyBoxGenParameters_skyBoxDistance_set(swigCPtr, this, value);
    }
  
    public float getSkyBoxDistance() {
      return OgreJNI.SceneManager_SkyBoxGenParameters_skyBoxDistance_get(swigCPtr, this);
    }
  
    public SkyBoxGenParameters() {
      this(OgreJNI.new_SceneManager_SkyBoxGenParameters(), true);
    }
  
  }

  static public class Listener {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Listener(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Listener obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_SceneManager_Listener(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    protected void swigDirectorDisconnect() {
      swigCMemOwn = false;
      delete();
    }
  
    public void swigReleaseOwnership() {
      swigCMemOwn = false;
      OgreJNI.SceneManager_Listener_change_ownership(this, swigCPtr, false);
    }
  
    public void swigTakeOwnership() {
      swigCMemOwn = true;
      OgreJNI.SceneManager_Listener_change_ownership(this, swigCPtr, true);
    }
  
    public Listener() {
      this(OgreJNI.new_SceneManager_Listener(), true);
      OgreJNI.SceneManager_Listener_director_connect(this, swigCPtr, true, true);
    }
  
    public void preUpdateSceneGraph(SceneManager source, Camera camera) {
      if (getClass() == Listener.class) OgreJNI.SceneManager_Listener_preUpdateSceneGraph(swigCPtr, this, SceneManager.getCPtr(source), source, Camera.getCPtr(camera), camera); else OgreJNI.SceneManager_Listener_preUpdateSceneGraphSwigExplicitListener(swigCPtr, this, SceneManager.getCPtr(source), source, Camera.getCPtr(camera), camera);
    }
  
    public void postUpdateSceneGraph(SceneManager source, Camera camera) {
      if (getClass() == Listener.class) OgreJNI.SceneManager_Listener_postUpdateSceneGraph(swigCPtr, this, SceneManager.getCPtr(source), source, Camera.getCPtr(camera), camera); else OgreJNI.SceneManager_Listener_postUpdateSceneGraphSwigExplicitListener(swigCPtr, this, SceneManager.getCPtr(source), source, Camera.getCPtr(camera), camera);
    }
  
    public void preFindVisibleObjects(SceneManager source, SceneManager.IlluminationRenderStage irs, Viewport v) {
      if (getClass() == Listener.class) OgreJNI.SceneManager_Listener_preFindVisibleObjects(swigCPtr, this, SceneManager.getCPtr(source), source, irs.swigValue(), Viewport.getCPtr(v), v); else OgreJNI.SceneManager_Listener_preFindVisibleObjectsSwigExplicitListener(swigCPtr, this, SceneManager.getCPtr(source), source, irs.swigValue(), Viewport.getCPtr(v), v);
    }
  
    public void postFindVisibleObjects(SceneManager source, SceneManager.IlluminationRenderStage irs, Viewport v) {
      if (getClass() == Listener.class) OgreJNI.SceneManager_Listener_postFindVisibleObjects(swigCPtr, this, SceneManager.getCPtr(source), source, irs.swigValue(), Viewport.getCPtr(v), v); else OgreJNI.SceneManager_Listener_postFindVisibleObjectsSwigExplicitListener(swigCPtr, this, SceneManager.getCPtr(source), source, irs.swigValue(), Viewport.getCPtr(v), v);
    }
  
    public void shadowTexturesUpdated(long numberOfShadowTextures) {
      if (getClass() == Listener.class) OgreJNI.SceneManager_Listener_shadowTexturesUpdated(swigCPtr, this, numberOfShadowTextures); else OgreJNI.SceneManager_Listener_shadowTexturesUpdatedSwigExplicitListener(swigCPtr, this, numberOfShadowTextures);
    }
  
    public void shadowTextureCasterPreViewProj(Light light, Camera camera, long iteration) {
      if (getClass() == Listener.class) OgreJNI.SceneManager_Listener_shadowTextureCasterPreViewProj(swigCPtr, this, Light.getCPtr(light), light, Camera.getCPtr(camera), camera, iteration); else OgreJNI.SceneManager_Listener_shadowTextureCasterPreViewProjSwigExplicitListener(swigCPtr, this, Light.getCPtr(light), light, Camera.getCPtr(camera), camera, iteration);
    }
  
    public void shadowTextureReceiverPreViewProj(Light light, Frustum frustum) {
      if (getClass() == Listener.class) OgreJNI.SceneManager_Listener_shadowTextureReceiverPreViewProj(swigCPtr, this, Light.getCPtr(light), light, Frustum.getCPtr(frustum), frustum); else OgreJNI.SceneManager_Listener_shadowTextureReceiverPreViewProjSwigExplicitListener(swigCPtr, this, Light.getCPtr(light), light, Frustum.getCPtr(frustum), frustum);
    }
  
    public boolean sortLightsAffectingFrustum(SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t lightList) {
      return (getClass() == Listener.class) ? OgreJNI.SceneManager_Listener_sortLightsAffectingFrustum(swigCPtr, this, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(lightList)) : OgreJNI.SceneManager_Listener_sortLightsAffectingFrustumSwigExplicitListener(swigCPtr, this, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(lightList));
    }
  
    public void sceneManagerDestroyed(SceneManager source) {
      if (getClass() == Listener.class) OgreJNI.SceneManager_Listener_sceneManagerDestroyed(swigCPtr, this, SceneManager.getCPtr(source), source); else OgreJNI.SceneManager_Listener_sceneManagerDestroyedSwigExplicitListener(swigCPtr, this, SceneManager.getCPtr(source), source);
    }
  
  }

  static public class SceneMgrQueuedRenderableVisitor extends QueuedRenderableVisitor {
    private transient long swigCPtr;
  
    protected SceneMgrQueuedRenderableVisitor(long cPtr, boolean cMemoryOwn) {
      super(OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_SWIGUpcast(cPtr), cMemoryOwn);
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(SceneMgrQueuedRenderableVisitor obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_SceneManager_SceneMgrQueuedRenderableVisitor(swigCPtr);
        }
        swigCPtr = 0;
      }
      super.delete();
    }
  
    public SceneMgrQueuedRenderableVisitor() {
      this(OgreJNI.new_SceneManager_SceneMgrQueuedRenderableVisitor(), true);
    }
  
    public void visit(Renderable r) {
      OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_visit__SWIG_0(swigCPtr, this, Renderable.getCPtr(r), r);
    }
  
    public boolean visit(Pass p) {
      return OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_visit__SWIG_1(swigCPtr, this, Pass.getCPtr(p), p);
    }
  
    public void visit(RenderablePass rp) {
      OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_visit__SWIG_2(swigCPtr, this, RenderablePass.getCPtr(rp), rp);
    }
  
    public void setTargetSceneMgr(SceneManager value) {
      OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_targetSceneMgr_set(swigCPtr, this, SceneManager.getCPtr(value), value);
    }
  
    public SceneManager getTargetSceneMgr() {
      long cPtr = OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_targetSceneMgr_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SceneManager(cPtr, false);
    }
  
    public void setTransparentShadowCastersMode(boolean value) {
      OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_transparentShadowCastersMode_set(swigCPtr, this, value);
    }
  
    public boolean getTransparentShadowCastersMode() {
      return OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_transparentShadowCastersMode_get(swigCPtr, this);
    }
  
    public void setAutoLights(boolean value) {
      OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_autoLights_set(swigCPtr, this, value);
    }
  
    public boolean getAutoLights() {
      return OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_autoLights_get(swigCPtr, this);
    }
  
    public void setManualLightList(SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t value) {
      OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_manualLightList_set(swigCPtr, this, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(value));
    }
  
    public SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t getManualLightList() {
      long cPtr = OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_manualLightList_get(swigCPtr, this);
      return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t(cPtr, false);
    }
  
    public void setScissoring(boolean value) {
      OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_scissoring_set(swigCPtr, this, value);
    }
  
    public boolean getScissoring() {
      return OgreJNI.SceneManager_SceneMgrQueuedRenderableVisitor_scissoring_get(swigCPtr, this);
    }
  
  }

  public void prepareShadowTextures(Camera cam, Viewport vp, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t lightList) {
    OgreJNI.SceneManager_prepareShadowTextures__SWIG_0(swigCPtr, this, Camera.getCPtr(cam), cam, Viewport.getCPtr(vp), vp, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(lightList));
  }

  public void prepareShadowTextures(Camera cam, Viewport vp) {
    OgreJNI.SceneManager_prepareShadowTextures__SWIG_1(swigCPtr, this, Camera.getCPtr(cam), cam, Viewport.getCPtr(vp), vp);
  }

  static public class RenderContext {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected RenderContext(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(RenderContext obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_SceneManager_RenderContext(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void setRenderQueue(RenderQueue value) {
      OgreJNI.SceneManager_RenderContext_renderQueue_set(swigCPtr, this, RenderQueue.getCPtr(value), value);
    }
  
    public RenderQueue getRenderQueue() {
      long cPtr = OgreJNI.SceneManager_RenderContext_renderQueue_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RenderQueue(cPtr, false);
    }
  
    public void setViewport(Viewport value) {
      OgreJNI.SceneManager_RenderContext_viewport_set(swigCPtr, this, Viewport.getCPtr(value), value);
    }
  
    public Viewport getViewport() {
      long cPtr = OgreJNI.SceneManager_RenderContext_viewport_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Viewport(cPtr, false);
    }
  
    public void setCamera(Camera value) {
      OgreJNI.SceneManager_RenderContext_camera_set(swigCPtr, this, Camera.getCPtr(value), value);
    }
  
    public Camera getCamera() {
      long cPtr = OgreJNI.SceneManager_RenderContext_camera_get(swigCPtr, this);
      return (cPtr == 0) ? null : new Camera(cPtr, false);
    }
  
    public void setActiveChain(CompositorChain value) {
      OgreJNI.SceneManager_RenderContext_activeChain_set(swigCPtr, this, CompositorChain.getCPtr(value), value);
    }
  
    public CompositorChain getActiveChain() {
      long cPtr = OgreJNI.SceneManager_RenderContext_activeChain_get(swigCPtr, this);
      return (cPtr == 0) ? null : new CompositorChain(cPtr, false);
    }
  
    public void setRsContext(RenderSystem.RenderSystemContext value) {
      OgreJNI.SceneManager_RenderContext_rsContext_set(swigCPtr, this, RenderSystem.RenderSystemContext.getCPtr(value), value);
    }
  
    public RenderSystem.RenderSystemContext getRsContext() {
      long cPtr = OgreJNI.SceneManager_RenderContext_rsContext_get(swigCPtr, this);
      return (cPtr == 0) ? null : new RenderSystem.RenderSystemContext(cPtr, false);
    }
  
    public RenderContext() {
      this(OgreJNI.new_SceneManager_RenderContext(), true);
    }
  
  }

  public SceneManager.RenderContext _pauseRendering() {
    long cPtr = OgreJNI.SceneManager__pauseRendering(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneManager.RenderContext(cPtr, false);
  }

  public void _resumeRendering(SceneManager.RenderContext context) {
    OgreJNI.SceneManager__resumeRendering(swigCPtr, this, SceneManager.RenderContext.getCPtr(context), context);
  }

  public String getName() {
    return OgreJNI.SceneManager_getName(swigCPtr, this);
  }

  public String getTypeName() {
    return OgreJNI.SceneManager_getTypeName(swigCPtr, this);
  }

  public Camera createCamera(String name) {
    long cPtr = OgreJNI.SceneManager_createCamera(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Camera(cPtr, false);
  }

  public Camera getCamera(String name) {
    long cPtr = OgreJNI.SceneManager_getCamera(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Camera(cPtr, false);
  }

  public boolean hasCamera(String name) {
    return OgreJNI.SceneManager_hasCamera(swigCPtr, this, name);
  }

  public void destroyCamera(Camera cam) {
    OgreJNI.SceneManager_destroyCamera__SWIG_0(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public void destroyCamera(String name) {
    OgreJNI.SceneManager_destroyCamera__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllCameras() {
    OgreJNI.SceneManager_destroyAllCameras(swigCPtr, this);
  }

  public Light createLight(String name) {
    long cPtr = OgreJNI.SceneManager_createLight__SWIG_0(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Light(cPtr, false);
  }

  public Light createLight() {
    long cPtr = OgreJNI.SceneManager_createLight__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new Light(cPtr, false);
  }

  public Light getLight(String name) {
    long cPtr = OgreJNI.SceneManager_getLight(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Light(cPtr, false);
  }

  public boolean hasLight(String name) {
    return OgreJNI.SceneManager_hasLight(swigCPtr, this, name);
  }

  public SWIGTYPE_p_Ogre__vectorT_Ogre__Plane_t__type getLightClippingPlanes(Light l) {
    return new SWIGTYPE_p_Ogre__vectorT_Ogre__Plane_t__type(OgreJNI.SceneManager_getLightClippingPlanes(swigCPtr, this, Light.getCPtr(l), l), false);
  }

  public SWIGTYPE_p_Ogre__TRectT_float_t getLightScissorRect(Light l, Camera cam) {
    return new SWIGTYPE_p_Ogre__TRectT_float_t(OgreJNI.SceneManager_getLightScissorRect(swigCPtr, this, Light.getCPtr(l), l, Camera.getCPtr(cam), cam), false);
  }

  public void invalidatePerFrameScissorRectCache() {
    OgreJNI.SceneManager_invalidatePerFrameScissorRectCache(swigCPtr, this);
  }

  public void destroyLight(String name) {
    OgreJNI.SceneManager_destroyLight__SWIG_0(swigCPtr, this, name);
  }

  public void destroyLight(Light light) {
    OgreJNI.SceneManager_destroyLight__SWIG_1(swigCPtr, this, Light.getCPtr(light), light);
  }

  public void destroyAllLights() {
    OgreJNI.SceneManager_destroyAllLights(swigCPtr, this);
  }

  public void _notifyLightsDirty() {
    OgreJNI.SceneManager__notifyLightsDirty(swigCPtr, this);
  }

  public long _getLightsDirtyCounter() {
    return OgreJNI.SceneManager__getLightsDirtyCounter(swigCPtr, this);
  }

  public SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t _getLightsAffectingFrustum() {
    return new SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t(OgreJNI.SceneManager__getLightsAffectingFrustum(swigCPtr, this), false);
  }

  public void _populateLightList(Vector3 position, float radius, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t destList, long lightMask) {
    OgreJNI.SceneManager__populateLightList__SWIG_0(swigCPtr, this, Vector3.getCPtr(position), position, radius, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(destList), lightMask);
  }

  public void _populateLightList(Vector3 position, float radius, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t destList) {
    OgreJNI.SceneManager__populateLightList__SWIG_1(swigCPtr, this, Vector3.getCPtr(position), position, radius, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(destList));
  }

  public void _populateLightList(SceneNode sn, float radius, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t destList, long lightMask) {
    OgreJNI.SceneManager__populateLightList__SWIG_2(swigCPtr, this, SceneNode.getCPtr(sn), sn, radius, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(destList), lightMask);
  }

  public void _populateLightList(SceneNode sn, float radius, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t destList) {
    OgreJNI.SceneManager__populateLightList__SWIG_3(swigCPtr, this, SceneNode.getCPtr(sn), sn, radius, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(destList));
  }

  public SceneNode createSceneNode() {
    long cPtr = OgreJNI.SceneManager_createSceneNode__SWIG_0(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public SceneNode createSceneNode(String name) {
    long cPtr = OgreJNI.SceneManager_createSceneNode__SWIG_1(swigCPtr, this, name);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public void destroySceneNode(SceneNode sn) {
    OgreJNI.SceneManager_destroySceneNode__SWIG_0(swigCPtr, this, SceneNode.getCPtr(sn), sn);
  }

  public void destroySceneNode(String name) {
    OgreJNI.SceneManager_destroySceneNode__SWIG_1(swigCPtr, this, name);
  }

  public SceneNode getRootSceneNode() {
    long cPtr = OgreJNI.SceneManager_getRootSceneNode(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public SceneNode getSceneNode(String name) {
    long cPtr = OgreJNI.SceneManager_getSceneNode(swigCPtr, this, name);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public boolean hasSceneNode(String name) {
    return OgreJNI.SceneManager_hasSceneNode(swigCPtr, this, name);
  }

  public Entity createEntity(String entityName, String meshName, String groupName) {
    long cPtr = OgreJNI.SceneManager_createEntity__SWIG_0(swigCPtr, this, entityName, meshName, groupName);
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public Entity createEntity(String entityName, String meshName) {
    long cPtr = OgreJNI.SceneManager_createEntity__SWIG_1(swigCPtr, this, entityName, meshName);
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public Entity createEntity(String entityName, MeshPtr pMesh) {
    long cPtr = OgreJNI.SceneManager_createEntity__SWIG_2(swigCPtr, this, entityName, MeshPtr.getCPtr(pMesh), pMesh);
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public Entity createEntity(String meshName) {
    long cPtr = OgreJNI.SceneManager_createEntity__SWIG_3(swigCPtr, this, meshName);
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public Entity createEntity(MeshPtr pMesh) {
    long cPtr = OgreJNI.SceneManager_createEntity__SWIG_4(swigCPtr, this, MeshPtr.getCPtr(pMesh), pMesh);
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public Entity createEntity(String entityName, SceneManager.PrefabType ptype) {
    long cPtr = OgreJNI.SceneManager_createEntity__SWIG_5(swigCPtr, this, entityName, ptype.swigValue());
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public Entity createEntity(SceneManager.PrefabType ptype) {
    long cPtr = OgreJNI.SceneManager_createEntity__SWIG_6(swigCPtr, this, ptype.swigValue());
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public Entity getEntity(String name) {
    long cPtr = OgreJNI.SceneManager_getEntity(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Entity(cPtr, false);
  }

  public boolean hasEntity(String name) {
    return OgreJNI.SceneManager_hasEntity(swigCPtr, this, name);
  }

  public void destroyEntity(Entity ent) {
    OgreJNI.SceneManager_destroyEntity__SWIG_0(swigCPtr, this, Entity.getCPtr(ent), ent);
  }

  public void destroyEntity(String name) {
    OgreJNI.SceneManager_destroyEntity__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllEntities() {
    OgreJNI.SceneManager_destroyAllEntities(swigCPtr, this);
  }

  public ManualObject createManualObject(String name) {
    long cPtr = OgreJNI.SceneManager_createManualObject__SWIG_0(swigCPtr, this, name);
    return (cPtr == 0) ? null : new ManualObject(cPtr, false);
  }

  public ManualObject createManualObject() {
    long cPtr = OgreJNI.SceneManager_createManualObject__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new ManualObject(cPtr, false);
  }

  public ManualObject getManualObject(String name) {
    long cPtr = OgreJNI.SceneManager_getManualObject(swigCPtr, this, name);
    return (cPtr == 0) ? null : new ManualObject(cPtr, false);
  }

  public boolean hasManualObject(String name) {
    return OgreJNI.SceneManager_hasManualObject(swigCPtr, this, name);
  }

  public void destroyManualObject(ManualObject obj) {
    OgreJNI.SceneManager_destroyManualObject__SWIG_0(swigCPtr, this, ManualObject.getCPtr(obj), obj);
  }

  public void destroyManualObject(String name) {
    OgreJNI.SceneManager_destroyManualObject__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllManualObjects() {
    OgreJNI.SceneManager_destroyAllManualObjects(swigCPtr, this);
  }

  public BillboardChain createBillboardChain(String name) {
    long cPtr = OgreJNI.SceneManager_createBillboardChain__SWIG_0(swigCPtr, this, name);
    return (cPtr == 0) ? null : new BillboardChain(cPtr, false);
  }

  public BillboardChain createBillboardChain() {
    long cPtr = OgreJNI.SceneManager_createBillboardChain__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new BillboardChain(cPtr, false);
  }

  public BillboardChain getBillboardChain(String name) {
    long cPtr = OgreJNI.SceneManager_getBillboardChain(swigCPtr, this, name);
    return (cPtr == 0) ? null : new BillboardChain(cPtr, false);
  }

  public boolean hasBillboardChain(String name) {
    return OgreJNI.SceneManager_hasBillboardChain(swigCPtr, this, name);
  }

  public void destroyBillboardChain(BillboardChain obj) {
    OgreJNI.SceneManager_destroyBillboardChain__SWIG_0(swigCPtr, this, BillboardChain.getCPtr(obj), obj);
  }

  public void destroyBillboardChain(String name) {
    OgreJNI.SceneManager_destroyBillboardChain__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllBillboardChains() {
    OgreJNI.SceneManager_destroyAllBillboardChains(swigCPtr, this);
  }

  public RibbonTrail createRibbonTrail(String name) {
    long cPtr = OgreJNI.SceneManager_createRibbonTrail__SWIG_0(swigCPtr, this, name);
    return (cPtr == 0) ? null : new RibbonTrail(cPtr, false);
  }

  public RibbonTrail createRibbonTrail() {
    long cPtr = OgreJNI.SceneManager_createRibbonTrail__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new RibbonTrail(cPtr, false);
  }

  public RibbonTrail getRibbonTrail(String name) {
    long cPtr = OgreJNI.SceneManager_getRibbonTrail(swigCPtr, this, name);
    return (cPtr == 0) ? null : new RibbonTrail(cPtr, false);
  }

  public boolean hasRibbonTrail(String name) {
    return OgreJNI.SceneManager_hasRibbonTrail(swigCPtr, this, name);
  }

  public void destroyRibbonTrail(RibbonTrail obj) {
    OgreJNI.SceneManager_destroyRibbonTrail__SWIG_0(swigCPtr, this, RibbonTrail.getCPtr(obj), obj);
  }

  public void destroyRibbonTrail(String name) {
    OgreJNI.SceneManager_destroyRibbonTrail__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllRibbonTrails() {
    OgreJNI.SceneManager_destroyAllRibbonTrails(swigCPtr, this);
  }

  public ParticleSystem createParticleSystem(String name, String templateName) {
    long cPtr = OgreJNI.SceneManager_createParticleSystem__SWIG_0(swigCPtr, this, name, templateName);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public ParticleSystem createParticleSystem(String name, long quota, String resourceGroup) {
    long cPtr = OgreJNI.SceneManager_createParticleSystem__SWIG_1(swigCPtr, this, name, quota, resourceGroup);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public ParticleSystem createParticleSystem(String name, long quota) {
    long cPtr = OgreJNI.SceneManager_createParticleSystem__SWIG_2(swigCPtr, this, name, quota);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public ParticleSystem createParticleSystem(String name) {
    long cPtr = OgreJNI.SceneManager_createParticleSystem__SWIG_3(swigCPtr, this, name);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public ParticleSystem createParticleSystem(long quota, String resourceGroup) {
    long cPtr = OgreJNI.SceneManager_createParticleSystem__SWIG_4(swigCPtr, this, quota, resourceGroup);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public ParticleSystem createParticleSystem(long quota) {
    long cPtr = OgreJNI.SceneManager_createParticleSystem__SWIG_5(swigCPtr, this, quota);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public ParticleSystem createParticleSystem() {
    long cPtr = OgreJNI.SceneManager_createParticleSystem__SWIG_6(swigCPtr, this);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public ParticleSystem getParticleSystem(String name) {
    long cPtr = OgreJNI.SceneManager_getParticleSystem(swigCPtr, this, name);
    return (cPtr == 0) ? null : new ParticleSystem(cPtr, false);
  }

  public boolean hasParticleSystem(String name) {
    return OgreJNI.SceneManager_hasParticleSystem(swigCPtr, this, name);
  }

  public void destroyParticleSystem(ParticleSystem obj) {
    OgreJNI.SceneManager_destroyParticleSystem__SWIG_0(swigCPtr, this, ParticleSystem.getCPtr(obj), obj);
  }

  public void destroyParticleSystem(String name) {
    OgreJNI.SceneManager_destroyParticleSystem__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllParticleSystems() {
    OgreJNI.SceneManager_destroyAllParticleSystems(swigCPtr, this);
  }

  public void clearScene() {
    OgreJNI.SceneManager_clearScene(swigCPtr, this);
  }

  public void setAmbientLight(ColourValue colour) {
    OgreJNI.SceneManager_setAmbientLight(swigCPtr, this, ColourValue.getCPtr(colour), colour);
  }

  public ColourValue getAmbientLight() {
    return new ColourValue(OgreJNI.SceneManager_getAmbientLight(swigCPtr, this), false);
  }

  public void prepareWorldGeometry(String filename) {
    OgreJNI.SceneManager_prepareWorldGeometry__SWIG_0(swigCPtr, this, filename);
  }

  public void prepareWorldGeometry(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t stream, String typeName) {
    OgreJNI.SceneManager_prepareWorldGeometry__SWIG_1(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t.getCPtr(stream), typeName);
  }

  public void prepareWorldGeometry(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t stream) {
    OgreJNI.SceneManager_prepareWorldGeometry__SWIG_2(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t.getCPtr(stream));
  }

  public void setWorldGeometry(String filename) {
    OgreJNI.SceneManager_setWorldGeometry__SWIG_0(swigCPtr, this, filename);
  }

  public void setWorldGeometry(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t stream, String typeName) {
    OgreJNI.SceneManager_setWorldGeometry__SWIG_1(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t.getCPtr(stream), typeName);
  }

  public void setWorldGeometry(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t stream) {
    OgreJNI.SceneManager_setWorldGeometry__SWIG_2(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t.getCPtr(stream));
  }

  public long estimateWorldGeometry(String filename) {
    return OgreJNI.SceneManager_estimateWorldGeometry__SWIG_0(swigCPtr, this, filename);
  }

  public long estimateWorldGeometry(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t stream, String typeName) {
    return OgreJNI.SceneManager_estimateWorldGeometry__SWIG_1(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t.getCPtr(stream), typeName);
  }

  public long estimateWorldGeometry(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t stream) {
    return OgreJNI.SceneManager_estimateWorldGeometry__SWIG_2(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t.getCPtr(stream));
  }

  public ViewPoint getSuggestedViewpoint(boolean random) {
    return new ViewPoint(OgreJNI.SceneManager_getSuggestedViewpoint__SWIG_0(swigCPtr, this, random), true);
  }

  public ViewPoint getSuggestedViewpoint() {
    return new ViewPoint(OgreJNI.SceneManager_getSuggestedViewpoint__SWIG_1(swigCPtr, this), true);
  }

  public boolean setOption(String strKey, SWIGTYPE_p_void pValue) {
    return OgreJNI.SceneManager_setOption(swigCPtr, this, strKey, SWIGTYPE_p_void.getCPtr(pValue));
  }

  public boolean getOption(String strKey, SWIGTYPE_p_void pDestValue) {
    return OgreJNI.SceneManager_getOption(swigCPtr, this, strKey, SWIGTYPE_p_void.getCPtr(pDestValue));
  }

  public boolean hasOption(String strKey) {
    return OgreJNI.SceneManager_hasOption(swigCPtr, this, strKey);
  }

  public boolean getOptionValues(String strKey, StringVector refValueList) {
    return OgreJNI.SceneManager_getOptionValues(swigCPtr, this, strKey, StringVector.getCPtr(refValueList), refValueList);
  }

  public boolean getOptionKeys(StringVector refKeys) {
    return OgreJNI.SceneManager_getOptionKeys(swigCPtr, this, StringVector.getCPtr(refKeys), refKeys);
  }

  public void _updateSceneGraph(Camera cam) {
    OgreJNI.SceneManager__updateSceneGraph(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public void _findVisibleObjects(Camera cam, VisibleObjectsBoundsInfo visibleBounds, boolean onlyShadowCasters) {
    OgreJNI.SceneManager__findVisibleObjects(swigCPtr, this, Camera.getCPtr(cam), cam, VisibleObjectsBoundsInfo.getCPtr(visibleBounds), visibleBounds, onlyShadowCasters);
  }

  public void _issueRenderOp(Renderable rend, Pass pass) {
    OgreJNI.SceneManager__issueRenderOp(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass);
  }

  public void _applySceneAnimations() {
    OgreJNI.SceneManager__applySceneAnimations(swigCPtr, this);
  }

  public void _renderVisibleObjects() {
    OgreJNI.SceneManager__renderVisibleObjects(swigCPtr, this);
  }

  public void _renderScene(Camera camera, Viewport vp, boolean includeOverlays) {
    OgreJNI.SceneManager__renderScene(swigCPtr, this, Camera.getCPtr(camera), camera, Viewport.getCPtr(vp), vp, includeOverlays);
  }

  public void _queueSkiesForRendering(Camera cam) {
    OgreJNI.SceneManager__queueSkiesForRendering(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public void _setDestinationRenderSystem(RenderSystem sys) {
    OgreJNI.SceneManager__setDestinationRenderSystem(swigCPtr, this, RenderSystem.getCPtr(sys), sys);
  }

  public void _releaseManualHardwareResources() {
    OgreJNI.SceneManager__releaseManualHardwareResources(swigCPtr, this);
  }

  public void _restoreManualHardwareResources() {
    OgreJNI.SceneManager__restoreManualHardwareResources(swigCPtr, this);
  }

  public void setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, boolean drawFirst, float bow, int xsegments, int ysegments, String groupName) {
    OgreJNI.SceneManager_setSkyPlane__SWIG_0(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments, groupName);
  }

  public void setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, boolean drawFirst, float bow, int xsegments, int ysegments) {
    OgreJNI.SceneManager_setSkyPlane__SWIG_1(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, drawFirst, bow, xsegments, ysegments);
  }

  public void setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, boolean drawFirst, float bow, int xsegments) {
    OgreJNI.SceneManager_setSkyPlane__SWIG_2(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, drawFirst, bow, xsegments);
  }

  public void setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, boolean drawFirst, float bow) {
    OgreJNI.SceneManager_setSkyPlane__SWIG_3(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, drawFirst, bow);
  }

  public void setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, boolean drawFirst) {
    OgreJNI.SceneManager_setSkyPlane__SWIG_4(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, drawFirst);
  }

  public void setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling) {
    OgreJNI.SceneManager_setSkyPlane__SWIG_5(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling);
  }

  public void setSkyPlane(boolean enable, Plane plane, String materialName, float scale) {
    OgreJNI.SceneManager_setSkyPlane__SWIG_6(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale);
  }

  public void setSkyPlane(boolean enable, Plane plane, String materialName) {
    OgreJNI.SceneManager_setSkyPlane__SWIG_7(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName);
  }

  public void _setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, short renderQueue, float bow, int xsegments, int ysegments, String groupName) {
    OgreJNI.SceneManager__setSkyPlane__SWIG_0(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments, groupName);
  }

  public void _setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, short renderQueue, float bow, int xsegments, int ysegments) {
    OgreJNI.SceneManager__setSkyPlane__SWIG_1(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, renderQueue, bow, xsegments, ysegments);
  }

  public void _setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, short renderQueue, float bow, int xsegments) {
    OgreJNI.SceneManager__setSkyPlane__SWIG_2(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, renderQueue, bow, xsegments);
  }

  public void _setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, short renderQueue, float bow) {
    OgreJNI.SceneManager__setSkyPlane__SWIG_3(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, renderQueue, bow);
  }

  public void _setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling, short renderQueue) {
    OgreJNI.SceneManager__setSkyPlane__SWIG_4(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling, renderQueue);
  }

  public void _setSkyPlane(boolean enable, Plane plane, String materialName, float scale, float tiling) {
    OgreJNI.SceneManager__setSkyPlane__SWIG_5(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale, tiling);
  }

  public void _setSkyPlane(boolean enable, Plane plane, String materialName, float scale) {
    OgreJNI.SceneManager__setSkyPlane__SWIG_6(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName, scale);
  }

  public void _setSkyPlane(boolean enable, Plane plane, String materialName) {
    OgreJNI.SceneManager__setSkyPlane__SWIG_7(swigCPtr, this, enable, Plane.getCPtr(plane), plane, materialName);
  }

  public void setSkyPlaneEnabled(boolean enable) {
    OgreJNI.SceneManager_setSkyPlaneEnabled(swigCPtr, this, enable);
  }

  public boolean isSkyPlaneEnabled() {
    return OgreJNI.SceneManager_isSkyPlaneEnabled(swigCPtr, this);
  }

  public SceneNode getSkyPlaneNode() {
    long cPtr = OgreJNI.SceneManager_getSkyPlaneNode(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public SceneManager.SkyPlaneGenParameters getSkyPlaneGenParameters() {
    return new SceneManager.SkyPlaneGenParameters(OgreJNI.SceneManager_getSkyPlaneGenParameters(swigCPtr, this), false);
  }

  public void setSkyBox(boolean enable, String materialName, float distance, boolean drawFirst, Quaternion orientation, String groupName) {
    OgreJNI.SceneManager_setSkyBox__SWIG_0(swigCPtr, this, enable, materialName, distance, drawFirst, Quaternion.getCPtr(orientation), orientation, groupName);
  }

  public void setSkyBox(boolean enable, String materialName, float distance, boolean drawFirst, Quaternion orientation) {
    OgreJNI.SceneManager_setSkyBox__SWIG_1(swigCPtr, this, enable, materialName, distance, drawFirst, Quaternion.getCPtr(orientation), orientation);
  }

  public void setSkyBox(boolean enable, String materialName, float distance, boolean drawFirst) {
    OgreJNI.SceneManager_setSkyBox__SWIG_2(swigCPtr, this, enable, materialName, distance, drawFirst);
  }

  public void setSkyBox(boolean enable, String materialName, float distance) {
    OgreJNI.SceneManager_setSkyBox__SWIG_3(swigCPtr, this, enable, materialName, distance);
  }

  public void setSkyBox(boolean enable, String materialName) {
    OgreJNI.SceneManager_setSkyBox__SWIG_4(swigCPtr, this, enable, materialName);
  }

  public void _setSkyBox(boolean enable, String materialName, float distance, short renderQueue, Quaternion orientation, String groupName) {
    OgreJNI.SceneManager__setSkyBox__SWIG_0(swigCPtr, this, enable, materialName, distance, renderQueue, Quaternion.getCPtr(orientation), orientation, groupName);
  }

  public void _setSkyBox(boolean enable, String materialName, float distance, short renderQueue, Quaternion orientation) {
    OgreJNI.SceneManager__setSkyBox__SWIG_1(swigCPtr, this, enable, materialName, distance, renderQueue, Quaternion.getCPtr(orientation), orientation);
  }

  public void _setSkyBox(boolean enable, String materialName, float distance, short renderQueue) {
    OgreJNI.SceneManager__setSkyBox__SWIG_2(swigCPtr, this, enable, materialName, distance, renderQueue);
  }

  public void _setSkyBox(boolean enable, String materialName, float distance) {
    OgreJNI.SceneManager__setSkyBox__SWIG_3(swigCPtr, this, enable, materialName, distance);
  }

  public void _setSkyBox(boolean enable, String materialName) {
    OgreJNI.SceneManager__setSkyBox__SWIG_4(swigCPtr, this, enable, materialName);
  }

  public void setSkyBoxEnabled(boolean enable) {
    OgreJNI.SceneManager_setSkyBoxEnabled(swigCPtr, this, enable);
  }

  public boolean isSkyBoxEnabled() {
    return OgreJNI.SceneManager_isSkyBoxEnabled(swigCPtr, this);
  }

  public SceneNode getSkyBoxNode() {
    long cPtr = OgreJNI.SceneManager_getSkyBoxNode(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public SceneManager.SkyBoxGenParameters getSkyBoxGenParameters() {
    return new SceneManager.SkyBoxGenParameters(OgreJNI.SceneManager_getSkyBoxGenParameters(swigCPtr, this), false);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, boolean drawFirst, Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, String groupName) {
    OgreJNI.SceneManager_setSkyDome__SWIG_0(swigCPtr, this, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), orientation, xsegments, ysegments, ysegments_keep, groupName);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, boolean drawFirst, Quaternion orientation, int xsegments, int ysegments, int ysegments_keep) {
    OgreJNI.SceneManager_setSkyDome__SWIG_1(swigCPtr, this, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), orientation, xsegments, ysegments, ysegments_keep);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, boolean drawFirst, Quaternion orientation, int xsegments, int ysegments) {
    OgreJNI.SceneManager_setSkyDome__SWIG_2(swigCPtr, this, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), orientation, xsegments, ysegments);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, boolean drawFirst, Quaternion orientation, int xsegments) {
    OgreJNI.SceneManager_setSkyDome__SWIG_3(swigCPtr, this, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), orientation, xsegments);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, boolean drawFirst, Quaternion orientation) {
    OgreJNI.SceneManager_setSkyDome__SWIG_4(swigCPtr, this, enable, materialName, curvature, tiling, distance, drawFirst, Quaternion.getCPtr(orientation), orientation);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, boolean drawFirst) {
    OgreJNI.SceneManager_setSkyDome__SWIG_5(swigCPtr, this, enable, materialName, curvature, tiling, distance, drawFirst);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance) {
    OgreJNI.SceneManager_setSkyDome__SWIG_6(swigCPtr, this, enable, materialName, curvature, tiling, distance);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature, float tiling) {
    OgreJNI.SceneManager_setSkyDome__SWIG_7(swigCPtr, this, enable, materialName, curvature, tiling);
  }

  public void setSkyDome(boolean enable, String materialName, float curvature) {
    OgreJNI.SceneManager_setSkyDome__SWIG_8(swigCPtr, this, enable, materialName, curvature);
  }

  public void setSkyDome(boolean enable, String materialName) {
    OgreJNI.SceneManager_setSkyDome__SWIG_9(swigCPtr, this, enable, materialName);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, short renderQueue, Quaternion orientation, int xsegments, int ysegments, int ysegments_keep, String groupName) {
    OgreJNI.SceneManager__setSkyDome__SWIG_0(swigCPtr, this, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), orientation, xsegments, ysegments, ysegments_keep, groupName);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, short renderQueue, Quaternion orientation, int xsegments, int ysegments, int ysegments_keep) {
    OgreJNI.SceneManager__setSkyDome__SWIG_1(swigCPtr, this, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), orientation, xsegments, ysegments, ysegments_keep);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, short renderQueue, Quaternion orientation, int xsegments, int ysegments) {
    OgreJNI.SceneManager__setSkyDome__SWIG_2(swigCPtr, this, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), orientation, xsegments, ysegments);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, short renderQueue, Quaternion orientation, int xsegments) {
    OgreJNI.SceneManager__setSkyDome__SWIG_3(swigCPtr, this, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), orientation, xsegments);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, short renderQueue, Quaternion orientation) {
    OgreJNI.SceneManager__setSkyDome__SWIG_4(swigCPtr, this, enable, materialName, curvature, tiling, distance, renderQueue, Quaternion.getCPtr(orientation), orientation);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance, short renderQueue) {
    OgreJNI.SceneManager__setSkyDome__SWIG_5(swigCPtr, this, enable, materialName, curvature, tiling, distance, renderQueue);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature, float tiling, float distance) {
    OgreJNI.SceneManager__setSkyDome__SWIG_6(swigCPtr, this, enable, materialName, curvature, tiling, distance);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature, float tiling) {
    OgreJNI.SceneManager__setSkyDome__SWIG_7(swigCPtr, this, enable, materialName, curvature, tiling);
  }

  public void _setSkyDome(boolean enable, String materialName, float curvature) {
    OgreJNI.SceneManager__setSkyDome__SWIG_8(swigCPtr, this, enable, materialName, curvature);
  }

  public void _setSkyDome(boolean enable, String materialName) {
    OgreJNI.SceneManager__setSkyDome__SWIG_9(swigCPtr, this, enable, materialName);
  }

  public void setSkyDomeEnabled(boolean enable) {
    OgreJNI.SceneManager_setSkyDomeEnabled(swigCPtr, this, enable);
  }

  public boolean isSkyDomeEnabled() {
    return OgreJNI.SceneManager_isSkyDomeEnabled(swigCPtr, this);
  }

  public SceneNode getSkyDomeNode() {
    long cPtr = OgreJNI.SceneManager_getSkyDomeNode(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneNode(cPtr, false);
  }

  public SceneManager.SkyDomeGenParameters getSkyDomeGenParameters() {
    return new SceneManager.SkyDomeGenParameters(OgreJNI.SceneManager_getSkyDomeGenParameters(swigCPtr, this), false);
  }

  public void setFog(FogMode mode, ColourValue colour, float expDensity, float linearStart, float linearEnd) {
    OgreJNI.SceneManager_setFog__SWIG_0(swigCPtr, this, mode.swigValue(), ColourValue.getCPtr(colour), colour, expDensity, linearStart, linearEnd);
  }

  public void setFog(FogMode mode, ColourValue colour, float expDensity, float linearStart) {
    OgreJNI.SceneManager_setFog__SWIG_1(swigCPtr, this, mode.swigValue(), ColourValue.getCPtr(colour), colour, expDensity, linearStart);
  }

  public void setFog(FogMode mode, ColourValue colour, float expDensity) {
    OgreJNI.SceneManager_setFog__SWIG_2(swigCPtr, this, mode.swigValue(), ColourValue.getCPtr(colour), colour, expDensity);
  }

  public void setFog(FogMode mode, ColourValue colour) {
    OgreJNI.SceneManager_setFog__SWIG_3(swigCPtr, this, mode.swigValue(), ColourValue.getCPtr(colour), colour);
  }

  public void setFog(FogMode mode) {
    OgreJNI.SceneManager_setFog__SWIG_4(swigCPtr, this, mode.swigValue());
  }

  public void setFog() {
    OgreJNI.SceneManager_setFog__SWIG_5(swigCPtr, this);
  }

  public FogMode getFogMode() {
    return FogMode.swigToEnum(OgreJNI.SceneManager_getFogMode(swigCPtr, this));
  }

  public ColourValue getFogColour() {
    return new ColourValue(OgreJNI.SceneManager_getFogColour(swigCPtr, this), false);
  }

  public float getFogStart() {
    return OgreJNI.SceneManager_getFogStart(swigCPtr, this);
  }

  public float getFogEnd() {
    return OgreJNI.SceneManager_getFogEnd(swigCPtr, this);
  }

  public float getFogDensity() {
    return OgreJNI.SceneManager_getFogDensity(swigCPtr, this);
  }

  public BillboardSet createBillboardSet(long poolSize) {
    long cPtr = OgreJNI.SceneManager_createBillboardSet__SWIG_0(swigCPtr, this, poolSize);
    return (cPtr == 0) ? null : new BillboardSet(cPtr, false);
  }

  public BillboardSet createBillboardSet() {
    long cPtr = OgreJNI.SceneManager_createBillboardSet__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new BillboardSet(cPtr, false);
  }

  public BillboardSet createBillboardSet(String name, long poolSize) {
    long cPtr = OgreJNI.SceneManager_createBillboardSet__SWIG_2(swigCPtr, this, name, poolSize);
    return (cPtr == 0) ? null : new BillboardSet(cPtr, false);
  }

  public BillboardSet createBillboardSet(String name) {
    long cPtr = OgreJNI.SceneManager_createBillboardSet__SWIG_3(swigCPtr, this, name);
    return (cPtr == 0) ? null : new BillboardSet(cPtr, false);
  }

  public BillboardSet getBillboardSet(String name) {
    long cPtr = OgreJNI.SceneManager_getBillboardSet(swigCPtr, this, name);
    return (cPtr == 0) ? null : new BillboardSet(cPtr, false);
  }

  public boolean hasBillboardSet(String name) {
    return OgreJNI.SceneManager_hasBillboardSet(swigCPtr, this, name);
  }

  public void destroyBillboardSet(BillboardSet set) {
    OgreJNI.SceneManager_destroyBillboardSet__SWIG_0(swigCPtr, this, BillboardSet.getCPtr(set), set);
  }

  public void destroyBillboardSet(String name) {
    OgreJNI.SceneManager_destroyBillboardSet__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllBillboardSets() {
    OgreJNI.SceneManager_destroyAllBillboardSets(swigCPtr, this);
  }

  public void setDisplaySceneNodes(boolean display) {
    OgreJNI.SceneManager_setDisplaySceneNodes(swigCPtr, this, display);
  }

  public boolean getDisplaySceneNodes() {
    return OgreJNI.SceneManager_getDisplaySceneNodes(swigCPtr, this);
  }

  public Animation createAnimation(String name, float length) {
    long cPtr = OgreJNI.SceneManager_createAnimation(swigCPtr, this, name, length);
    return (cPtr == 0) ? null : new Animation(cPtr, false);
  }

  public Animation getAnimation(String name) {
    long cPtr = OgreJNI.SceneManager_getAnimation(swigCPtr, this, name);
    return (cPtr == 0) ? null : new Animation(cPtr, false);
  }

  public boolean hasAnimation(String name) {
    return OgreJNI.SceneManager_hasAnimation(swigCPtr, this, name);
  }

  public void destroyAnimation(String name) {
    OgreJNI.SceneManager_destroyAnimation(swigCPtr, this, name);
  }

  public void destroyAllAnimations() {
    OgreJNI.SceneManager_destroyAllAnimations(swigCPtr, this);
  }

  public AnimationState createAnimationState(String animName) {
    long cPtr = OgreJNI.SceneManager_createAnimationState(swigCPtr, this, animName);
    return (cPtr == 0) ? null : new AnimationState(cPtr, false);
  }

  public AnimationState getAnimationState(String animName) {
    long cPtr = OgreJNI.SceneManager_getAnimationState(swigCPtr, this, animName);
    return (cPtr == 0) ? null : new AnimationState(cPtr, false);
  }

  public boolean hasAnimationState(String name) {
    return OgreJNI.SceneManager_hasAnimationState(swigCPtr, this, name);
  }

  public void destroyAnimationState(String name) {
    OgreJNI.SceneManager_destroyAnimationState(swigCPtr, this, name);
  }

  public void destroyAllAnimationStates() {
    OgreJNI.SceneManager_destroyAllAnimationStates(swigCPtr, this);
  }

  public void manualRender(RenderOperation rend, Pass pass, Viewport vp, Matrix4 worldMatrix, Matrix4 viewMatrix, Matrix4 projMatrix, boolean doBeginEndFrame) {
    OgreJNI.SceneManager_manualRender__SWIG_0(swigCPtr, this, RenderOperation.getCPtr(rend), rend, Pass.getCPtr(pass), pass, Viewport.getCPtr(vp), vp, Matrix4.getCPtr(worldMatrix), worldMatrix, Matrix4.getCPtr(viewMatrix), viewMatrix, Matrix4.getCPtr(projMatrix), projMatrix, doBeginEndFrame);
  }

  public void manualRender(RenderOperation rend, Pass pass, Viewport vp, Matrix4 worldMatrix, Matrix4 viewMatrix, Matrix4 projMatrix) {
    OgreJNI.SceneManager_manualRender__SWIG_1(swigCPtr, this, RenderOperation.getCPtr(rend), rend, Pass.getCPtr(pass), pass, Viewport.getCPtr(vp), vp, Matrix4.getCPtr(worldMatrix), worldMatrix, Matrix4.getCPtr(viewMatrix), viewMatrix, Matrix4.getCPtr(projMatrix), projMatrix);
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Matrix4 viewMatrix, Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t manualLightList) {
    OgreJNI.SceneManager_manualRender__SWIG_2(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass, Viewport.getCPtr(vp), vp, Matrix4.getCPtr(viewMatrix), viewMatrix, Matrix4.getCPtr(projMatrix), projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(manualLightList));
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Matrix4 viewMatrix, Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping, boolean doLightIteration) {
    OgreJNI.SceneManager_manualRender__SWIG_3(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass, Viewport.getCPtr(vp), vp, Matrix4.getCPtr(viewMatrix), viewMatrix, Matrix4.getCPtr(projMatrix), projMatrix, doBeginEndFrame, lightScissoringClipping, doLightIteration);
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Matrix4 viewMatrix, Matrix4 projMatrix, boolean doBeginEndFrame, boolean lightScissoringClipping) {
    OgreJNI.SceneManager_manualRender__SWIG_4(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass, Viewport.getCPtr(vp), vp, Matrix4.getCPtr(viewMatrix), viewMatrix, Matrix4.getCPtr(projMatrix), projMatrix, doBeginEndFrame, lightScissoringClipping);
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Matrix4 viewMatrix, Matrix4 projMatrix, boolean doBeginEndFrame) {
    OgreJNI.SceneManager_manualRender__SWIG_5(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass, Viewport.getCPtr(vp), vp, Matrix4.getCPtr(viewMatrix), viewMatrix, Matrix4.getCPtr(projMatrix), projMatrix, doBeginEndFrame);
  }

  public void manualRender(Renderable rend, Pass pass, Viewport vp, Matrix4 viewMatrix, Matrix4 projMatrix) {
    OgreJNI.SceneManager_manualRender__SWIG_6(swigCPtr, this, Renderable.getCPtr(rend), rend, Pass.getCPtr(pass), pass, Viewport.getCPtr(vp), vp, Matrix4.getCPtr(viewMatrix), viewMatrix, Matrix4.getCPtr(projMatrix), projMatrix);
  }

  public RenderQueue getRenderQueue() {
    long cPtr = OgreJNI.SceneManager_getRenderQueue(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderQueue(cPtr, false);
  }

  public void addRenderQueueListener(RenderQueueListener newListener) {
    OgreJNI.SceneManager_addRenderQueueListener(swigCPtr, this, RenderQueueListener.getCPtr(newListener), newListener);
  }

  public void removeRenderQueueListener(RenderQueueListener delListener) {
    OgreJNI.SceneManager_removeRenderQueueListener(swigCPtr, this, RenderQueueListener.getCPtr(delListener), delListener);
  }

  public void addRenderObjectListener(RenderObjectListener newListener) {
    OgreJNI.SceneManager_addRenderObjectListener(swigCPtr, this, RenderObjectListener.getCPtr(newListener), newListener);
  }

  public void removeRenderObjectListener(RenderObjectListener delListener) {
    OgreJNI.SceneManager_removeRenderObjectListener(swigCPtr, this, RenderObjectListener.getCPtr(delListener), delListener);
  }

  public void addSpecialCaseRenderQueue(short qid) {
    OgreJNI.SceneManager_addSpecialCaseRenderQueue(swigCPtr, this, qid);
  }

  public void removeSpecialCaseRenderQueue(short qid) {
    OgreJNI.SceneManager_removeSpecialCaseRenderQueue(swigCPtr, this, qid);
  }

  public void clearSpecialCaseRenderQueues() {
    OgreJNI.SceneManager_clearSpecialCaseRenderQueues(swigCPtr, this);
  }

  public void setSpecialCaseRenderQueueMode(SceneManager.SpecialCaseRenderQueueMode mode) {
    OgreJNI.SceneManager_setSpecialCaseRenderQueueMode(swigCPtr, this, mode.swigValue());
  }

  public SceneManager.SpecialCaseRenderQueueMode getSpecialCaseRenderQueueMode() {
    return SceneManager.SpecialCaseRenderQueueMode.swigToEnum(OgreJNI.SceneManager_getSpecialCaseRenderQueueMode(swigCPtr, this));
  }

  public boolean isRenderQueueToBeProcessed(short qid) {
    return OgreJNI.SceneManager_isRenderQueueToBeProcessed(swigCPtr, this, qid);
  }

  public void setWorldGeometryRenderQueue(short qid) {
    OgreJNI.SceneManager_setWorldGeometryRenderQueue(swigCPtr, this, qid);
  }

  public short getWorldGeometryRenderQueue() {
    return OgreJNI.SceneManager_getWorldGeometryRenderQueue(swigCPtr, this);
  }

  public void showBoundingBoxes(boolean bShow) {
    OgreJNI.SceneManager_showBoundingBoxes(swigCPtr, this, bShow);
  }

  public boolean getShowBoundingBoxes() {
    return OgreJNI.SceneManager_getShowBoundingBoxes(swigCPtr, this);
  }

  public void _notifyAutotrackingSceneNode(SceneNode node, boolean autoTrack) {
    OgreJNI.SceneManager__notifyAutotrackingSceneNode(swigCPtr, this, SceneNode.getCPtr(node), node, autoTrack);
  }

  public AxisAlignedBoxSceneQuery createAABBQuery(AxisAlignedBox box, long mask) {
    long cPtr = OgreJNI.SceneManager_createAABBQuery__SWIG_0(swigCPtr, this, AxisAlignedBox.getCPtr(box), box, mask);
    return (cPtr == 0) ? null : new AxisAlignedBoxSceneQuery(cPtr, false);
  }

  public AxisAlignedBoxSceneQuery createAABBQuery(AxisAlignedBox box) {
    long cPtr = OgreJNI.SceneManager_createAABBQuery__SWIG_1(swigCPtr, this, AxisAlignedBox.getCPtr(box), box);
    return (cPtr == 0) ? null : new AxisAlignedBoxSceneQuery(cPtr, false);
  }

  public SphereSceneQuery createSphereQuery(Sphere sphere, long mask) {
    long cPtr = OgreJNI.SceneManager_createSphereQuery__SWIG_0(swigCPtr, this, Sphere.getCPtr(sphere), sphere, mask);
    return (cPtr == 0) ? null : new SphereSceneQuery(cPtr, false);
  }

  public SphereSceneQuery createSphereQuery(Sphere sphere) {
    long cPtr = OgreJNI.SceneManager_createSphereQuery__SWIG_1(swigCPtr, this, Sphere.getCPtr(sphere), sphere);
    return (cPtr == 0) ? null : new SphereSceneQuery(cPtr, false);
  }

  public PlaneBoundedVolumeListSceneQuery createPlaneBoundedVolumeQuery(SWIGTYPE_p_Ogre__vectorT_Ogre__PlaneBoundedVolume_t__type volumes, long mask) {
    long cPtr = OgreJNI.SceneManager_createPlaneBoundedVolumeQuery__SWIG_0(swigCPtr, this, SWIGTYPE_p_Ogre__vectorT_Ogre__PlaneBoundedVolume_t__type.getCPtr(volumes), mask);
    return (cPtr == 0) ? null : new PlaneBoundedVolumeListSceneQuery(cPtr, false);
  }

  public PlaneBoundedVolumeListSceneQuery createPlaneBoundedVolumeQuery(SWIGTYPE_p_Ogre__vectorT_Ogre__PlaneBoundedVolume_t__type volumes) {
    long cPtr = OgreJNI.SceneManager_createPlaneBoundedVolumeQuery__SWIG_1(swigCPtr, this, SWIGTYPE_p_Ogre__vectorT_Ogre__PlaneBoundedVolume_t__type.getCPtr(volumes));
    return (cPtr == 0) ? null : new PlaneBoundedVolumeListSceneQuery(cPtr, false);
  }

  public RaySceneQuery createRayQuery(Ray ray, long mask) {
    long cPtr = OgreJNI.SceneManager_createRayQuery__SWIG_0(swigCPtr, this, Ray.getCPtr(ray), ray, mask);
    return (cPtr == 0) ? null : new RaySceneQuery(cPtr, false);
  }

  public RaySceneQuery createRayQuery(Ray ray) {
    long cPtr = OgreJNI.SceneManager_createRayQuery__SWIG_1(swigCPtr, this, Ray.getCPtr(ray), ray);
    return (cPtr == 0) ? null : new RaySceneQuery(cPtr, false);
  }

  public IntersectionSceneQuery createIntersectionQuery(long mask) {
    long cPtr = OgreJNI.SceneManager_createIntersectionQuery__SWIG_0(swigCPtr, this, mask);
    return (cPtr == 0) ? null : new IntersectionSceneQuery(cPtr, false);
  }

  public IntersectionSceneQuery createIntersectionQuery() {
    long cPtr = OgreJNI.SceneManager_createIntersectionQuery__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new IntersectionSceneQuery(cPtr, false);
  }

  public void destroyQuery(SceneQuery query) {
    OgreJNI.SceneManager_destroyQuery(swigCPtr, this, SceneQuery.getCPtr(query), query);
  }

  public SWIGTYPE_p_Ogre__mapT_std__string_Ogre__Camera_p_std__lessT_std__string_t_t__type getCameras() {
    return new SWIGTYPE_p_Ogre__mapT_std__string_Ogre__Camera_p_std__lessT_std__string_t_t__type(OgreJNI.SceneManager_getCameras(swigCPtr, this), false);
  }

  public SWIGTYPE_p_Ogre__mapT_std__string_Ogre__Animation_p_std__lessT_std__string_t_t__type getAnimations() {
    return new SWIGTYPE_p_Ogre__mapT_std__string_Ogre__Animation_p_std__lessT_std__string_t_t__type(OgreJNI.SceneManager_getAnimations(swigCPtr, this), false);
  }

  public SWIGTYPE_p_Ogre__mapT_std__string_Ogre__AnimationState_p_std__lessT_std__string_t_t__type getAnimationStates() {
    return new SWIGTYPE_p_Ogre__mapT_std__string_Ogre__AnimationState_p_std__lessT_std__string_t_t__type(OgreJNI.SceneManager_getAnimationStates(swigCPtr, this), false);
  }

  public void setShadowTechnique(ShadowTechnique technique) {
    OgreJNI.SceneManager_setShadowTechnique(swigCPtr, this, technique.swigValue());
  }

  public ShadowTechnique getShadowTechnique() {
    return ShadowTechnique.swigToEnum(OgreJNI.SceneManager_getShadowTechnique(swigCPtr, this));
  }

  public void setShowDebugShadows(boolean debug) {
    OgreJNI.SceneManager_setShowDebugShadows(swigCPtr, this, debug);
  }

  public boolean getShowDebugShadows() {
    return OgreJNI.SceneManager_getShowDebugShadows(swigCPtr, this);
  }

  public void setShadowColour(ColourValue colour) {
    OgreJNI.SceneManager_setShadowColour(swigCPtr, this, ColourValue.getCPtr(colour), colour);
  }

  public ColourValue getShadowColour() {
    return new ColourValue(OgreJNI.SceneManager_getShadowColour(swigCPtr, this), false);
  }

  public void setShadowDirectionalLightExtrusionDistance(float dist) {
    OgreJNI.SceneManager_setShadowDirectionalLightExtrusionDistance(swigCPtr, this, dist);
  }

  public float getShadowDirectionalLightExtrusionDistance() {
    return OgreJNI.SceneManager_getShadowDirectionalLightExtrusionDistance(swigCPtr, this);
  }

  public void setShadowFarDistance(float distance) {
    OgreJNI.SceneManager_setShadowFarDistance(swigCPtr, this, distance);
  }

  public float getShadowFarDistance() {
    return OgreJNI.SceneManager_getShadowFarDistance(swigCPtr, this);
  }

  public float getShadowFarDistanceSquared() {
    return OgreJNI.SceneManager_getShadowFarDistanceSquared(swigCPtr, this);
  }

  public void setShadowIndexBufferSize(long size) {
    OgreJNI.SceneManager_setShadowIndexBufferSize(swigCPtr, this, size);
  }

  public long getShadowIndexBufferSize() {
    return OgreJNI.SceneManager_getShadowIndexBufferSize(swigCPtr, this);
  }

  public void setShadowTextureSize(int size) {
    OgreJNI.SceneManager_setShadowTextureSize(swigCPtr, this, size);
  }

  public void setShadowTextureConfig(long shadowIndex, int width, int height, PixelFormat format, int fsaa, int depthBufferPoolId) {
    OgreJNI.SceneManager_setShadowTextureConfig__SWIG_0(swigCPtr, this, shadowIndex, width, height, format.swigValue(), fsaa, depthBufferPoolId);
  }

  public void setShadowTextureConfig(long shadowIndex, int width, int height, PixelFormat format, int fsaa) {
    OgreJNI.SceneManager_setShadowTextureConfig__SWIG_1(swigCPtr, this, shadowIndex, width, height, format.swigValue(), fsaa);
  }

  public void setShadowTextureConfig(long shadowIndex, int width, int height, PixelFormat format) {
    OgreJNI.SceneManager_setShadowTextureConfig__SWIG_2(swigCPtr, this, shadowIndex, width, height, format.swigValue());
  }

  public void setShadowTextureConfig(long shadowIndex, ShadowTextureConfig config) {
    OgreJNI.SceneManager_setShadowTextureConfig__SWIG_3(swigCPtr, this, shadowIndex, ShadowTextureConfig.getCPtr(config), config);
  }

  public SWIGTYPE_p_Ogre__ConstVectorIteratorT_Ogre__vectorT_Ogre__ShadowTextureConfig_t__type_t getShadowTextureConfigIterator() {
    return new SWIGTYPE_p_Ogre__ConstVectorIteratorT_Ogre__vectorT_Ogre__ShadowTextureConfig_t__type_t(OgreJNI.SceneManager_getShadowTextureConfigIterator(swigCPtr, this), true);
  }

  public void setShadowTexturePixelFormat(PixelFormat fmt) {
    OgreJNI.SceneManager_setShadowTexturePixelFormat(swigCPtr, this, fmt.swigValue());
  }

  public void setShadowTextureFSAA(int fsaa) {
    OgreJNI.SceneManager_setShadowTextureFSAA(swigCPtr, this, fsaa);
  }

  public void setShadowTextureCount(long count) {
    OgreJNI.SceneManager_setShadowTextureCount(swigCPtr, this, count);
  }

  public long getShadowTextureCount() {
    return OgreJNI.SceneManager_getShadowTextureCount(swigCPtr, this);
  }

  public void setShadowTextureCountPerLightType(Light.LightTypes type, long count) {
    OgreJNI.SceneManager_setShadowTextureCountPerLightType(swigCPtr, this, type.swigValue(), count);
  }

  public long getShadowTextureCountPerLightType(Light.LightTypes type) {
    return OgreJNI.SceneManager_getShadowTextureCountPerLightType(swigCPtr, this, type.swigValue());
  }

  public void setShadowTextureSettings(int size, int count, PixelFormat fmt, int fsaa, int depthBufferPoolId) {
    OgreJNI.SceneManager_setShadowTextureSettings__SWIG_0(swigCPtr, this, size, count, fmt.swigValue(), fsaa, depthBufferPoolId);
  }

  public void setShadowTextureSettings(int size, int count, PixelFormat fmt, int fsaa) {
    OgreJNI.SceneManager_setShadowTextureSettings__SWIG_1(swigCPtr, this, size, count, fmt.swigValue(), fsaa);
  }

  public void setShadowTextureSettings(int size, int count, PixelFormat fmt) {
    OgreJNI.SceneManager_setShadowTextureSettings__SWIG_2(swigCPtr, this, size, count, fmt.swigValue());
  }

  public void setShadowTextureSettings(int size, int count) {
    OgreJNI.SceneManager_setShadowTextureSettings__SWIG_3(swigCPtr, this, size, count);
  }

  public TexturePtr getShadowTexture(long shadowIndex) {
    return new TexturePtr(OgreJNI.SceneManager_getShadowTexture(swigCPtr, this, shadowIndex), false);
  }

  public void setShadowDirLightTextureOffset(float offset) {
    OgreJNI.SceneManager_setShadowDirLightTextureOffset(swigCPtr, this, offset);
  }

  public float getShadowDirLightTextureOffset() {
    return OgreJNI.SceneManager_getShadowDirLightTextureOffset(swigCPtr, this);
  }

  public void setShadowTextureFadeStart(float fadeStart) {
    OgreJNI.SceneManager_setShadowTextureFadeStart(swigCPtr, this, fadeStart);
  }

  public void setShadowTextureFadeEnd(float fadeEnd) {
    OgreJNI.SceneManager_setShadowTextureFadeEnd(swigCPtr, this, fadeEnd);
  }

  public void setShadowTextureSelfShadow(boolean selfShadow) {
    OgreJNI.SceneManager_setShadowTextureSelfShadow(swigCPtr, this, selfShadow);
  }

  public boolean getShadowTextureSelfShadow() {
    return OgreJNI.SceneManager_getShadowTextureSelfShadow(swigCPtr, this);
  }

  public void setShadowTextureCasterMaterial(MaterialPtr mat) {
    OgreJNI.SceneManager_setShadowTextureCasterMaterial(swigCPtr, this, MaterialPtr.getCPtr(mat), mat);
  }

  public void setShadowTextureReceiverMaterial(MaterialPtr mat) {
    OgreJNI.SceneManager_setShadowTextureReceiverMaterial(swigCPtr, this, MaterialPtr.getCPtr(mat), mat);
  }

  public void setShadowCasterRenderBackFaces(boolean bf) {
    OgreJNI.SceneManager_setShadowCasterRenderBackFaces(swigCPtr, this, bf);
  }

  public boolean getShadowCasterRenderBackFaces() {
    return OgreJNI.SceneManager_getShadowCasterRenderBackFaces(swigCPtr, this);
  }

  public void setShadowCameraSetup(ShadowCameraSetupPtr shadowSetup) {
    OgreJNI.SceneManager_setShadowCameraSetup(swigCPtr, this, ShadowCameraSetupPtr.getCPtr(shadowSetup), shadowSetup);
  }

  public ShadowCameraSetupPtr getShadowCameraSetup() {
    return new ShadowCameraSetupPtr(OgreJNI.SceneManager_getShadowCameraSetup(swigCPtr, this), false);
  }

  public void setShadowUseInfiniteFarPlane(boolean enable) {
    OgreJNI.SceneManager_setShadowUseInfiniteFarPlane(swigCPtr, this, enable);
  }

  public boolean isShadowTechniqueStencilBased() {
    return OgreJNI.SceneManager_isShadowTechniqueStencilBased(swigCPtr, this);
  }

  public boolean isShadowTechniqueTextureBased() {
    return OgreJNI.SceneManager_isShadowTechniqueTextureBased(swigCPtr, this);
  }

  public boolean isShadowTechniqueModulative() {
    return OgreJNI.SceneManager_isShadowTechniqueModulative(swigCPtr, this);
  }

  public boolean isShadowTechniqueAdditive() {
    return OgreJNI.SceneManager_isShadowTechniqueAdditive(swigCPtr, this);
  }

  public boolean isShadowTechniqueIntegrated() {
    return OgreJNI.SceneManager_isShadowTechniqueIntegrated(swigCPtr, this);
  }

  public boolean isShadowTechniqueInUse() {
    return OgreJNI.SceneManager_isShadowTechniqueInUse(swigCPtr, this);
  }

  public void setShadowUseLightClipPlanes(boolean enabled) {
    OgreJNI.SceneManager_setShadowUseLightClipPlanes(swigCPtr, this, enabled);
  }

  public boolean getShadowUseLightClipPlanes() {
    return OgreJNI.SceneManager_getShadowUseLightClipPlanes(swigCPtr, this);
  }

  public void _setActiveCompositorChain(CompositorChain chain) {
    OgreJNI.SceneManager__setActiveCompositorChain(swigCPtr, this, CompositorChain.getCPtr(chain), chain);
  }

  public void setLateMaterialResolving(boolean isLate) {
    OgreJNI.SceneManager_setLateMaterialResolving(swigCPtr, this, isLate);
  }

  public boolean isLateMaterialResolving() {
    return OgreJNI.SceneManager_isLateMaterialResolving(swigCPtr, this);
  }

  public CompositorChain _getActiveCompositorChain() {
    long cPtr = OgreJNI.SceneManager__getActiveCompositorChain(swigCPtr, this);
    return (cPtr == 0) ? null : new CompositorChain(cPtr, false);
  }

  public void addListener(SceneManager.Listener s) {
    OgreJNI.SceneManager_addListener(swigCPtr, this, SceneManager.Listener.getCPtr(s), s);
  }

  public void removeListener(SceneManager.Listener s) {
    OgreJNI.SceneManager_removeListener(swigCPtr, this, SceneManager.Listener.getCPtr(s), s);
  }

  public StaticGeometry createStaticGeometry(String name) {
    long cPtr = OgreJNI.SceneManager_createStaticGeometry(swigCPtr, this, name);
    return (cPtr == 0) ? null : new StaticGeometry(cPtr, false);
  }

  public StaticGeometry getStaticGeometry(String name) {
    long cPtr = OgreJNI.SceneManager_getStaticGeometry(swigCPtr, this, name);
    return (cPtr == 0) ? null : new StaticGeometry(cPtr, false);
  }

  public boolean hasStaticGeometry(String name) {
    return OgreJNI.SceneManager_hasStaticGeometry(swigCPtr, this, name);
  }

  public void destroyStaticGeometry(StaticGeometry geom) {
    OgreJNI.SceneManager_destroyStaticGeometry__SWIG_0(swigCPtr, this, StaticGeometry.getCPtr(geom), geom);
  }

  public void destroyStaticGeometry(String name) {
    OgreJNI.SceneManager_destroyStaticGeometry__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllStaticGeometry() {
    OgreJNI.SceneManager_destroyAllStaticGeometry(swigCPtr, this);
  }

  public SWIGTYPE_p_Ogre__InstancedGeometry createInstancedGeometry(String name) {
    long cPtr = OgreJNI.SceneManager_createInstancedGeometry(swigCPtr, this, name);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__InstancedGeometry(cPtr, false);
  }

  public SWIGTYPE_p_Ogre__InstancedGeometry getInstancedGeometry(String name) {
    long cPtr = OgreJNI.SceneManager_getInstancedGeometry(swigCPtr, this, name);
    return (cPtr == 0) ? null : new SWIGTYPE_p_Ogre__InstancedGeometry(cPtr, false);
  }

  public void destroyInstancedGeometry(SWIGTYPE_p_Ogre__InstancedGeometry geom) {
    OgreJNI.SceneManager_destroyInstancedGeometry__SWIG_0(swigCPtr, this, SWIGTYPE_p_Ogre__InstancedGeometry.getCPtr(geom));
  }

  public void destroyInstancedGeometry(String name) {
    OgreJNI.SceneManager_destroyInstancedGeometry__SWIG_1(swigCPtr, this, name);
  }

  public void destroyAllInstancedGeometry() {
    OgreJNI.SceneManager_destroyAllInstancedGeometry(swigCPtr, this);
  }

  public InstanceManager createInstanceManager(String customName, String meshName, String groupName, InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags, int subMeshIdx) {
    long cPtr = OgreJNI.SceneManager_createInstanceManager__SWIG_0(swigCPtr, this, customName, meshName, groupName, technique.swigValue(), numInstancesPerBatch, flags, subMeshIdx);
    return (cPtr == 0) ? null : new InstanceManager(cPtr, false);
  }

  public InstanceManager createInstanceManager(String customName, String meshName, String groupName, InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags) {
    long cPtr = OgreJNI.SceneManager_createInstanceManager__SWIG_1(swigCPtr, this, customName, meshName, groupName, technique.swigValue(), numInstancesPerBatch, flags);
    return (cPtr == 0) ? null : new InstanceManager(cPtr, false);
  }

  public InstanceManager createInstanceManager(String customName, String meshName, String groupName, InstanceManager.InstancingTechnique technique, long numInstancesPerBatch) {
    long cPtr = OgreJNI.SceneManager_createInstanceManager__SWIG_2(swigCPtr, this, customName, meshName, groupName, technique.swigValue(), numInstancesPerBatch);
    return (cPtr == 0) ? null : new InstanceManager(cPtr, false);
  }

  public InstanceManager getInstanceManager(String managerName) {
    long cPtr = OgreJNI.SceneManager_getInstanceManager(swigCPtr, this, managerName);
    return (cPtr == 0) ? null : new InstanceManager(cPtr, false);
  }

  public boolean hasInstanceManager(String managerName) {
    return OgreJNI.SceneManager_hasInstanceManager(swigCPtr, this, managerName);
  }

  public void destroyInstanceManager(String name) {
    OgreJNI.SceneManager_destroyInstanceManager__SWIG_0(swigCPtr, this, name);
  }

  public void destroyInstanceManager(InstanceManager instanceManager) {
    OgreJNI.SceneManager_destroyInstanceManager__SWIG_1(swigCPtr, this, InstanceManager.getCPtr(instanceManager), instanceManager);
  }

  public void destroyAllInstanceManagers() {
    OgreJNI.SceneManager_destroyAllInstanceManagers(swigCPtr, this);
  }

  public long getNumInstancesPerBatch(String meshName, String groupName, String materialName, InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags, int subMeshIdx) {
    return OgreJNI.SceneManager_getNumInstancesPerBatch__SWIG_0(swigCPtr, this, meshName, groupName, materialName, technique.swigValue(), numInstancesPerBatch, flags, subMeshIdx);
  }

  public long getNumInstancesPerBatch(String meshName, String groupName, String materialName, InstanceManager.InstancingTechnique technique, long numInstancesPerBatch, int flags) {
    return OgreJNI.SceneManager_getNumInstancesPerBatch__SWIG_1(swigCPtr, this, meshName, groupName, materialName, technique.swigValue(), numInstancesPerBatch, flags);
  }

  public long getNumInstancesPerBatch(String meshName, String groupName, String materialName, InstanceManager.InstancingTechnique technique, long numInstancesPerBatch) {
    return OgreJNI.SceneManager_getNumInstancesPerBatch__SWIG_2(swigCPtr, this, meshName, groupName, materialName, technique.swigValue(), numInstancesPerBatch);
  }

  public InstancedEntity createInstancedEntity(String materialName, String managerName) {
    long cPtr = OgreJNI.SceneManager_createInstancedEntity(swigCPtr, this, materialName, managerName);
    return (cPtr == 0) ? null : new InstancedEntity(cPtr, false);
  }

  public void destroyInstancedEntity(InstancedEntity instancedEntity) {
    OgreJNI.SceneManager_destroyInstancedEntity(swigCPtr, this, InstancedEntity.getCPtr(instancedEntity), instancedEntity);
  }

  public void _addDirtyInstanceManager(InstanceManager dirtyManager) {
    OgreJNI.SceneManager__addDirtyInstanceManager(swigCPtr, this, InstanceManager.getCPtr(dirtyManager), dirtyManager);
  }

  public MovableObject createMovableObject(String name, String typeName, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t params) {
    long cPtr = OgreJNI.SceneManager_createMovableObject__SWIG_0(swigCPtr, this, name, typeName, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(params));
    return (cPtr == 0) ? null : new MovableObject(cPtr, false);
  }

  public MovableObject createMovableObject(String name, String typeName) {
    long cPtr = OgreJNI.SceneManager_createMovableObject__SWIG_1(swigCPtr, this, name, typeName);
    return (cPtr == 0) ? null : new MovableObject(cPtr, false);
  }

  public MovableObject createMovableObject(String typeName, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t params) {
    long cPtr = OgreJNI.SceneManager_createMovableObject__SWIG_2(swigCPtr, this, typeName, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(params));
    return (cPtr == 0) ? null : new MovableObject(cPtr, false);
  }

  public MovableObject createMovableObject(String typeName) {
    long cPtr = OgreJNI.SceneManager_createMovableObject__SWIG_3(swigCPtr, this, typeName);
    return (cPtr == 0) ? null : new MovableObject(cPtr, false);
  }

  public void destroyMovableObject(String name, String typeName) {
    OgreJNI.SceneManager_destroyMovableObject__SWIG_0(swigCPtr, this, name, typeName);
  }

  public void destroyMovableObject(MovableObject m) {
    OgreJNI.SceneManager_destroyMovableObject__SWIG_1(swigCPtr, this, MovableObject.getCPtr(m), m);
  }

  public void destroyAllMovableObjectsByType(String typeName) {
    OgreJNI.SceneManager_destroyAllMovableObjectsByType(swigCPtr, this, typeName);
  }

  public void destroyAllMovableObjects() {
    OgreJNI.SceneManager_destroyAllMovableObjects(swigCPtr, this);
  }

  public MovableObject getMovableObject(String name, String typeName) {
    long cPtr = OgreJNI.SceneManager_getMovableObject(swigCPtr, this, name, typeName);
    return (cPtr == 0) ? null : new MovableObject(cPtr, false);
  }

  public boolean hasMovableObject(String name, String typeName) {
    return OgreJNI.SceneManager_hasMovableObject(swigCPtr, this, name, typeName);
  }

  public SWIGTYPE_p_Ogre__MapIteratorT_Ogre__mapT_std__string_Ogre__MovableObject_p_std__lessT_std__string_t_t__type_t getMovableObjectIterator(String typeName) {
    return new SWIGTYPE_p_Ogre__MapIteratorT_Ogre__mapT_std__string_Ogre__MovableObject_p_std__lessT_std__string_t_t__type_t(OgreJNI.SceneManager_getMovableObjectIterator(swigCPtr, this, typeName), true);
  }

  public void injectMovableObject(MovableObject m) {
    OgreJNI.SceneManager_injectMovableObject(swigCPtr, this, MovableObject.getCPtr(m), m);
  }

  public void extractMovableObject(String name, String typeName) {
    OgreJNI.SceneManager_extractMovableObject__SWIG_0(swigCPtr, this, name, typeName);
  }

  public void extractMovableObject(MovableObject m) {
    OgreJNI.SceneManager_extractMovableObject__SWIG_1(swigCPtr, this, MovableObject.getCPtr(m), m);
  }

  public void extractAllMovableObjectsByType(String typeName) {
    OgreJNI.SceneManager_extractAllMovableObjectsByType(swigCPtr, this, typeName);
  }

  public void setVisibilityMask(long vmask) {
    OgreJNI.SceneManager_setVisibilityMask(swigCPtr, this, vmask);
  }

  public long getVisibilityMask() {
    return OgreJNI.SceneManager_getVisibilityMask(swigCPtr, this);
  }

  public long _getCombinedVisibilityMask() {
    return OgreJNI.SceneManager__getCombinedVisibilityMask(swigCPtr, this);
  }

  public void setFindVisibleObjects(boolean find) {
    OgreJNI.SceneManager_setFindVisibleObjects(swigCPtr, this, find);
  }

  public boolean getFindVisibleObjects() {
    return OgreJNI.SceneManager_getFindVisibleObjects(swigCPtr, this);
  }

  public void setNormaliseNormalsOnScale(boolean n) {
    OgreJNI.SceneManager_setNormaliseNormalsOnScale(swigCPtr, this, n);
  }

  public boolean getNormaliseNormalsOnScale() {
    return OgreJNI.SceneManager_getNormaliseNormalsOnScale(swigCPtr, this);
  }

  public void setFlipCullingOnNegativeScale(boolean n) {
    OgreJNI.SceneManager_setFlipCullingOnNegativeScale(swigCPtr, this, n);
  }

  public boolean getFlipCullingOnNegativeScale() {
    return OgreJNI.SceneManager_getFlipCullingOnNegativeScale(swigCPtr, this);
  }

  public void _injectRenderWithPass(Pass pass, Renderable rend, boolean shadowDerivation, boolean doLightIteration, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t manualLightList) {
    OgreJNI.SceneManager__injectRenderWithPass__SWIG_0(swigCPtr, this, Pass.getCPtr(pass), pass, Renderable.getCPtr(rend), rend, shadowDerivation, doLightIteration, SWIGTYPE_p_Ogre__HashedVectorT_Ogre__Light_p_t.getCPtr(manualLightList));
  }

  public void _injectRenderWithPass(Pass pass, Renderable rend, boolean shadowDerivation, boolean doLightIteration) {
    OgreJNI.SceneManager__injectRenderWithPass__SWIG_1(swigCPtr, this, Pass.getCPtr(pass), pass, Renderable.getCPtr(rend), rend, shadowDerivation, doLightIteration);
  }

  public void _injectRenderWithPass(Pass pass, Renderable rend, boolean shadowDerivation) {
    OgreJNI.SceneManager__injectRenderWithPass__SWIG_2(swigCPtr, this, Pass.getCPtr(pass), pass, Renderable.getCPtr(rend), rend, shadowDerivation);
  }

  public void _injectRenderWithPass(Pass pass, Renderable rend) {
    OgreJNI.SceneManager__injectRenderWithPass__SWIG_3(swigCPtr, this, Pass.getCPtr(pass), pass, Renderable.getCPtr(rend), rend);
  }

  public void _suppressRenderStateChanges(boolean suppress) {
    OgreJNI.SceneManager__suppressRenderStateChanges(swigCPtr, this, suppress);
  }

  public boolean _areRenderStateChangesSuppressed() {
    return OgreJNI.SceneManager__areRenderStateChangesSuppressed(swigCPtr, this);
  }

  public Pass _setPass(Pass pass, boolean evenIfSuppressed, boolean shadowDerivation) {
    long cPtr = OgreJNI.SceneManager__setPass__SWIG_0(swigCPtr, this, Pass.getCPtr(pass), pass, evenIfSuppressed, shadowDerivation);
    return (cPtr == 0) ? null : new Pass(cPtr, false);
  }

  public Pass _setPass(Pass pass, boolean evenIfSuppressed) {
    long cPtr = OgreJNI.SceneManager__setPass__SWIG_1(swigCPtr, this, Pass.getCPtr(pass), pass, evenIfSuppressed);
    return (cPtr == 0) ? null : new Pass(cPtr, false);
  }

  public Pass _setPass(Pass pass) {
    long cPtr = OgreJNI.SceneManager__setPass__SWIG_2(swigCPtr, this, Pass.getCPtr(pass), pass);
    return (cPtr == 0) ? null : new Pass(cPtr, false);
  }

  public void _markGpuParamsDirty(int mask) {
    OgreJNI.SceneManager__markGpuParamsDirty(swigCPtr, this, mask);
  }

  public void _suppressShadows(boolean suppress) {
    OgreJNI.SceneManager__suppressShadows(swigCPtr, this, suppress);
  }

  public boolean _areShadowsSuppressed() {
    return OgreJNI.SceneManager__areShadowsSuppressed(swigCPtr, this);
  }

  public void _renderQueueGroupObjects(RenderQueueGroup group, QueuedRenderableCollection.OrganisationMode om) {
    OgreJNI.SceneManager__renderQueueGroupObjects(swigCPtr, this, RenderQueueGroup.getCPtr(group), group, om.swigValue());
  }

  public void setQueuedRenderableVisitor(SceneManager.SceneMgrQueuedRenderableVisitor visitor) {
    OgreJNI.SceneManager_setQueuedRenderableVisitor(swigCPtr, this, SceneManager.SceneMgrQueuedRenderableVisitor.getCPtr(visitor), visitor);
  }

  public SceneManager.SceneMgrQueuedRenderableVisitor getQueuedRenderableVisitor() {
    long cPtr = OgreJNI.SceneManager_getQueuedRenderableVisitor(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneManager.SceneMgrQueuedRenderableVisitor(cPtr, false);
  }

  public RenderSystem getDestinationRenderSystem() {
    long cPtr = OgreJNI.SceneManager_getDestinationRenderSystem(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderSystem(cPtr, false);
  }

  public Viewport getCurrentViewport() {
    long cPtr = OgreJNI.SceneManager_getCurrentViewport(swigCPtr, this);
    return (cPtr == 0) ? null : new Viewport(cPtr, false);
  }

  public VisibleObjectsBoundsInfo getVisibleObjectsBoundsInfo(Camera cam) {
    return new VisibleObjectsBoundsInfo(OgreJNI.SceneManager_getVisibleObjectsBoundsInfo(swigCPtr, this, Camera.getCPtr(cam), cam), false);
  }

  public VisibleObjectsBoundsInfo getShadowCasterBoundsInfo(Light light, long iteration) {
    return new VisibleObjectsBoundsInfo(OgreJNI.SceneManager_getShadowCasterBoundsInfo__SWIG_0(swigCPtr, this, Light.getCPtr(light), light, iteration), false);
  }

  public VisibleObjectsBoundsInfo getShadowCasterBoundsInfo(Light light) {
    return new VisibleObjectsBoundsInfo(OgreJNI.SceneManager_getShadowCasterBoundsInfo__SWIG_1(swigCPtr, this, Light.getCPtr(light), light), false);
  }

  public void setCameraRelativeRendering(boolean rel) {
    OgreJNI.SceneManager_setCameraRelativeRendering(swigCPtr, this, rel);
  }

  public boolean getCameraRelativeRendering() {
    return OgreJNI.SceneManager_getCameraRelativeRendering(swigCPtr, this);
  }

  public void addLodListener(LodListener listener) {
    OgreJNI.SceneManager_addLodListener(swigCPtr, this, LodListener.getCPtr(listener), listener);
  }

  public void removeLodListener(LodListener listener) {
    OgreJNI.SceneManager_removeLodListener(swigCPtr, this, LodListener.getCPtr(listener), listener);
  }

  public void _notifyMovableObjectLodChanged(MovableObjectLodChangedEvent evt) {
    OgreJNI.SceneManager__notifyMovableObjectLodChanged(swigCPtr, this, MovableObjectLodChangedEvent.getCPtr(evt), evt);
  }

  public void _notifyEntityMeshLodChanged(EntityMeshLodChangedEvent evt) {
    OgreJNI.SceneManager__notifyEntityMeshLodChanged(swigCPtr, this, EntityMeshLodChangedEvent.getCPtr(evt), evt);
  }

  public void _notifyEntityMaterialLodChanged(EntityMaterialLodChangedEvent evt) {
    OgreJNI.SceneManager__notifyEntityMaterialLodChanged(swigCPtr, this, EntityMaterialLodChangedEvent.getCPtr(evt), evt);
  }

  public void _handleLodEvents() {
    OgreJNI.SceneManager__handleLodEvents(swigCPtr, this);
  }

  public SceneManager.IlluminationRenderStage _getCurrentRenderStage() {
    return SceneManager.IlluminationRenderStage.swigToEnum(OgreJNI.SceneManager__getCurrentRenderStage(swigCPtr, this));
  }

  public final static class IlluminationRenderStage {
    public final static SceneManager.IlluminationRenderStage IRS_NONE = new SceneManager.IlluminationRenderStage("IRS_NONE");
    public final static SceneManager.IlluminationRenderStage IRS_RENDER_TO_TEXTURE = new SceneManager.IlluminationRenderStage("IRS_RENDER_TO_TEXTURE");
    public final static SceneManager.IlluminationRenderStage IRS_RENDER_RECEIVER_PASS = new SceneManager.IlluminationRenderStage("IRS_RENDER_RECEIVER_PASS");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static IlluminationRenderStage swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + IlluminationRenderStage.class + " with value " + swigValue);
    }

    private IlluminationRenderStage(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private IlluminationRenderStage(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private IlluminationRenderStage(String swigName, IlluminationRenderStage swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static IlluminationRenderStage[] swigValues = { IRS_NONE, IRS_RENDER_TO_TEXTURE, IRS_RENDER_RECEIVER_PASS };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class SpecialCaseRenderQueueMode {
    public final static SceneManager.SpecialCaseRenderQueueMode SCRQM_INCLUDE = new SceneManager.SpecialCaseRenderQueueMode("SCRQM_INCLUDE");
    public final static SceneManager.SpecialCaseRenderQueueMode SCRQM_EXCLUDE = new SceneManager.SpecialCaseRenderQueueMode("SCRQM_EXCLUDE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SpecialCaseRenderQueueMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SpecialCaseRenderQueueMode.class + " with value " + swigValue);
    }

    private SpecialCaseRenderQueueMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SpecialCaseRenderQueueMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SpecialCaseRenderQueueMode(String swigName, SpecialCaseRenderQueueMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SpecialCaseRenderQueueMode[] swigValues = { SCRQM_INCLUDE, SCRQM_EXCLUDE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class PrefabType {
    public final static SceneManager.PrefabType PT_PLANE = new SceneManager.PrefabType("PT_PLANE");
    public final static SceneManager.PrefabType PT_CUBE = new SceneManager.PrefabType("PT_CUBE");
    public final static SceneManager.PrefabType PT_SPHERE = new SceneManager.PrefabType("PT_SPHERE");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static PrefabType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + PrefabType.class + " with value " + swigValue);
    }

    private PrefabType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private PrefabType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private PrefabType(String swigName, PrefabType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static PrefabType[] swigValues = { PT_PLANE, PT_CUBE, PT_SPHERE };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
