/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class VertexDeclaration {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected VertexDeclaration(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(VertexDeclaration obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_VertexDeclaration(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static boolean vertexElementLess(VertexElement e1, VertexElement e2) {
    return OgreJNI.VertexDeclaration_vertexElementLess(VertexElement.getCPtr(e1), e1, VertexElement.getCPtr(e2), e2);
  }

  public VertexDeclaration() {
    this(OgreJNI.new_VertexDeclaration(), true);
  }

  public long getElementCount() {
    return OgreJNI.VertexDeclaration_getElementCount(swigCPtr, this);
  }

  public SWIGTYPE_p_Ogre__listT_Ogre__VertexElement_t__type getElements() {
    return new SWIGTYPE_p_Ogre__listT_Ogre__VertexElement_t__type(OgreJNI.VertexDeclaration_getElements(swigCPtr, this), false);
  }

  public VertexElement getElement(int index) {
    long cPtr = OgreJNI.VertexDeclaration_getElement(swigCPtr, this, index);
    return (cPtr == 0) ? null : new VertexElement(cPtr, false);
  }

  public void sort() {
    OgreJNI.VertexDeclaration_sort(swigCPtr, this);
  }

  public void closeGapsInSource() {
    OgreJNI.VertexDeclaration_closeGapsInSource(swigCPtr, this);
  }

  public VertexDeclaration getAutoOrganisedDeclaration(boolean skeletalAnimation, boolean vertexAnimation, boolean vertexAnimationNormals) {
    long cPtr = OgreJNI.VertexDeclaration_getAutoOrganisedDeclaration(swigCPtr, this, skeletalAnimation, vertexAnimation, vertexAnimationNormals);
    return (cPtr == 0) ? null : new VertexDeclaration(cPtr, false);
  }

  public int getMaxSource() {
    return OgreJNI.VertexDeclaration_getMaxSource(swigCPtr, this);
  }

  public VertexElement addElement(int source, long offset, VertexElementType theType, VertexElementSemantic semantic, int index) {
    return new VertexElement(OgreJNI.VertexDeclaration_addElement__SWIG_0(swigCPtr, this, source, offset, theType.swigValue(), semantic.swigValue(), index), false);
  }

  public VertexElement addElement(int source, long offset, VertexElementType theType, VertexElementSemantic semantic) {
    return new VertexElement(OgreJNI.VertexDeclaration_addElement__SWIG_1(swigCPtr, this, source, offset, theType.swigValue(), semantic.swigValue()), false);
  }

  public VertexElement insertElement(int atPosition, int source, long offset, VertexElementType theType, VertexElementSemantic semantic, int index) {
    return new VertexElement(OgreJNI.VertexDeclaration_insertElement__SWIG_0(swigCPtr, this, atPosition, source, offset, theType.swigValue(), semantic.swigValue(), index), false);
  }

  public VertexElement insertElement(int atPosition, int source, long offset, VertexElementType theType, VertexElementSemantic semantic) {
    return new VertexElement(OgreJNI.VertexDeclaration_insertElement__SWIG_1(swigCPtr, this, atPosition, source, offset, theType.swigValue(), semantic.swigValue()), false);
  }

  public void removeElement(int elem_index) {
    OgreJNI.VertexDeclaration_removeElement__SWIG_0(swigCPtr, this, elem_index);
  }

  public void removeElement(VertexElementSemantic semantic, int index) {
    OgreJNI.VertexDeclaration_removeElement__SWIG_1(swigCPtr, this, semantic.swigValue(), index);
  }

  public void removeElement(VertexElementSemantic semantic) {
    OgreJNI.VertexDeclaration_removeElement__SWIG_2(swigCPtr, this, semantic.swigValue());
  }

  public void removeAllElements() {
    OgreJNI.VertexDeclaration_removeAllElements(swigCPtr, this);
  }

  public void modifyElement(int elem_index, int source, long offset, VertexElementType theType, VertexElementSemantic semantic, int index) {
    OgreJNI.VertexDeclaration_modifyElement__SWIG_0(swigCPtr, this, elem_index, source, offset, theType.swigValue(), semantic.swigValue(), index);
  }

  public void modifyElement(int elem_index, int source, long offset, VertexElementType theType, VertexElementSemantic semantic) {
    OgreJNI.VertexDeclaration_modifyElement__SWIG_1(swigCPtr, this, elem_index, source, offset, theType.swigValue(), semantic.swigValue());
  }

  public VertexElement findElementBySemantic(VertexElementSemantic sem, int index) {
    long cPtr = OgreJNI.VertexDeclaration_findElementBySemantic__SWIG_0(swigCPtr, this, sem.swigValue(), index);
    return (cPtr == 0) ? null : new VertexElement(cPtr, false);
  }

  public VertexElement findElementBySemantic(VertexElementSemantic sem) {
    long cPtr = OgreJNI.VertexDeclaration_findElementBySemantic__SWIG_1(swigCPtr, this, sem.swigValue());
    return (cPtr == 0) ? null : new VertexElement(cPtr, false);
  }

  public SWIGTYPE_p_Ogre__listT_Ogre__VertexElement_t__type findElementsBySource(int source) {
    return new SWIGTYPE_p_Ogre__listT_Ogre__VertexElement_t__type(OgreJNI.VertexDeclaration_findElementsBySource(swigCPtr, this, source), true);
  }

  public long getVertexSize(int source) {
    return OgreJNI.VertexDeclaration_getVertexSize(swigCPtr, this, source);
  }

  public int getNextFreeTextureCoordinate() {
    return OgreJNI.VertexDeclaration_getNextFreeTextureCoordinate(swigCPtr, this);
  }

  public VertexDeclaration clone(HardwareBufferManagerBase mgr) {
    long cPtr = OgreJNI.VertexDeclaration_clone__SWIG_0(swigCPtr, this, HardwareBufferManagerBase.getCPtr(mgr), mgr);
    return (cPtr == 0) ? null : new VertexDeclaration(cPtr, false);
  }

  public VertexDeclaration clone() {
    long cPtr = OgreJNI.VertexDeclaration_clone__SWIG_1(swigCPtr, this);
    return (cPtr == 0) ? null : new VertexDeclaration(cPtr, false);
  }

}
