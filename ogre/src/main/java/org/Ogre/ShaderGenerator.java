/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class ShaderGenerator {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected ShaderGenerator(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(ShaderGenerator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
  }

  public static boolean initialize() {
    return OgreRTShaderJNI.ShaderGenerator_initialize();
  }

  public static void destroy() {
    OgreRTShaderJNI.ShaderGenerator_destroy();
  }

  public static ShaderGenerator getSingleton() {
    return new ShaderGenerator(OgreRTShaderJNI.ShaderGenerator_getSingleton(), false);
  }

  public void addSceneManager(SceneManager sceneMgr) {
    OgreRTShaderJNI.ShaderGenerator_addSceneManager(swigCPtr, this, SceneManager.getCPtr(sceneMgr), sceneMgr);
  }

  public void removeSceneManager(SceneManager sceneMgr) {
    OgreRTShaderJNI.ShaderGenerator_removeSceneManager(swigCPtr, this, SceneManager.getCPtr(sceneMgr), sceneMgr);
  }

  public SceneManager getActiveSceneManager() {
    long cPtr = OgreRTShaderJNI.ShaderGenerator_getActiveSceneManager(swigCPtr, this);
    return (cPtr == 0) ? null : new SceneManager(cPtr, false);
  }

  public void _setActiveSceneManager(SceneManager sceneManager) {
    OgreRTShaderJNI.ShaderGenerator__setActiveSceneManager(swigCPtr, this, SceneManager.getCPtr(sceneManager), sceneManager);
  }

  public void setTargetLanguage(String shaderLanguage, float version) {
    OgreRTShaderJNI.ShaderGenerator_setTargetLanguage__SWIG_0(swigCPtr, this, shaderLanguage, version);
  }

  public void setTargetLanguage(String shaderLanguage) {
    OgreRTShaderJNI.ShaderGenerator_setTargetLanguage__SWIG_1(swigCPtr, this, shaderLanguage);
  }

  public boolean IsHlsl4() {
    return OgreRTShaderJNI.ShaderGenerator_IsHlsl4(swigCPtr, this);
  }

  public String getTargetLanguage() {
    return OgreRTShaderJNI.ShaderGenerator_getTargetLanguage(swigCPtr, this);
  }

  public float getTargetLanguageVersion() {
    return OgreRTShaderJNI.ShaderGenerator_getTargetLanguageVersion(swigCPtr, this);
  }

  public void setVertexShaderProfiles(String vertexShaderProfiles) {
    OgreRTShaderJNI.ShaderGenerator_setVertexShaderProfiles(swigCPtr, this, vertexShaderProfiles);
  }

  public String getVertexShaderProfiles() {
    return OgreRTShaderJNI.ShaderGenerator_getVertexShaderProfiles(swigCPtr, this);
  }

  public StringVector getVertexShaderProfilesList() {
    return new StringVector(OgreRTShaderJNI.ShaderGenerator_getVertexShaderProfilesList(swigCPtr, this), false);
  }

  public void setFragmentShaderProfiles(String fragmentShaderProfiles) {
    OgreRTShaderJNI.ShaderGenerator_setFragmentShaderProfiles(swigCPtr, this, fragmentShaderProfiles);
  }

  public String getFragmentShaderProfiles() {
    return OgreRTShaderJNI.ShaderGenerator_getFragmentShaderProfiles(swigCPtr, this);
  }

  public StringVector getFragmentShaderProfilesList() {
    return new StringVector(OgreRTShaderJNI.ShaderGenerator_getFragmentShaderProfilesList(swigCPtr, this), false);
  }

  public void setShaderCachePath(String cachePath) {
    OgreRTShaderJNI.ShaderGenerator_setShaderCachePath(swigCPtr, this, cachePath);
  }

  public String getShaderCachePath() {
    return OgreRTShaderJNI.ShaderGenerator_getShaderCachePath(swigCPtr, this);
  }

  public void flushShaderCache() {
    OgreRTShaderJNI.ShaderGenerator_flushShaderCache(swigCPtr, this);
  }

  public RenderState getRenderState(String schemeName) {
    long cPtr = OgreRTShaderJNI.ShaderGenerator_getRenderState__SWIG_0(swigCPtr, this, schemeName);
    return (cPtr == 0) ? null : new RenderState(cPtr, false);
  }

  public SWIGTYPE_p_std__pairT_Ogre__RTShader__RenderState_p_bool_t createOrRetrieveRenderState(String schemeName) {
    return new SWIGTYPE_p_std__pairT_Ogre__RTShader__RenderState_p_bool_t(OgreRTShaderJNI.ShaderGenerator_createOrRetrieveRenderState(swigCPtr, this, schemeName), true);
  }

  public boolean hasRenderState(String schemeName) {
    return OgreRTShaderJNI.ShaderGenerator_hasRenderState(swigCPtr, this, schemeName);
  }

  public RenderState getRenderState(String schemeName, String materialName, String groupName, int passIndex) {
    long cPtr = OgreRTShaderJNI.ShaderGenerator_getRenderState__SWIG_1(swigCPtr, this, schemeName, materialName, groupName, passIndex);
    return (cPtr == 0) ? null : new RenderState(cPtr, false);
  }

  public void addSubRenderStateFactory(SubRenderStateFactory factory) {
    OgreRTShaderJNI.ShaderGenerator_addSubRenderStateFactory(swigCPtr, this, SubRenderStateFactory.getCPtr(factory), factory);
  }

  public long getNumSubRenderStateFactories() {
    return OgreRTShaderJNI.ShaderGenerator_getNumSubRenderStateFactories(swigCPtr, this);
  }

  public SubRenderStateFactory getSubRenderStateFactory(long index) {
    long cPtr = OgreRTShaderJNI.ShaderGenerator_getSubRenderStateFactory__SWIG_0(swigCPtr, this, index);
    return (cPtr == 0) ? null : new SubRenderStateFactory(cPtr, false);
  }

  public SubRenderStateFactory getSubRenderStateFactory(String type) {
    long cPtr = OgreRTShaderJNI.ShaderGenerator_getSubRenderStateFactory__SWIG_1(swigCPtr, this, type);
    return (cPtr == 0) ? null : new SubRenderStateFactory(cPtr, false);
  }

  public void removeSubRenderStateFactory(SubRenderStateFactory factory) {
    OgreRTShaderJNI.ShaderGenerator_removeSubRenderStateFactory(swigCPtr, this, SubRenderStateFactory.getCPtr(factory), factory);
  }

  public SubRenderState createSubRenderState(String type) {
    long cPtr = OgreRTShaderJNI.ShaderGenerator_createSubRenderState(swigCPtr, this, type);
    return (cPtr == 0) ? null : new SubRenderState(cPtr, false);
  }

  public void destroySubRenderState(SubRenderState subRenderState) {
    OgreRTShaderJNI.ShaderGenerator_destroySubRenderState(swigCPtr, this, SubRenderState.getCPtr(subRenderState), subRenderState);
  }

  public boolean hasShaderBasedTechnique(String materialName, String srcTechniqueSchemeName, String dstTechniqueSchemeName) {
    return OgreRTShaderJNI.ShaderGenerator_hasShaderBasedTechnique__SWIG_0(swigCPtr, this, materialName, srcTechniqueSchemeName, dstTechniqueSchemeName);
  }

  public boolean hasShaderBasedTechnique(String materialName, String groupName, String srcTechniqueSchemeName, String dstTechniqueSchemeName) {
    return OgreRTShaderJNI.ShaderGenerator_hasShaderBasedTechnique__SWIG_1(swigCPtr, this, materialName, groupName, srcTechniqueSchemeName, dstTechniqueSchemeName);
  }

  public boolean createShaderBasedTechnique(Material srcMat, String srcTechniqueSchemeName, String dstTechniqueSchemeName, boolean overProgrammable) {
    return OgreRTShaderJNI.ShaderGenerator_createShaderBasedTechnique__SWIG_0(swigCPtr, this, Material.getCPtr(srcMat), srcMat, srcTechniqueSchemeName, dstTechniqueSchemeName, overProgrammable);
  }

  public boolean createShaderBasedTechnique(Material srcMat, String srcTechniqueSchemeName, String dstTechniqueSchemeName) {
    return OgreRTShaderJNI.ShaderGenerator_createShaderBasedTechnique__SWIG_1(swigCPtr, this, Material.getCPtr(srcMat), srcMat, srcTechniqueSchemeName, dstTechniqueSchemeName);
  }

  public boolean createShaderBasedTechnique(String materialName, String groupName, String srcTechniqueSchemeName, String dstTechniqueSchemeName, boolean overProgrammable) {
    return OgreRTShaderJNI.ShaderGenerator_createShaderBasedTechnique__SWIG_2(swigCPtr, this, materialName, groupName, srcTechniqueSchemeName, dstTechniqueSchemeName, overProgrammable);
  }

  public boolean createShaderBasedTechnique(String materialName, String groupName, String srcTechniqueSchemeName, String dstTechniqueSchemeName) {
    return OgreRTShaderJNI.ShaderGenerator_createShaderBasedTechnique__SWIG_3(swigCPtr, this, materialName, groupName, srcTechniqueSchemeName, dstTechniqueSchemeName);
  }

  public boolean removeShaderBasedTechnique(String materialName, String groupName, String srcTechniqueSchemeName, String dstTechniqueSchemeName) {
    return OgreRTShaderJNI.ShaderGenerator_removeShaderBasedTechnique(swigCPtr, this, materialName, groupName, srcTechniqueSchemeName, dstTechniqueSchemeName);
  }

  public boolean removeAllShaderBasedTechniques(String materialName, String groupName) {
    return OgreRTShaderJNI.ShaderGenerator_removeAllShaderBasedTechniques__SWIG_0(swigCPtr, this, materialName, groupName);
  }

  public boolean cloneShaderBasedTechniques(String srcMaterialName, String srcGroupName, String dstMaterialName, String dstGroupName) {
    return OgreRTShaderJNI.ShaderGenerator_cloneShaderBasedTechniques(swigCPtr, this, srcMaterialName, srcGroupName, dstMaterialName, dstGroupName);
  }

  public void removeAllShaderBasedTechniques() {
    OgreRTShaderJNI.ShaderGenerator_removeAllShaderBasedTechniques__SWIG_1(swigCPtr, this);
  }

  public void createScheme(String schemeName) {
    OgreRTShaderJNI.ShaderGenerator_createScheme(swigCPtr, this, schemeName);
  }

  public void invalidateScheme(String schemeName) {
    OgreRTShaderJNI.ShaderGenerator_invalidateScheme(swigCPtr, this, schemeName);
  }

  public boolean validateScheme(String schemeName) {
    return OgreRTShaderJNI.ShaderGenerator_validateScheme(swigCPtr, this, schemeName);
  }

  public void invalidateMaterial(String schemeName, String materialName, String groupName) {
    OgreRTShaderJNI.ShaderGenerator_invalidateMaterial(swigCPtr, this, schemeName, materialName, groupName);
  }

  public boolean validateMaterial(String schemeName, String materialName, String groupName) {
    return OgreRTShaderJNI.ShaderGenerator_validateMaterial(swigCPtr, this, schemeName, materialName, groupName);
  }

  public void invalidateMaterialIlluminationPasses(String schemeName, String materialName, String groupName) {
    OgreRTShaderJNI.ShaderGenerator_invalidateMaterialIlluminationPasses(swigCPtr, this, schemeName, materialName, groupName);
  }

  public boolean validateMaterialIlluminationPasses(String schemeName, String materialName, String groupName) {
    return OgreRTShaderJNI.ShaderGenerator_validateMaterialIlluminationPasses(swigCPtr, this, schemeName, materialName, groupName);
  }

  public SGMaterialSerializerListener getMaterialSerializerListener() {
    long cPtr = OgreRTShaderJNI.ShaderGenerator_getMaterialSerializerListener(swigCPtr, this);
    return (cPtr == 0) ? null : new SGMaterialSerializerListener(cPtr, false);
  }

  public long getVertexShaderCount() {
    return OgreRTShaderJNI.ShaderGenerator_getVertexShaderCount(swigCPtr, this);
  }

  public long getFragmentShaderCount() {
    return OgreRTShaderJNI.ShaderGenerator_getFragmentShaderCount(swigCPtr, this);
  }

  public void setVertexShaderOutputsCompactPolicy(VSOutputCompactPolicy policy) {
    OgreRTShaderJNI.ShaderGenerator_setVertexShaderOutputsCompactPolicy(swigCPtr, this, policy.swigValue());
  }

  public VSOutputCompactPolicy getVertexShaderOutputsCompactPolicy() {
    return VSOutputCompactPolicy.swigToEnum(OgreRTShaderJNI.ShaderGenerator_getVertexShaderOutputsCompactPolicy(swigCPtr, this));
  }

  public void setCreateShaderOverProgrammablePass(boolean value) {
    OgreRTShaderJNI.ShaderGenerator_setCreateShaderOverProgrammablePass(swigCPtr, this, value);
  }

  public boolean getCreateShaderOverProgrammablePass() {
    return OgreRTShaderJNI.ShaderGenerator_getCreateShaderOverProgrammablePass(swigCPtr, this);
  }

  public long getRTShaderSchemeCount() {
    return OgreRTShaderJNI.ShaderGenerator_getRTShaderSchemeCount(swigCPtr, this);
  }

  public String getRTShaderScheme(long index) {
    return OgreRTShaderJNI.ShaderGenerator_getRTShaderScheme(swigCPtr, this, index);
  }

  public static void setDEFAULT_SCHEME_NAME(String value) {
    OgreRTShaderJNI.ShaderGenerator_DEFAULT_SCHEME_NAME_set(value);
  }

  public static String getDEFAULT_SCHEME_NAME() {
    return OgreRTShaderJNI.ShaderGenerator_DEFAULT_SCHEME_NAME_get();
  }

}
