/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class Viewport {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Viewport(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Viewport obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_Viewport(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  static public class Listener {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Listener(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Listener obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          OgreJNI.delete_Viewport_Listener(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    protected void swigDirectorDisconnect() {
      swigCMemOwn = false;
      delete();
    }
  
    public void swigReleaseOwnership() {
      swigCMemOwn = false;
      OgreJNI.Viewport_Listener_change_ownership(this, swigCPtr, false);
    }
  
    public void swigTakeOwnership() {
      swigCMemOwn = true;
      OgreJNI.Viewport_Listener_change_ownership(this, swigCPtr, true);
    }
  
    public void viewportCameraChanged(Viewport viewport) {
      if (getClass() == Listener.class) OgreJNI.Viewport_Listener_viewportCameraChanged(swigCPtr, this, Viewport.getCPtr(viewport), viewport); else OgreJNI.Viewport_Listener_viewportCameraChangedSwigExplicitListener(swigCPtr, this, Viewport.getCPtr(viewport), viewport);
    }
  
    public void viewportDimensionsChanged(Viewport viewport) {
      if (getClass() == Listener.class) OgreJNI.Viewport_Listener_viewportDimensionsChanged(swigCPtr, this, Viewport.getCPtr(viewport), viewport); else OgreJNI.Viewport_Listener_viewportDimensionsChangedSwigExplicitListener(swigCPtr, this, Viewport.getCPtr(viewport), viewport);
    }
  
    public void viewportDestroyed(Viewport viewport) {
      if (getClass() == Listener.class) OgreJNI.Viewport_Listener_viewportDestroyed(swigCPtr, this, Viewport.getCPtr(viewport), viewport); else OgreJNI.Viewport_Listener_viewportDestroyedSwigExplicitListener(swigCPtr, this, Viewport.getCPtr(viewport), viewport);
    }
  
    public Listener() {
      this(OgreJNI.new_Viewport_Listener(), true);
      OgreJNI.Viewport_Listener_director_connect(this, swigCPtr, true, true);
    }
  
  }

  public Viewport(Camera camera, RenderTarget target, float left, float top, float width, float height, int ZOrder) {
    this(OgreJNI.new_Viewport(Camera.getCPtr(camera), camera, RenderTarget.getCPtr(target), target, left, top, width, height, ZOrder), true);
  }

  public void _updateDimensions() {
    OgreJNI.Viewport__updateDimensions(swigCPtr, this);
  }

  public void update() {
    OgreJNI.Viewport_update(swigCPtr, this);
  }

  public void clear(long buffers, ColourValue colour, float depth, int stencil) {
    OgreJNI.Viewport_clear__SWIG_0(swigCPtr, this, buffers, ColourValue.getCPtr(colour), colour, depth, stencil);
  }

  public void clear(long buffers, ColourValue colour, float depth) {
    OgreJNI.Viewport_clear__SWIG_1(swigCPtr, this, buffers, ColourValue.getCPtr(colour), colour, depth);
  }

  public void clear(long buffers, ColourValue colour) {
    OgreJNI.Viewport_clear__SWIG_2(swigCPtr, this, buffers, ColourValue.getCPtr(colour), colour);
  }

  public void clear(long buffers) {
    OgreJNI.Viewport_clear__SWIG_3(swigCPtr, this, buffers);
  }

  public void clear() {
    OgreJNI.Viewport_clear__SWIG_4(swigCPtr, this);
  }

  public RenderTarget getTarget() {
    long cPtr = OgreJNI.Viewport_getTarget(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderTarget(cPtr, false);
  }

  public Camera getCamera() {
    long cPtr = OgreJNI.Viewport_getCamera(swigCPtr, this);
    return (cPtr == 0) ? null : new Camera(cPtr, false);
  }

  public void setCamera(Camera cam) {
    OgreJNI.Viewport_setCamera(swigCPtr, this, Camera.getCPtr(cam), cam);
  }

  public int getZOrder() {
    return OgreJNI.Viewport_getZOrder(swigCPtr, this);
  }

  public float getLeft() {
    return OgreJNI.Viewport_getLeft(swigCPtr, this);
  }

  public float getTop() {
    return OgreJNI.Viewport_getTop(swigCPtr, this);
  }

  public float getWidth() {
    return OgreJNI.Viewport_getWidth(swigCPtr, this);
  }

  public float getHeight() {
    return OgreJNI.Viewport_getHeight(swigCPtr, this);
  }

  public int getActualLeft() {
    return OgreJNI.Viewport_getActualLeft(swigCPtr, this);
  }

  public int getActualTop() {
    return OgreJNI.Viewport_getActualTop(swigCPtr, this);
  }

  public int getActualWidth() {
    return OgreJNI.Viewport_getActualWidth(swigCPtr, this);
  }

  public int getActualHeight() {
    return OgreJNI.Viewport_getActualHeight(swigCPtr, this);
  }

  public void setDimensions(float left, float top, float width, float height) {
    OgreJNI.Viewport_setDimensions(swigCPtr, this, left, top, width, height);
  }

  public void setOrientationMode(OrientationMode orientationMode, boolean setDefault) {
    OgreJNI.Viewport_setOrientationMode__SWIG_0(swigCPtr, this, orientationMode.swigValue(), setDefault);
  }

  public void setOrientationMode(OrientationMode orientationMode) {
    OgreJNI.Viewport_setOrientationMode__SWIG_1(swigCPtr, this, orientationMode.swigValue());
  }

  public OrientationMode getOrientationMode() {
    return OrientationMode.swigToEnum(OgreJNI.Viewport_getOrientationMode(swigCPtr, this));
  }

  public static void setDefaultOrientationMode(OrientationMode orientationMode) {
    OgreJNI.Viewport_setDefaultOrientationMode(orientationMode.swigValue());
  }

  public static OrientationMode getDefaultOrientationMode() {
    return OrientationMode.swigToEnum(OgreJNI.Viewport_getDefaultOrientationMode());
  }

  public void setBackgroundColour(ColourValue colour) {
    OgreJNI.Viewport_setBackgroundColour(swigCPtr, this, ColourValue.getCPtr(colour), colour);
  }

  public ColourValue getBackgroundColour() {
    return new ColourValue(OgreJNI.Viewport_getBackgroundColour(swigCPtr, this), false);
  }

  public void setDepthClear(float depth) {
    OgreJNI.Viewport_setDepthClear(swigCPtr, this, depth);
  }

  public float getDepthClear() {
    return OgreJNI.Viewport_getDepthClear(swigCPtr, this);
  }

  public void setClearEveryFrame(boolean clear, long buffers) {
    OgreJNI.Viewport_setClearEveryFrame__SWIG_0(swigCPtr, this, clear, buffers);
  }

  public void setClearEveryFrame(boolean clear) {
    OgreJNI.Viewport_setClearEveryFrame__SWIG_1(swigCPtr, this, clear);
  }

  public boolean getClearEveryFrame() {
    return OgreJNI.Viewport_getClearEveryFrame(swigCPtr, this);
  }

  public long getClearBuffers() {
    return OgreJNI.Viewport_getClearBuffers(swigCPtr, this);
  }

  public void setAutoUpdated(boolean autoupdate) {
    OgreJNI.Viewport_setAutoUpdated(swigCPtr, this, autoupdate);
  }

  public boolean isAutoUpdated() {
    return OgreJNI.Viewport_isAutoUpdated(swigCPtr, this);
  }

  public void setMaterialScheme(String schemeName) {
    OgreJNI.Viewport_setMaterialScheme(swigCPtr, this, schemeName);
  }

  public String getMaterialScheme() {
    return OgreJNI.Viewport_getMaterialScheme(swigCPtr, this);
  }

  public void getActualDimensions(SWIGTYPE_p_int left, SWIGTYPE_p_int top, SWIGTYPE_p_int width, SWIGTYPE_p_int height) {
    OgreJNI.Viewport_getActualDimensions(swigCPtr, this, SWIGTYPE_p_int.getCPtr(left), SWIGTYPE_p_int.getCPtr(top), SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height));
  }

  public boolean _isUpdated() {
    return OgreJNI.Viewport__isUpdated(swigCPtr, this);
  }

  public void _clearUpdatedFlag() {
    OgreJNI.Viewport__clearUpdatedFlag(swigCPtr, this);
  }

  public long _getNumRenderedFaces() {
    return OgreJNI.Viewport__getNumRenderedFaces(swigCPtr, this);
  }

  public long _getNumRenderedBatches() {
    return OgreJNI.Viewport__getNumRenderedBatches(swigCPtr, this);
  }

  public void setOverlaysEnabled(boolean enabled) {
    OgreJNI.Viewport_setOverlaysEnabled(swigCPtr, this, enabled);
  }

  public boolean getOverlaysEnabled() {
    return OgreJNI.Viewport_getOverlaysEnabled(swigCPtr, this);
  }

  public void setSkiesEnabled(boolean enabled) {
    OgreJNI.Viewport_setSkiesEnabled(swigCPtr, this, enabled);
  }

  public boolean getSkiesEnabled() {
    return OgreJNI.Viewport_getSkiesEnabled(swigCPtr, this);
  }

  public void setShadowsEnabled(boolean enabled) {
    OgreJNI.Viewport_setShadowsEnabled(swigCPtr, this, enabled);
  }

  public boolean getShadowsEnabled() {
    return OgreJNI.Viewport_getShadowsEnabled(swigCPtr, this);
  }

  public void setVisibilityMask(long mask) {
    OgreJNI.Viewport_setVisibilityMask(swigCPtr, this, mask);
  }

  public long getVisibilityMask() {
    return OgreJNI.Viewport_getVisibilityMask(swigCPtr, this);
  }

  public void setRenderQueueInvocationSequenceName(String sequenceName) {
    OgreJNI.Viewport_setRenderQueueInvocationSequenceName(swigCPtr, this, sequenceName);
  }

  public String getRenderQueueInvocationSequenceName() {
    return OgreJNI.Viewport_getRenderQueueInvocationSequenceName(swigCPtr, this);
  }

  public RenderQueueInvocationSequence _getRenderQueueInvocationSequence() {
    long cPtr = OgreJNI.Viewport__getRenderQueueInvocationSequence(swigCPtr, this);
    return (cPtr == 0) ? null : new RenderQueueInvocationSequence(cPtr, false);
  }

  public void pointOrientedToScreen(Vector2 v, int orientationMode, Vector2 outv) {
    OgreJNI.Viewport_pointOrientedToScreen__SWIG_0(swigCPtr, this, Vector2.getCPtr(v), v, orientationMode, Vector2.getCPtr(outv), outv);
  }

  public void pointOrientedToScreen(float orientedX, float orientedY, int orientationMode, SWIGTYPE_p_float screenX, SWIGTYPE_p_float screenY) {
    OgreJNI.Viewport_pointOrientedToScreen__SWIG_1(swigCPtr, this, orientedX, orientedY, orientationMode, SWIGTYPE_p_float.getCPtr(screenX), SWIGTYPE_p_float.getCPtr(screenY));
  }

  public void addListener(Viewport.Listener l) {
    OgreJNI.Viewport_addListener(swigCPtr, this, Viewport.Listener.getCPtr(l), l);
  }

  public void removeListener(Viewport.Listener l) {
    OgreJNI.Viewport_removeListener(swigCPtr, this, Viewport.Listener.getCPtr(l), l);
  }

  public void setDrawBuffer(ColourBufferType colourBuffer) {
    OgreJNI.Viewport_setDrawBuffer(swigCPtr, this, colourBuffer.swigValue());
  }

  public ColourBufferType getDrawBuffer() {
    return ColourBufferType.swigToEnum(OgreJNI.Viewport_getDrawBuffer(swigCPtr, this));
  }

}
