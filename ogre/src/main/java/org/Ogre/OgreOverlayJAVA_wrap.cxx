/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION)
#include <iostream>
#endif

#include <exception>

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}


/* Includes the header in the wrapper code */
#include "Ogre.h"
#include "OgreUnifiedHighLevelGpuProgram.h"

#include "OgreOverlayPrerequisites.h"
#include "OgreFont.h"
#include "OgreFontManager.h"
#include "OgreOverlay.h"
#include "OgreOverlaySystem.h"
#include "OgreOverlayContainer.h"
#include "OgreOverlayElement.h"
#include "OgreOverlayElementFactory.h"
#include "OgreOverlayManager.h"
#include "OgrePanelOverlayElement.h"
#include "OgreTextAreaOverlayElement.h"


#include <string>


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OgreOverlayJAVA_wrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_DEFINE_1NO_1DEPRECATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_FT_1TRUETYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::FontType result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::FontType)Ogre::FT_TRUETYPE;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_FT_1IMAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Ogre::FontType result;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::FontType)Ogre::FT_IMAGE;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1GlyphInfo_1codePoint_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::Font::GlyphInfo *arg1 = (Ogre::Font::GlyphInfo *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font::GlyphInfo **)&jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  if (arg1) (arg1)->codePoint = arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1GlyphInfo_1codePoint_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::Font::GlyphInfo *arg1 = (Ogre::Font::GlyphInfo *) 0 ;
  Ogre::Font::CodePoint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font::GlyphInfo **)&jarg1; 
  result = (Ogre::Font::CodePoint) ((arg1)->codePoint);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1GlyphInfo_1uvRect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::Font::GlyphInfo *arg1 = (Ogre::Font::GlyphInfo *) 0 ;
  Ogre::Font::UVRect *arg2 = (Ogre::Font::UVRect *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font::GlyphInfo **)&jarg1; 
  arg2 = *(Ogre::Font::UVRect **)&jarg2; 
  if (arg1) (arg1)->uvRect = *arg2;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1GlyphInfo_1uvRect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::Font::GlyphInfo *arg1 = (Ogre::Font::GlyphInfo *) 0 ;
  Ogre::Font::UVRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font::GlyphInfo **)&jarg1; 
  result = (Ogre::Font::UVRect *)& ((arg1)->uvRect);
  *(Ogre::Font::UVRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1GlyphInfo_1aspectRatio_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::Font::GlyphInfo *arg1 = (Ogre::Font::GlyphInfo *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font::GlyphInfo **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1GlyphInfo_1aspectRatio_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::Font::GlyphInfo *arg1 = (Ogre::Font::GlyphInfo *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font::GlyphInfo **)&jarg1; 
  result = (Ogre::Real) ((arg1)->aspectRatio);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1Font_1GlyphInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Ogre::Font::CodePoint arg1 ;
  Ogre::Font::UVRect *arg2 = 0 ;
  Ogre::Real arg3 ;
  Ogre::Font::GlyphInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (Ogre::Font::CodePoint)jarg1; 
  arg2 = *(Ogre::Font::UVRect **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Font::UVRect const & reference is null");
    return 0;
  } 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::Font::GlyphInfo *)new Ogre::Font::GlyphInfo(arg1,(Ogre::Font::UVRect const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Font::GlyphInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1Font_1GlyphInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::Font::GlyphInfo *arg1 = (Ogre::Font::GlyphInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::Font::GlyphInfo **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1Font_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3, jstring jarg4, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  jlong jresult = 0 ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::ManualResourceLoader *arg6 = (Ogre::ManualResourceLoader *) 0 ;
  Ogre::Font *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg6_;
  arg1 = *(Ogre::ResourceManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (Ogre::ResourceHandle)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (Ogre::ResourceHandle)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  arg6 = *(Ogre::ManualResourceLoader **)&jarg6; 
  {
    try {
      result = (Ogre::Font *)new Ogre::Font(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4,arg5,arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Font **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1Font_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::Font *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::ResourceManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (Ogre::ResourceHandle)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (Ogre::ResourceHandle)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (Ogre::Font *)new Ogre::Font(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Font **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1Font_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  Ogre::ResourceManager *arg1 = (Ogre::ResourceManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::ResourceHandle arg3 ;
  Ogre::String *arg4 = 0 ;
  Ogre::Font *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::ResourceManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg3) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg3);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg3, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg3 = 0;
    if (sz > 0) {
      arg3 = (Ogre::ResourceHandle)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg3 = (arg3 << 8) | (Ogre::ResourceHandle)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (Ogre::Font *)new Ogre::Font(arg1,(Ogre::String const &)*arg2,arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Font **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1Font(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::FontType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::FontType)jarg2; 
  {
    try {
      (arg1)->setType(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1setSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setSource((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Font const *)arg1)->getSource();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1setCharacterSpacer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::uint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  {
    try {
      (arg1)->setCharacterSpacer(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getCharacterSpacer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::uint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      result = (Ogre::uint)((Ogre::Font const *)arg1)->getCharacterSpacer();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1setTrueTypeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setTrueTypeSize(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1setTrueTypeResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::uint arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::uint)jarg2; 
  {
    try {
      (arg1)->setTrueTypeResolution(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getTrueTypeSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Font const *)arg1)->getTrueTypeSize();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getTrueTypeResolution(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::uint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      result = (Ogre::uint)((Ogre::Font const *)arg1)->getTrueTypeResolution();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getTrueTypeMaxBearingY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      result = (int)((Ogre::Font const *)arg1)->getTrueTypeMaxBearingY();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getGlyphTexCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Font::UVRect *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (Ogre::Font::UVRect *) &((Ogre::Font const *)arg1)->getGlyphTexCoords(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Font::UVRect **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1setGlyphTexCoords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jfloat jarg7) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  Ogre::Real arg6 ;
  Ogre::Real arg7 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Real)jarg5; 
  arg6 = (Ogre::Real)jarg6; 
  arg7 = (Ogre::Real)jarg7; 
  {
    try {
      (arg1)->setGlyphTexCoords(arg2,arg3,arg4,arg5,arg6,arg7);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getGlyphAspectRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::Font const *)arg1)->getGlyphAspectRatio(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1setGlyphAspectRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jfloat jarg3) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setGlyphAspectRatio(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getGlyphInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePoint arg2 ;
  Ogre::Font::GlyphInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = (Ogre::Font::CodePoint)jarg2; 
  {
    try {
      result = (Ogre::Font::GlyphInfo *) &((Ogre::Font const *)arg1)->getGlyphInfo(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Font::GlyphInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1addCodePointRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePointRange *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = *(Ogre::Font::CodePointRange **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Font::CodePointRange const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->addCodePointRange((Ogre::Font::CodePointRange const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1clearCodePointRanges(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      (arg1)->clearCodePointRanges();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getCodePointRangeList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Font::CodePointRangeList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      result = (Ogre::Font::CodePointRangeList *) &((Ogre::Font const *)arg1)->getCodePointRangeList();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Font::CodePointRangeList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getMaterial_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::Font const *)arg1)->getMaterial();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::MaterialPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1setAntialiasColour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setAntialiasColour(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1getAntialiasColour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Font **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::Font const *)arg1)->getAntialiasColour();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1loadResource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::Font *arg1 = (Ogre::Font *) 0 ;
  Ogre::Resource *arg2 = (Ogre::Resource *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Font **)&jarg1; 
  arg2 = *(Ogre::Resource **)&jarg2; 
  {
    try {
      (arg1)->loadResource(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1FontManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::FontManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::FontManager *)new Ogre::FontManager();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::FontManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1FontManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::FontManager **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_FontManager_1create_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_, jlong jarg6) {
  jlong jresult = 0 ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  Ogre::ManualResourceLoader *arg5 = (Ogre::ManualResourceLoader *) 0 ;
  Ogre::NameValuePairList *arg6 = (Ogre::NameValuePairList *) 0 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::Font > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(Ogre::FontManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  arg5 = *(Ogre::ManualResourceLoader **)&jarg5; 
  arg6 = *(Ogre::NameValuePairList **)&jarg6; 
  {
    try {
      result = (arg1)->create((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,arg4,arg5,(Ogre::NameValuePairList const *)arg6);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::FontPtr **)&jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_FontManager_1create_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  Ogre::ManualResourceLoader *arg5 = (Ogre::ManualResourceLoader *) 0 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::Font > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(Ogre::FontManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  arg5 = *(Ogre::ManualResourceLoader **)&jarg5; 
  {
    try {
      result = (arg1)->create((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::FontPtr **)&jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_FontManager_1create_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::Font > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::FontManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (arg1)->create((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::FontPtr **)&jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_FontManager_1create_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::Font > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::FontManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->create((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::FontPtr **)&jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_FontManager_1getByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  SwigValueWrapper< Ogre::SharedPtr< Ogre::Font > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::FontManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (arg1)->getByName((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::FontPtr **)&jresult = new Ogre::FontPtr((const Ogre::FontPtr &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_FontManager_1parseScript(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  Ogre::FontManager *arg1 = (Ogre::FontManager *) 0 ;
  Ogre::DataStreamPtr *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::FontManager **)&jarg1; 
  arg2 = *(Ogre::DataStreamPtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DataStreamPtr & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->parseScript(*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_FontManager_1getSingleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::FontManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::FontManager *) &Ogre::FontManager::getSingleton();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::FontManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1Overlay(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::Overlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (Ogre::Overlay *)new Ogre::Overlay((Ogre::String const &)*arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Overlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1Overlay(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayContainer *)(arg1)->getChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Overlay const *)arg1)->getName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1setZOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::ushort arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      (arg1)->setZOrder(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getZOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::ushort)((Ogre::Overlay const *)arg1)->getZOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::Overlay const *)arg1)->isVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1isInitialised(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::Overlay const *)arg1)->isInitialised();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1show(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      (arg1)->show();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1hide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      (arg1)->hide();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1add2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = *(Ogre::OverlayContainer **)&jarg2; 
  {
    try {
      (arg1)->add2D(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1remove2D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = *(Ogre::OverlayContainer **)&jarg2; 
  {
    try {
      (arg1)->remove2D(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1add3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = *(Ogre::SceneNode **)&jarg2; 
  {
    try {
      (arg1)->add3D(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1remove3D(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::SceneNode *arg2 = (Ogre::SceneNode *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = *(Ogre::SceneNode **)&jarg2; 
  {
    try {
      (arg1)->remove3D(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      (arg1)->clear();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1setScroll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setScroll(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getScrollX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Overlay const *)arg1)->getScrollX();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getScrollY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Overlay const *)arg1)->getScrollY();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1scroll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->scroll(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1setRotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = *(Ogre::Radian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Radian const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setRotate((Ogre::Radian const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getRotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Radian *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::Radian *) &((Ogre::Overlay const *)arg1)->getRotate();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Radian **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1rotate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Radian *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = *(Ogre::Radian **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Radian const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->rotate((Ogre::Radian const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1setScale(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setScale(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getScaleX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Overlay const *)arg1)->getScaleX();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getScaleY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::Overlay const *)arg1)->getScaleY();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1_1getWorldTransforms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Matrix4 *arg2 = (Ogre::Matrix4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = *(Ogre::Matrix4 **)&jarg2; 
  {
    try {
      ((Ogre::Overlay const *)arg1)->_getWorldTransforms(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1_1findVisibleObjects(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::RenderQueue *arg3 = (Ogre::RenderQueue *) 0 ;
  Ogre::Viewport *arg4 = (Ogre::Viewport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = *(Ogre::Camera **)&jarg2; 
  arg3 = *(Ogre::RenderQueue **)&jarg3; 
  arg4 = *(Ogre::Viewport **)&jarg4; 
  {
    try {
      (arg1)->_findVisibleObjects(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1findElementAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1get2DElements(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::Overlay::OverlayContainerList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::Overlay::OverlayContainerList *) &((Ogre::Overlay const *)arg1)->get2DElements();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Overlay::OverlayContainerList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1getOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::Overlay const *)arg1)->getOrigin();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_Overlay_1_1notifyOrigin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::Overlay *arg1 = (Ogre::Overlay *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::Overlay **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->_notifyOrigin((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1OverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1initialise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->initialise();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1releaseManualHardwareResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1restoreManualHardwareResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::OverlayElement const *)arg1)->getName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1show(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->show();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1hide(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->hide();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1isVisible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isVisible();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1isEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isEnabled();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setEnabled(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setDimensions(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setPosition(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setWidth(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getWidth();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setHeight(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getHeight();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setLeft(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getLeft();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setTop(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getTop();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->_getLeft();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->_getTop();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->_getWidth();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->_getHeight();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1setLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->_setLeft(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1setTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->_setTop(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1setWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->_setWidth(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1setHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->_setHeight(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1setPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->_setPosition(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1setDimensions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->_setDimensions(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::OverlayElement const *)arg1)->getMaterialName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::MaterialPtr *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::MaterialPtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::MaterialPtr const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setMaterial((Ogre::MaterialPtr const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setMaterialName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setMaterialName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::OverlayElement const *)arg1)->getMaterial();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::MaterialPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getWorldTransforms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Matrix4 *arg2 = (Ogre::Matrix4 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::Matrix4 **)&jarg2; 
  {
    try {
      ((Ogre::OverlayElement const *)arg1)->getWorldTransforms(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1positionsOutOfDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_positionsOutOfDate();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_update();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1updateFromParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_updateFromParent();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1notifyParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Overlay *arg3 = (Ogre::Overlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::OverlayContainer **)&jarg2; 
  arg3 = *(Ogre::Overlay **)&jarg3; 
  {
    try {
      (arg1)->_notifyParent(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getDerivedLeft(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->_getDerivedLeft();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getDerivedTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->_getDerivedTop();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getRelativeWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->_getRelativeWidth();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getRelativeHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)(arg1)->_getRelativeHeight();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1getClippingRegion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::RealRect *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::RealRect **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RealRect & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_getClippingRegion(*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1notifyZOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::ushort)(arg1)->_notifyZOrder(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1notifyWorldTransforms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::Matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Matrix4 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_notifyWorldTransforms((Ogre::Matrix4 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1notifyViewport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_notifyViewport();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1updateRenderQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::RenderQueue **)&jarg2; 
  {
    try {
      (arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1visitRenderables_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::Renderable::Visitor **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->visitRenderables(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1visitRenderables_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Renderable::Visitor *arg2 = (Ogre::Renderable::Visitor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::Renderable::Visitor **)&jarg2; 
  {
    try {
      (arg1)->visitRenderables(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::OverlayElement const *)arg1)->getTypeName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::DisplayString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::DisplayString *) &((Ogre::OverlayElement const *)arg1)->getCaption();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::DisplayString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setColour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::ColourValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::ColourValue const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setColour((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getColour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::OverlayElement const *)arg1)->getColour();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::ColourValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setMetricsMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiMetricsMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::GuiMetricsMode)jarg2; 
  {
    try {
      (arg1)->setMetricsMode(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getMetricsMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiMetricsMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::GuiMetricsMode)((Ogre::OverlayElement const *)arg1)->getMetricsMode();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setHorizontalAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiHorizontalAlignment arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::GuiHorizontalAlignment)jarg2; 
  {
    try {
      (arg1)->setHorizontalAlignment(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getHorizontalAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiHorizontalAlignment result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::GuiHorizontalAlignment)((Ogre::OverlayElement const *)arg1)->getHorizontalAlignment();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setVerticalAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiVerticalAlignment arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::GuiVerticalAlignment)jarg2; 
  {
    try {
      (arg1)->setVerticalAlignment(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getVerticalAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::GuiVerticalAlignment result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::GuiVerticalAlignment)((Ogre::OverlayElement const *)arg1)->getVerticalAlignment();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jboolean jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->contains(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1findElementAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1isContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isContainer();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1isKeyEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isKeyEnabled();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1isCloneable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayElement const *)arg1)->isCloneable();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1setCloneable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setCloneable(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayContainer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::OverlayContainer *)(arg1)->getParent();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayContainer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1_1setParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::OverlayContainer **)&jarg2; 
  {
    try {
      (arg1)->_setParent(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getZOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::ushort)((Ogre::OverlayElement const *)arg1)->getZOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getSquaredViewDepth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::Camera **)&jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayElement const *)arg1)->getSquaredViewDepth((Ogre::Camera const *)arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getLights(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::LightList *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::LightList *) &((Ogre::OverlayElement const *)arg1)->getLights();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::LightList **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1copyFromTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  {
    try {
      (arg1)->copyFromTemplate(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->clone((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1getSourceTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayElement *arg1 = (Ogre::OverlayElement *) 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::OverlayElement *)((Ogre::OverlayElement const *)arg1)->getSourceTemplate();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1OverlayElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::OverlayElementFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElementFactory_1createOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElementFactory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElementFactory_1destroyOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayElementFactory **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  {
    try {
      (arg1)->destroyOverlayElement(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElementFactory_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::OverlayElementFactory *arg1 = (Ogre::OverlayElementFactory *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayElementFactory **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::OverlayElementFactory const *)arg1)->getTypeName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElementFactory_1createOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::PanelOverlayElementFactory *arg1 = (Ogre::PanelOverlayElementFactory *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElementFactory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElementFactory_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::PanelOverlayElementFactory *arg1 = (Ogre::PanelOverlayElementFactory *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElementFactory **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::PanelOverlayElementFactory const *)arg1)->getTypeName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1PanelOverlayElementFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::PanelOverlayElementFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::PanelOverlayElementFactory *)new Ogre::PanelOverlayElementFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::PanelOverlayElementFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1PanelOverlayElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::PanelOverlayElementFactory *arg1 = (Ogre::PanelOverlayElementFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::PanelOverlayElementFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_BorderPanelOverlayElementFactory_1createOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::BorderPanelOverlayElementFactory *arg1 = (Ogre::BorderPanelOverlayElementFactory *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::BorderPanelOverlayElementFactory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_BorderPanelOverlayElementFactory_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::BorderPanelOverlayElementFactory *arg1 = (Ogre::BorderPanelOverlayElementFactory *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::BorderPanelOverlayElementFactory **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::BorderPanelOverlayElementFactory const *)arg1)->getTypeName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1BorderPanelOverlayElementFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::BorderPanelOverlayElementFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::BorderPanelOverlayElementFactory *)new Ogre::BorderPanelOverlayElementFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::BorderPanelOverlayElementFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1BorderPanelOverlayElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::BorderPanelOverlayElementFactory *arg1 = (Ogre::BorderPanelOverlayElementFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::BorderPanelOverlayElementFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElementFactory_1createOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::TextAreaOverlayElementFactory *arg1 = (Ogre::TextAreaOverlayElementFactory *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElementFactory **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElementFactory_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::TextAreaOverlayElementFactory *arg1 = (Ogre::TextAreaOverlayElementFactory *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElementFactory **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::TextAreaOverlayElementFactory const *)arg1)->getTypeName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1TextAreaOverlayElementFactory(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::TextAreaOverlayElementFactory *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::TextAreaOverlayElementFactory *)new Ogre::TextAreaOverlayElementFactory();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::TextAreaOverlayElementFactory **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1TextAreaOverlayElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::TextAreaOverlayElementFactory *arg1 = (Ogre::TextAreaOverlayElementFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::TextAreaOverlayElementFactory **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1OverlayContainer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  {
    try {
      (arg1)->addChild(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1addChildImpl_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  {
    try {
      (arg1)->addChildImpl(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1addChildImpl_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::OverlayContainer **)&jarg2; 
  {
    try {
      (arg1)->addChildImpl(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1removeChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->removeChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1getChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->getChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1initialise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      (arg1)->initialise();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1addChild(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  {
    try {
      (arg1)->_addChild(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1removeChild_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  {
    try {
      (arg1)->_removeChild(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1removeChild_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->_removeChild((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1getChildIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  SwigValueWrapper< Ogre::MapIterator< Ogre::map< std::string,Ogre::OverlayElement *,std::less< std::string > >::type > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      result = (arg1)->getChildIterator();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayContainer::ChildIterator **)&jresult = new Ogre::OverlayContainer::ChildIterator((const Ogre::OverlayContainer::ChildIterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1getChildContainerIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  SwigValueWrapper< Ogre::MapIterator< Ogre::map< std::string,Ogre::OverlayContainer *,std::less< std::string > >::type > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      result = (arg1)->getChildContainerIterator();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayContainer::ChildContainerIterator **)&jresult = new Ogre::OverlayContainer::ChildContainerIterator((const Ogre::OverlayContainer::ChildContainerIterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1positionsOutOfDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      (arg1)->_positionsOutOfDate();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      (arg1)->_update();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1notifyZOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::ushort result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::ushort)(arg1)->_notifyZOrder(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1notifyViewport(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      (arg1)->_notifyViewport();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1notifyWorldTransforms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Matrix4 *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::Matrix4 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Matrix4 const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->_notifyWorldTransforms((Ogre::Matrix4 const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1notifyParent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayContainer *arg2 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Overlay *arg3 = (Ogre::Overlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::OverlayContainer **)&jarg2; 
  arg3 = *(Ogre::Overlay **)&jarg3; 
  {
    try {
      (arg1)->_notifyParent(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1_1updateRenderQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::RenderQueue **)&jarg2; 
  {
    try {
      (arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1isContainer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayContainer const *)arg1)->isContainer();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1isChildrenProcessEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::OverlayContainer const *)arg1)->isChildrenProcessEvents();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1setChildrenProcessEvents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setChildrenProcessEvents(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1findElementAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->findElementAt(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1copyFromTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  {
    try {
      (arg1)->copyFromTemplate(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1clone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::OverlayContainer *arg1 = (Ogre::OverlayContainer *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayContainer **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->clone((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1OverlayManager(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::OverlayManager *)new Ogre::OverlayManager();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1OverlayManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1_1releaseManualHardwareResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      (arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1_1restoreManualHardwareResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      (arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getScriptPatterns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::StringVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (Ogre::StringVector *) &((Ogre::OverlayManager const *)arg1)->getScriptPatterns();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::StringVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1parseScript(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::DataStreamPtr *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  arg2 = *(Ogre::DataStreamPtr **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DataStreamPtr & reference is null");
    return ;
  } 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      (arg1)->parseScript(*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getLoadingOrder(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayManager const *)arg1)->getLoadingOrder();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Overlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::Overlay *)(arg1)->create((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Overlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getByName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::Overlay *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::Overlay *)(arg1)->getByName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::Overlay **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroy_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->destroy((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroy_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Overlay *arg2 = (Ogre::Overlay *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  arg2 = *(Ogre::Overlay **)&jarg2; 
  {
    try {
      (arg1)->destroy(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroyAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      (arg1)->destroyAll();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getOverlayIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  SwigValueWrapper< Ogre::MapIterator< Ogre::map< std::string,Ogre::Overlay *,std::less< std::string > >::type > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (arg1)->getOverlayIterator();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayManager::OverlayMapIterator **)&jresult = new Ogre::OverlayManager::OverlayMapIterator((const Ogre::OverlayManager::OverlayMapIterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1_1queueOverlaysForRendering(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Camera *arg2 = (Ogre::Camera *) 0 ;
  Ogre::RenderQueue *arg3 = (Ogre::RenderQueue *) 0 ;
  Ogre::Viewport *arg4 = (Ogre::Viewport *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  arg2 = *(Ogre::Camera **)&jarg2; 
  arg3 = *(Ogre::RenderQueue **)&jarg3; 
  arg4 = *(Ogre::Viewport **)&jarg4; 
  {
    try {
      (arg1)->_queueOverlaysForRendering(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getViewportHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (int)((Ogre::OverlayManager const *)arg1)->getViewportHeight();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getViewportWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (int)((Ogre::OverlayManager const *)arg1)->getViewportWidth();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getViewportAspectRatio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::OverlayManager const *)arg1)->getViewportAspectRatio();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getViewportOrientationMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OrientationMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (Ogre::OrientationMode)((Ogre::OverlayManager const *)arg1)->getViewportOrientationMode();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1createOverlayElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  bool arg4 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1createOverlayElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElement((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getOverlayElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool arg3 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->getOverlayElement((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getOverlayElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->getOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1hasOverlayElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try {
      result = (bool)(arg1)->hasOverlayElement((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1hasOverlayElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)(arg1)->hasOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroyOverlayElement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->destroyOverlayElement((Ogre::String const &)*arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroyOverlayElement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->destroyOverlayElement((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroyOverlayElement_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  {
    try {
      (arg1)->destroyOverlayElement(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroyOverlayElement_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OverlayElement *arg2 = (Ogre::OverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  arg2 = *(Ogre::OverlayElement **)&jarg2; 
  {
    try {
      (arg1)->destroyOverlayElement(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroyAllOverlayElements_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->destroyAllOverlayElements(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1destroyAllOverlayElements_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      (arg1)->destroyAllOverlayElements();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1addOverlayElementFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OverlayElementFactory *arg2 = (Ogre::OverlayElementFactory *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  arg2 = *(Ogre::OverlayElementFactory **)&jarg2; 
  {
    try {
      (arg1)->addOverlayElementFactory(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getOverlayElementFactoryMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::OverlayManager::FactoryMap *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (Ogre::OverlayManager::FactoryMap *) &((Ogre::OverlayManager const *)arg1)->getOverlayElementFactoryMap();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayManager::FactoryMap **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1createOverlayElementFromTemplate_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  bool arg5 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElementFromTemplate((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1createOverlayElementFromTemplate_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::String *arg4 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return 0;
  Ogre::String arg4_str(arg4_pstr);
  arg4 = &arg4_str;
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElementFromTemplate((Ogre::String const &)*arg2,(Ogre::String const &)*arg3,(Ogre::String const &)*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1cloneOverlayElementFromTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->cloneOverlayElementFromTemplate((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1createOverlayElementFromFactory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::String *arg3 = 0 ;
  Ogre::OverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (Ogre::OverlayElement *)(arg1)->createOverlayElementFromFactory((Ogre::String const &)*arg2,(Ogre::String const &)*arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getTemplateIterator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  SwigValueWrapper< Ogre::MapIterator< Ogre::map< std::string,Ogre::OverlayElement *,std::less< std::string > >::type > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  {
    try {
      result = (arg1)->getTemplateIterator();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayManager::TemplateIterator **)&jresult = new Ogre::OverlayManager::TemplateIterator((const Ogre::OverlayManager::TemplateIterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1isTemplate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  Ogre::OverlayManager *arg1 = (Ogre::OverlayManager *) 0 ;
  Ogre::String arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlayManager **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (bool)((Ogre::OverlayManager const *)arg1)->isTemplate(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1getSingleton(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Ogre::OverlayManager *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (Ogre::OverlayManager *) &Ogre::OverlayManager::getSingleton();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::OverlayManager **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1OverlaySystem(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::OverlaySystem *arg1 = (Ogre::OverlaySystem *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::OverlaySystem **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlaySystem_1renderQueueStarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jstring jarg3, jlong jarg4) {
  Ogre::OverlaySystem *arg1 = (Ogre::OverlaySystem *) 0 ;
  Ogre::uint8 arg2 ;
  Ogre::String *arg3 = 0 ;
  bool *arg4 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlaySystem **)&jarg1; 
  arg2 = (Ogre::uint8)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  Ogre::String arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  arg4 = *(bool **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bool & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->renderQueueStarted(arg2,(Ogre::String const &)*arg3,*arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_OverlaySystem_1eventOccurred(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  Ogre::OverlaySystem *arg1 = (Ogre::OverlaySystem *) 0 ;
  Ogre::String *arg2 = 0 ;
  Ogre::NameValuePairList *arg3 = (Ogre::NameValuePairList *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::OverlaySystem **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = *(Ogre::NameValuePairList **)&jarg3; 
  {
    try {
      (arg1)->eventOccurred((Ogre::String const &)*arg2,(Ogre::NameValuePairList const *)arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1PanelOverlayElement(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::PanelOverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (Ogre::PanelOverlayElement *)new Ogre::PanelOverlayElement((Ogre::String const &)*arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::PanelOverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1PanelOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1initialise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  {
    try {
      (arg1)->initialise();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1_1releaseManualHardwareResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1_1restoreManualHardwareResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1setTiling_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jint jarg4) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::ushort arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::ushort)jarg4; 
  {
    try {
      (arg1)->setTiling(arg2,arg3,arg4);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1setTiling_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  {
    try {
      (arg1)->setTiling(arg2,arg3);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1getTileX_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::PanelOverlayElement const *)arg1)->getTileX(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1getTileX_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::PanelOverlayElement const *)arg1)->getTileX();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1getTileY_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::ushort arg2 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = (Ogre::ushort)jarg2; 
  {
    try {
      result = (Ogre::Real)((Ogre::PanelOverlayElement const *)arg1)->getTileY(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1getTileY_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::PanelOverlayElement const *)arg1)->getTileY();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1setUV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3, jfloat jarg4, jfloat jarg5) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  Ogre::Real arg3 ;
  Ogre::Real arg4 ;
  Ogre::Real arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  arg3 = (Ogre::Real)jarg3; 
  arg4 = (Ogre::Real)jarg4; 
  arg5 = (Ogre::Real)jarg5; 
  {
    try {
      (arg1)->setUV(arg2,arg3,arg4,arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1getUV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::Real *arg2 = 0 ;
  Ogre::Real *arg3 = 0 ;
  Ogre::Real *arg4 = 0 ;
  Ogre::Real *arg5 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = *(Ogre::Real **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Real & reference is null");
    return ;
  } 
  arg3 = *(Ogre::Real **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Real & reference is null");
    return ;
  } 
  arg4 = *(Ogre::Real **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Real & reference is null");
    return ;
  } 
  arg5 = *(Ogre::Real **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::Real & reference is null");
    return ;
  } 
  {
    try {
      ((Ogre::PanelOverlayElement const *)arg1)->getUV(*arg2,*arg3,*arg4,*arg5);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1setTransparent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      (arg1)->setTransparent(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1isTransparent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  {
    try {
      result = (bool)((Ogre::PanelOverlayElement const *)arg1)->isTransparent();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::PanelOverlayElement const *)arg1)->getTypeName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1getRenderOperation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::RenderOperation *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = *(Ogre::RenderOperation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RenderOperation & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getRenderOperation(*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1_1updateRenderQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::PanelOverlayElement *arg1 = (Ogre::PanelOverlayElement *) 0 ;
  Ogre::RenderQueue *arg2 = (Ogre::RenderQueue *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::PanelOverlayElement **)&jarg1; 
  arg2 = *(Ogre::RenderQueue **)&jarg2; 
  {
    try {
      (arg1)->_updateRenderQueue(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_new_1TextAreaOverlayElement(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  Ogre::String *arg1 = 0 ;
  Ogre::TextAreaOverlayElement *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  Ogre::String arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  {
    try {
      result = (Ogre::TextAreaOverlayElement *)new Ogre::TextAreaOverlayElement((Ogre::String const &)*arg1);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::TextAreaOverlayElement **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_delete_1TextAreaOverlayElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      delete arg1;
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1initialise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      (arg1)->initialise();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1_1releaseManualHardwareResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_releaseManualHardwareResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1_1restoreManualHardwareResources(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_restoreManualHardwareResources();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setCaption(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::DisplayString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = *(Ogre::DisplayString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::DisplayString const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setCaption((Ogre::DisplayString const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setCharHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setCharHeight(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getCharHeight(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TextAreaOverlayElement const *)arg1)->getCharHeight();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setSpaceWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = (Ogre::Real)jarg2; 
  {
    try {
      (arg1)->setSpaceWidth(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getSpaceWidth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::Real result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::Real)((Ogre::TextAreaOverlayElement const *)arg1)->getSpaceWidth();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setFontName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::String *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  Ogre::String arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      (arg1)->setFontName((Ogre::String const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getFont(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::FontPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::FontPtr *) &((Ogre::TextAreaOverlayElement const *)arg1)->getFont();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::FontPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getTypeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::String *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::String *) &((Ogre::TextAreaOverlayElement const *)arg1)->getTypeName();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getMaterial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::MaterialPtr *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::MaterialPtr *) &((Ogre::TextAreaOverlayElement const *)arg1)->getMaterial();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::MaterialPtr **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getRenderOperation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::RenderOperation *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = *(Ogre::RenderOperation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::RenderOperation & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->getRenderOperation(*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setColour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = *(Ogre::ColourValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::ColourValue const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setColour((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getColour(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::TextAreaOverlayElement const *)arg1)->getColour();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::ColourValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setColourBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = *(Ogre::ColourValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::ColourValue const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setColourBottom((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getColourBottom(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::TextAreaOverlayElement const *)arg1)->getColourBottom();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::ColourValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setColourTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = *(Ogre::ColourValue **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Ogre::ColourValue const & reference is null");
    return ;
  } 
  {
    try {
      (arg1)->setColourTop((Ogre::ColourValue const &)*arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getColourTop(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::ColourValue *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::ColourValue *) &((Ogre::TextAreaOverlayElement const *)arg1)->getColourTop();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  *(Ogre::ColourValue **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::TextAreaOverlayElement::Alignment arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = (Ogre::TextAreaOverlayElement::Alignment)jarg2; 
  {
    try {
      (arg1)->setAlignment(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jint JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1getAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::TextAreaOverlayElement::Alignment result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      result = (Ogre::TextAreaOverlayElement::Alignment)((Ogre::TextAreaOverlayElement const *)arg1)->getAlignment();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return 0; 
      };
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1setMetricsMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  Ogre::GuiMetricsMode arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  arg2 = (Ogre::GuiMetricsMode)jarg2; 
  {
    try {
      (arg1)->setMetricsMode(arg2);
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT void JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1_1update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Ogre::TextAreaOverlayElement *arg1 = (Ogre::TextAreaOverlayElement *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Ogre::TextAreaOverlayElement **)&jarg1; 
  {
    try {
      (arg1)->_update();
    }
    
    
    
    
    
    catch (const std::exception& e) {
      {
        SWIG_JavaException(jenv, SWIG_RuntimeError, e.what()); return ; 
      };
    }
  }
}


SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_Font_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::Resource **)&baseptr = *(Ogre::Font **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_FontManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::ResourceManager **)&baseptr = *(Ogre::FontManager **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::StringInterface **)&baseptr = *(Ogre::OverlayElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElementFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::OverlayElementFactory **)&baseptr = *(Ogre::PanelOverlayElementFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_BorderPanelOverlayElementFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::OverlayElementFactory **)&baseptr = *(Ogre::BorderPanelOverlayElementFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElementFactory_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::OverlayElementFactory **)&baseptr = *(Ogre::TextAreaOverlayElementFactory **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayContainer_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::OverlayElement **)&baseptr = *(Ogre::OverlayContainer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlayManager_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::ScriptLoader **)&baseptr = *(Ogre::OverlayManager **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_OverlaySystem_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::RenderQueueListener **)&baseptr = *(Ogre::OverlaySystem **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_PanelOverlayElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::OverlayContainer **)&baseptr = *(Ogre::PanelOverlayElement **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_org_Ogre_OgreOverlayJNI_TextAreaOverlayElement_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Ogre::OverlayElement **)&baseptr = *(Ogre::TextAreaOverlayElement **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

