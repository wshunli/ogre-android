/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.Ogre;

public class MaterialManager extends ResourceManager {
  private transient long swigCPtr;

  protected MaterialManager(long cPtr, boolean cMemoryOwn) {
    super(OgreJNI.MaterialManager_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MaterialManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        OgreJNI.delete_MaterialManager(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public static void setDEFAULT_SCHEME_NAME(String value) {
    OgreJNI.MaterialManager_DEFAULT_SCHEME_NAME_set(value);
  }

  public static String getDEFAULT_SCHEME_NAME() {
    return OgreJNI.MaterialManager_DEFAULT_SCHEME_NAME_get();
  }

  public MaterialPtr create(String name, String group, boolean isManual, ManualResourceLoader loader, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t createParams) {
    return new MaterialPtr(OgreJNI.MaterialManager_create__SWIG_0(swigCPtr, this, name, group, isManual, ManualResourceLoader.getCPtr(loader), loader, SWIGTYPE_p_std__mapT_std__string_std__string_std__lessT_std__string_t_t.getCPtr(createParams)), true);
  }

  public MaterialPtr create(String name, String group, boolean isManual, ManualResourceLoader loader) {
    return new MaterialPtr(OgreJNI.MaterialManager_create__SWIG_1(swigCPtr, this, name, group, isManual, ManualResourceLoader.getCPtr(loader), loader), true);
  }

  public MaterialPtr create(String name, String group, boolean isManual) {
    return new MaterialPtr(OgreJNI.MaterialManager_create__SWIG_2(swigCPtr, this, name, group, isManual), true);
  }

  public MaterialPtr create(String name, String group) {
    return new MaterialPtr(OgreJNI.MaterialManager_create__SWIG_3(swigCPtr, this, name, group), true);
  }

  public MaterialPtr getByName(String name, String groupName) {
    return new MaterialPtr(OgreJNI.MaterialManager_getByName__SWIG_0(swigCPtr, this, name, groupName), true);
  }

  public MaterialPtr getByName(String name) {
    return new MaterialPtr(OgreJNI.MaterialManager_getByName__SWIG_1(swigCPtr, this, name), true);
  }

  public MaterialPtr getDefaultMaterial(boolean useLighting) {
    return new MaterialPtr(OgreJNI.MaterialManager_getDefaultMaterial__SWIG_0(swigCPtr, this, useLighting), true);
  }

  public MaterialPtr getDefaultMaterial() {
    return new MaterialPtr(OgreJNI.MaterialManager_getDefaultMaterial__SWIG_1(swigCPtr, this), true);
  }

  public MaterialManager() {
    this(OgreJNI.new_MaterialManager(), true);
  }

  public void initialise() {
    OgreJNI.MaterialManager_initialise(swigCPtr, this);
  }

  public void parseScript(SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t stream, String groupName) {
    OgreJNI.MaterialManager_parseScript(swigCPtr, this, SWIGTYPE_p_Ogre__SharedPtrT_Ogre__DataStream_t.getCPtr(stream), groupName);
  }

  public void setDefaultTextureFiltering(TextureFilterOptions fo) {
    OgreJNI.MaterialManager_setDefaultTextureFiltering__SWIG_0(swigCPtr, this, fo.swigValue());
  }

  public void setDefaultTextureFiltering(FilterType ftype, FilterOptions opts) {
    OgreJNI.MaterialManager_setDefaultTextureFiltering__SWIG_1(swigCPtr, this, ftype.swigValue(), opts.swigValue());
  }

  public void setDefaultTextureFiltering(FilterOptions minFilter, FilterOptions magFilter, FilterOptions mipFilter) {
    OgreJNI.MaterialManager_setDefaultTextureFiltering__SWIG_2(swigCPtr, this, minFilter.swigValue(), magFilter.swigValue(), mipFilter.swigValue());
  }

  public FilterOptions getDefaultTextureFiltering(FilterType ftype) {
    return FilterOptions.swigToEnum(OgreJNI.MaterialManager_getDefaultTextureFiltering(swigCPtr, this, ftype.swigValue()));
  }

  public void setDefaultAnisotropy(long maxAniso) {
    OgreJNI.MaterialManager_setDefaultAnisotropy(swigCPtr, this, maxAniso);
  }

  public long getDefaultAnisotropy() {
    return OgreJNI.MaterialManager_getDefaultAnisotropy(swigCPtr, this);
  }

  public MaterialPtr getDefaultSettings() {
    return new MaterialPtr(OgreJNI.MaterialManager_getDefaultSettings(swigCPtr, this), true);
  }

  public int _getSchemeIndex(String name) {
    return OgreJNI.MaterialManager__getSchemeIndex(swigCPtr, this, name);
  }

  public String _getSchemeName(int index) {
    return OgreJNI.MaterialManager__getSchemeName(swigCPtr, this, index);
  }

  public int _getActiveSchemeIndex() {
    return OgreJNI.MaterialManager__getActiveSchemeIndex(swigCPtr, this);
  }

  public String getActiveScheme() {
    return OgreJNI.MaterialManager_getActiveScheme(swigCPtr, this);
  }

  public void setActiveScheme(String schemeName) {
    OgreJNI.MaterialManager_setActiveScheme(swigCPtr, this, schemeName);
  }

  public void addListener(MaterialManager_Listener l, String schemeName) {
    OgreJNI.MaterialManager_addListener__SWIG_0(swigCPtr, this, MaterialManager_Listener.getCPtr(l), l, schemeName);
  }

  public void addListener(MaterialManager_Listener l) {
    OgreJNI.MaterialManager_addListener__SWIG_1(swigCPtr, this, MaterialManager_Listener.getCPtr(l), l);
  }

  public void removeListener(MaterialManager_Listener l, String schemeName) {
    OgreJNI.MaterialManager_removeListener__SWIG_0(swigCPtr, this, MaterialManager_Listener.getCPtr(l), l, schemeName);
  }

  public void removeListener(MaterialManager_Listener l) {
    OgreJNI.MaterialManager_removeListener__SWIG_1(swigCPtr, this, MaterialManager_Listener.getCPtr(l), l);
  }

  public Technique _arbitrateMissingTechniqueForActiveScheme(Material mat, int lodIndex, Renderable rend) {
    long cPtr = OgreJNI.MaterialManager__arbitrateMissingTechniqueForActiveScheme(swigCPtr, this, Material.getCPtr(mat), mat, lodIndex, Renderable.getCPtr(rend), rend);
    return (cPtr == 0) ? null : new Technique(cPtr, false);
  }

  public void _notifyAfterIlluminationPassesCreated(Technique mat) {
    OgreJNI.MaterialManager__notifyAfterIlluminationPassesCreated(swigCPtr, this, Technique.getCPtr(mat), mat);
  }

  public void _notifyBeforeIlluminationPassesCleared(Technique mat) {
    OgreJNI.MaterialManager__notifyBeforeIlluminationPassesCleared(swigCPtr, this, Technique.getCPtr(mat), mat);
  }

  public static MaterialManager getSingleton() {
    return new MaterialManager(OgreJNI.MaterialManager_getSingleton(), false);
  }

}
